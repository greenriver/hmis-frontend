query GetAssessment($id: ID!) {
  assessment(id: $id) {
    ...FullAssessment
    definition {
      ...FormDefinitionFields
    }
  }
}

query GetClientAssessments(
  $id: ID!
  $limit: Int = 10
  $offset: Int = 0
  $sortOrder: AssessmentSortOption = ASSESSMENT_DATE
  $filters: AssessmentFilterOptions = null
) {
  client(id: $id) {
    id
    assessments(
      limit: $limit
      offset: $offset
      sortOrder: $sortOrder
      filters: $filters
    ) {
      offset
      limit
      nodesCount
      nodes {
        ...AssessmentFields
        enrollment {
          id
          entryDate
          exitDate
          inProgress
          project {
            ...ProjectNameAndType
          }
        }
      }
    }
  }
}

query GetEnrollmentAssessments(
  $id: ID!
  $limit: Int = 10
  $offset: Int = 0
  $inProgress: Boolean
  $sortOrder: AssessmentSortOption = ASSESSMENT_DATE
  $filters: AssessmentFilterOptions
) {
  enrollment(id: $id) {
    id
    assessments(
      limit: $limit
      offset: $offset
      inProgress: $inProgress
      sortOrder: $sortOrder
      filters: $filters
    ) {
      offset
      limit
      nodesCount
      nodes {
        ...AssessmentFields
      }
    }
  }
}

query GetHouseholdAssessments(
  $householdId: ID!
  $assessmentRole: AssessmentRole!
  $assessmentId: ID
) {
  householdAssessments(
    householdId: $householdId
    assessmentRole: $assessmentRole
    assessmentId: $assessmentId
  ) {
    ...AssessmentWithValuesAndRecords
  }
}

mutation SaveAssessment($input: SaveAssessmentInput!) {
  saveAssessment(input: $input) {
    assessment {
      ...AssessmentWithValues
    }
    errors {
      ...ValidationErrorFields
    }
  }
}

mutation SubmitAssessment($input: SubmitAssessmentInput!) {
  submitAssessment(input: $input) {
    assessment {
      ...AssessmentWithRecords
    }
    errors {
      ...ValidationErrorFields
    }
  }
}

mutation SubmitHouseholdAssessments($input: SubmitHouseholdAssessmentsInput!) {
  submitHouseholdAssessments(input: $input) {
    assessments {
      ...AssessmentWithRecords
    }
    errors {
      ...ValidationErrorFields
    }
  }
}

query GetAssessmentsForPopulation(
  $id: ID!
  $limit: Int = 10
  $offset: Int = 0
  $roles: [AssessmentRole!]
) {
  client(id: $id) {
    id
    assessments(
      limit: $limit
      offset: $offset
      filters: { type: $roles }
      inProgress: false
      sortOrder: ASSESSMENT_DATE
    ) {
      offset
      limit
      nodesCount
      nodes {
        ...AssessmentWithRecords
        enrollment {
          id
          entryDate
          exitDate
          project {
            ...ProjectNameAndType
          }
        }
      }
    }
  }
}

mutation DeleteAssessment($id: ID!) {
  deleteAssessment(input: { id: $id }) {
    clientMutationId
    assessmentId
    errors {
      ...ValidationErrorFields
    }
  }
}
