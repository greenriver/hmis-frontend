import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A base64 encoded string */
  Base64: string;
  /** An ISO 8601-encoded date */
  ISO8601Date: string;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
  /** Arbitrary JSON Type */
  JsonObject: any;
};

/** Autogenerated input type of AddHouseholdMembersToEnrollment */
export type AddHouseholdMembersToEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entryDate: Scalars['ISO8601Date'];
  householdId: Scalars['ID'];
  householdMembers: Array<EnrollmentHouseholdMemberInput>;
};

/** Autogenerated return type of AddHouseholdMembersToEnrollment. */
export type AddHouseholdMembersToEnrollmentPayload = {
  __typename?: 'AddHouseholdMembersToEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollments?: Maybe<Array<Enrollment>>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of AddRecentItem */
export type AddRecentItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  itemId: Scalars['ID'];
  itemType: RecentItemType;
};

/** User account for a user of the system */
export type ApplicationUser = {
  __typename?: 'ApplicationUser';
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  recentItems: Array<OmnisearchResult>;
};

/** Custom Assessment */
export type Assessment = {
  __typename?: 'Assessment';
  assessmentDate: Scalars['ISO8601Date'];
  client: Client;
  customForm?: Maybe<CustomForm>;
  dataCollectionStage?: Maybe<DataCollectionStage>;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  id: Scalars['ID'];
  inProgress: Scalars['Boolean'];
  user?: Maybe<User>;
};

export type AssessmentInput = {
  /** Required if updating an existing assessment */
  assessmentId?: InputMaybe<Scalars['ID']>;
  /** Whether warnings have been confirmed */
  confirmed?: InputMaybe<Scalars['Boolean']>;
  /** Required if saving a new assessment */
  enrollmentId?: InputMaybe<Scalars['ID']>;
  /** Required if saving a new assessment */
  formDefinitionId?: InputMaybe<Scalars['ID']>;
  /** Transformed HUD values as JSON */
  hudValues?: InputMaybe<Scalars['JsonObject']>;
  /** Validate assessment but don't submit it */
  validateOnly?: InputMaybe<Scalars['Boolean']>;
  /** Raw form state as JSON */
  values?: InputMaybe<Scalars['JsonObject']>;
};

/** 4.19.4 */
export enum AssessmentLevel {
  /** (1) Crisis Needs Assessment */
  CrisisNeedsAssessment = 'CRISIS_NEEDS_ASSESSMENT',
  /** (2) Housing Needs Assessment */
  HousingNeedsAssessment = 'HOUSING_NEEDS_ASSESSMENT',
  /** Invalid Value */
  Invalid = 'INVALID',
}

/** HUD Assessment Sorting Options */
export enum AssessmentSortOption {
  AssessmentDate = 'ASSESSMENT_DATE',
  DateUpdated = 'DATE_UPDATED',
}

/** 4.19.3 */
export enum AssessmentType {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (3) In Person */
  InPerson = 'IN_PERSON',
  /** (1) Phone */
  Phone = 'PHONE',
  /** (2) Virtual */
  Virtual = 'VIRTUAL',
}

export type AssessmentsPaginated = {
  __typename?: 'AssessmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Assessment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export enum AuditEventType {
  Create = 'create',
  Destroy = 'destroy',
  Update = 'update',
}

/** Value to autofill based on conditional logic */
export type AutofillValue = {
  __typename?: 'AutofillValue';
  autofillBehavior: EnableBehavior;
  autofillWhen: Array<EnableWhen>;
  /** Link IDs of numeric questions to sum up and set as the value if condition is met */
  sumQuestions?: Maybe<Array<Scalars['String']>>;
  /** Value to autofill if condition is met */
  valueBoolean?: Maybe<Scalars['Boolean']>;
  /** Value to autofill if condition is met */
  valueCode?: Maybe<Scalars['String']>;
  /** Value to autofill if condition is met */
  valueNumber?: Maybe<Scalars['Int']>;
};

/** 2.07.6 */
export enum Availability {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (3) Overflow */
  Overflow = 'OVERFLOW',
  /** (2) Seasonal */
  Seasonal = 'SEASONAL',
  /** (1) Year-round */
  YearRound = 'YEAR_ROUND',
}

export type Bed = {
  __typename?: 'Bed';
  bedType: InventoryBedType;
  endDate?: Maybe<Scalars['ISO8601Date']>;
  gender?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  startDate: Scalars['ISO8601Date'];
  unit: Unit;
};

export type BedInput = {
  chBedInventory?: InputMaybe<Scalars['Int']>;
  chVetBedInventory?: InputMaybe<Scalars['Int']>;
  chYouthBedInventory?: InputMaybe<Scalars['Int']>;
  inventoryId: Scalars['ID'];
  otherBedInventory?: InputMaybe<Scalars['Int']>;
  /** Unit to assign beds to */
  unitId: Scalars['ID'];
  vetBedInventory?: InputMaybe<Scalars['Int']>;
  youthBedInventory?: InputMaybe<Scalars['Int']>;
  youthVetBedInventory?: InputMaybe<Scalars['Int']>;
};

/** 2.07.5 */
export enum BedType {
  /** (1) Facility-based */
  FacilityBased = 'FACILITY_BASED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (3) Other */
  Other = 'OTHER',
  /** (2) Voucher */
  Voucher = 'VOUCHER',
}

export type BedsPaginated = {
  __typename?: 'BedsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Bed>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export enum BoundType {
  Max = 'MAX',
  Min = 'MIN',
}

/** HUD Coordinated Entry Assessment */
export type CeAssessment = {
  __typename?: 'CeAssessment';
  assessmentDate: Scalars['ISO8601Date'];
  assessmentLevel?: Maybe<AssessmentLevel>;
  assessmentLocation: Scalars['String'];
  assessmentType?: Maybe<AssessmentType>;
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  id: Scalars['ID'];
  prioritizationStatus?: Maybe<PrioritizationStatus>;
  user?: Maybe<User>;
};

export type CeAssessmentsPaginated = {
  __typename?: 'CeAssessmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<CeAssessment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of ClearRecentItems */
export type ClearRecentItemsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** HUD Client */
export type Client = {
  __typename?: 'Client';
  access: ClientAccess;
  age?: Maybe<Scalars['Int']>;
  assessments: AssessmentsPaginated;
  auditHistory: ClientAuditEventsPaginated;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  disabilities: DisabilitiesPaginated;
  disabilityGroups: Array<DisabilityGroup>;
  dob?: Maybe<Scalars['ISO8601Date']>;
  dobDataQuality: DobDataQuality;
  enrollments: EnrollmentsPaginated;
  ethnicity: Ethnicity;
  files: FilesPaginated;
  firstName?: Maybe<Scalars['String']>;
  gender: Array<Gender>;
  healthAndDvs: HealthAndDvsPaginated;
  id: Scalars['ID'];
  image?: Maybe<ClientImage>;
  incomeBenefits: IncomeBenefitsPaginated;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  nameDataQuality: NameDataQuality;
  nameSuffix?: Maybe<Scalars['String']>;
  personalId: Scalars['String'];
  preferredName?: Maybe<Scalars['String']>;
  pronouns: Array<Scalars['String']>;
  race: Array<Race>;
  services: ServicesPaginated;
  ssn?: Maybe<Scalars['String']>;
  ssnDataQuality: SsnDataQuality;
  user?: Maybe<User>;
  veteranStatus: NoYesReasonsForMissingData;
  warehouseUrl: Scalars['String'];
};

/** HUD Client */
export type ClientAssessmentsArgs = {
  inProgress?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  roles?: InputMaybe<Array<FormRole>>;
  sortOrder?: InputMaybe<AssessmentSortOption>;
};

/** HUD Client */
export type ClientAuditHistoryArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Client */
export type ClientDisabilitiesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Client */
export type ClientEnrollmentsArgs = {
  includeInProgress?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  openOnDate?: InputMaybe<Scalars['ISO8601Date']>;
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<EnrollmentSortOption>;
};

/** HUD Client */
export type ClientFilesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<FileSortOption>;
};

/** HUD Client */
export type ClientHealthAndDvsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Client */
export type ClientIncomeBenefitsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Client */
export type ClientServicesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  searchTerm?: InputMaybe<Scalars['String']>;
  serviceCategory?: InputMaybe<Scalars['ID']>;
  serviceType?: InputMaybe<Scalars['ID']>;
  sortOrder?: InputMaybe<ServiceSortOption>;
};

export type ClientAccess = {
  __typename?: 'ClientAccess';
  canDeleteEnrollments: Scalars['Boolean'];
  canEditEnrollments: Scalars['Boolean'];
  canManageAnyClientFiles: Scalars['Boolean'];
  canManageOwnClientFiles: Scalars['Boolean'];
  canViewAnyConfidentialClientFiles: Scalars['Boolean'];
  canViewAnyNonconfidentialClientFiles: Scalars['Boolean'];
  canViewDob: Scalars['Boolean'];
  canViewEnrollmentDetails: Scalars['Boolean'];
  canViewFullSsn: Scalars['Boolean'];
  canViewPartialSsn: Scalars['Boolean'];
  id: Scalars['ID'];
};

export type ClientAuditEvent = {
  __typename?: 'ClientAuditEvent';
  createdAt: Scalars['ISO8601DateTime'];
  event: AuditEventType;
  id: Scalars['ID'];
  item: Client;
  /** Format is { field: { fieldName: "GQL field name", displayName: "Human readable name", values: [old, new] } } */
  objectChanges?: Maybe<Scalars['JsonObject']>;
  user?: Maybe<ApplicationUser>;
};

export type ClientAuditEventsPaginated = {
  __typename?: 'ClientAuditEventsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<ClientAuditEvent>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Client Image */
export type ClientImage = {
  __typename?: 'ClientImage';
  base64: Scalars['Base64'];
  contentType: Scalars['String'];
  id: Scalars['ID'];
};

/** HMIS Client search input */
export type ClientSearchInput = {
  /** Date of birth as format yyyy-mm-dd */
  dob?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  /** Client primary key */
  id?: InputMaybe<Scalars['ID']>;
  lastName?: InputMaybe<Scalars['String']>;
  organizations?: InputMaybe<Array<Scalars['ID']>>;
  personalId?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<Array<Scalars['ID']>>;
  /** Last 4 digits of SSN */
  ssnSerial?: InputMaybe<Scalars['String']>;
  /** Omnisearch string */
  textSearch?: InputMaybe<Scalars['String']>;
  warehouseId?: InputMaybe<Scalars['String']>;
};

/** HUD Client Sorting Options */
export enum ClientSortOption {
  /** Age: Oldest to Youngest */
  AgeOldestToYoungest = 'AGE_OLDEST_TO_YOUNGEST',
  /** Age: Youngest to Oldest */
  AgeYoungestToOldest = 'AGE_YOUNGEST_TO_OLDEST',
  /** First Name: A-Z */
  FirstNameAToZ = 'FIRST_NAME_A_TO_Z',
  /** First Name: Z-A */
  FirstNameZToA = 'FIRST_NAME_Z_TO_A',
  /** Last Name: A-Z */
  LastNameAToZ = 'LAST_NAME_A_TO_Z',
  /** Last Name: Z-A */
  LastNameZToA = 'LAST_NAME_Z_TO_A',
}

export type ClientsPaginated = {
  __typename?: 'ClientsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Client>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export enum Component {
  /** Display text as an error alert */
  AlertError = 'ALERT_ERROR',
  /** Display text as an info alert */
  AlertInfo = 'ALERT_INFO',
  /** Display text as a success alert */
  AlertSuccess = 'ALERT_SUCCESS',
  /** Display text as a warning alert */
  AlertWarning = 'ALERT_WARNING',
  /** Render a boolean input item as a checkbox */
  Checkbox = 'CHECKBOX',
  /** Specialized component for rendering disabilities in a table */
  DisabilityTable = 'DISABILITY_TABLE',
  /** Render a group of inputs horizontally */
  HorizontalGroup = 'HORIZONTAL_GROUP',
  /** Render contents in an info box */
  InfoGroup = 'INFO_GROUP',
  /** Render a group that contains children of the same type (e.g. all booleans) */
  InputGroup = 'INPUT_GROUP',
  /** Render a choice input item as radio buttons */
  RadioButtons = 'RADIO_BUTTONS',
  /** Render a choice input item as vertical radio buttons */
  RadioButtonsVertical = 'RADIO_BUTTONS_VERTICAL',
  /** SSN input component */
  Ssn = 'SSN',
}

/** Autogenerated input type of CreateBeds */
export type CreateBedsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: BedInput;
};

/** Autogenerated return type of CreateBeds. */
export type CreateBedsPayload = {
  __typename?: 'CreateBedsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** Autogenerated input type of CreateDirectUpload */
export type CreateDirectUploadInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: DirectUploadInput;
};

/** Autogenerated input type of CreateEnrollment */
export type CreateEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entryDate: Scalars['ISO8601Date'];
  householdMembers: Array<EnrollmentHouseholdMemberInput>;
  projectId: Scalars['ID'];
};

/** Autogenerated return type of CreateEnrollment. */
export type CreateEnrollmentPayload = {
  __typename?: 'CreateEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollments?: Maybe<Array<Enrollment>>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of CreateService */
export type CreateServiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ServiceInput;
};

/** Autogenerated return type of CreateService. */
export type CreateServicePayload = {
  __typename?: 'CreateServicePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  service?: Maybe<Service>;
};

/** Autogenerated input type of CreateUnits */
export type CreateUnitsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: UnitInput;
};

/** Autogenerated return type of CreateUnits. */
export type CreateUnitsPayload = {
  __typename?: 'CreateUnitsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** CustomForm */
export type CustomForm = {
  __typename?: 'CustomForm';
  assessment: Assessment;
  definition: FormDefinition;
  id: Scalars['ID'];
  values?: Maybe<Scalars['JsonObject']>;
};

/** 3.03.2 */
export enum DobDataQuality {
  /** (2) Approximate or partial DOB reported */
  ApproximateOrPartialDobReported = 'APPROXIMATE_OR_PARTIAL_DOB_REPORTED',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Full DOB reported */
  FullDobReported = 'FULL_DOB_REPORTED',
  /** Invalid Value */
  Invalid = 'INVALID',
}

export enum DataCollectedAbout {
  AllClients = 'ALL_CLIENTS',
  AllClientsReceivingSsvfFinancialAssistance = 'ALL_CLIENTS_RECEIVING_SSVF_FINANCIAL_ASSISTANCE',
  AllClientsReceivingSsvfServices = 'ALL_CLIENTS_RECEIVING_SSVF_SERVICES',
  AllVeterans = 'ALL_VETERANS',
  Hoh = 'HOH',
  HohAndAdults = 'HOH_AND_ADULTS',
  VeteranHoh = 'VETERAN_HOH',
}

/** 5.03.1 */
export enum DataCollectionStage {
  /** (5) Annual assessment */
  AnnualAssessment = 'ANNUAL_ASSESSMENT',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (6) Post-exit */
  PostExit = 'POST_EXIT',
  /** (1) Project entry */
  ProjectEntry = 'PROJECT_ENTRY',
  /** (3) Project exit */
  ProjectExit = 'PROJECT_EXIT',
  /** (2) Update */
  Update = 'UPDATE',
}

/** Autogenerated input type of DeleteAssessment */
export type DeleteAssessmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteAssessment. */
export type DeleteAssessmentPayload = {
  __typename?: 'DeleteAssessmentPayload';
  assessment?: Maybe<Assessment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of DeleteBeds */
export type DeleteBedsInput = {
  bedIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  inventoryId: Scalars['ID'];
};

/** Autogenerated return type of DeleteBeds. */
export type DeleteBedsPayload = {
  __typename?: 'DeleteBedsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** Autogenerated input type of DeleteClientFile */
export type DeleteClientFileInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  fileId: Scalars['ID'];
};

/** Autogenerated return type of DeleteClientFile. */
export type DeleteClientFilePayload = {
  __typename?: 'DeleteClientFilePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  file?: Maybe<File>;
};

/** Autogenerated input type of DeleteClientImage */
export type DeleteClientImageInput = {
  clientId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteClientImage. */
export type DeleteClientImagePayload = {
  __typename?: 'DeleteClientImagePayload';
  client?: Maybe<Client>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of DeleteEnrollment */
export type DeleteEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteEnrollment. */
export type DeleteEnrollmentPayload = {
  __typename?: 'DeleteEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of DeleteFunder */
export type DeleteFunderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteFunder. */
export type DeleteFunderPayload = {
  __typename?: 'DeleteFunderPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  funder?: Maybe<Funder>;
};

/** Autogenerated input type of DeleteInventory */
export type DeleteInventoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteInventory. */
export type DeleteInventoryPayload = {
  __typename?: 'DeleteInventoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** Autogenerated input type of DeleteOrganization */
export type DeleteOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteOrganization. */
export type DeleteOrganizationPayload = {
  __typename?: 'DeleteOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of DeleteProjectCoc */
export type DeleteProjectCocInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteProjectCoc. */
export type DeleteProjectCocPayload = {
  __typename?: 'DeleteProjectCocPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  projectCoc?: Maybe<ProjectCoc>;
};

/** Autogenerated input type of DeleteProject */
export type DeleteProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteProject. */
export type DeleteProjectPayload = {
  __typename?: 'DeleteProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  project?: Maybe<Project>;
};

/** Autogenerated input type of DeleteService */
export type DeleteServiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteService. */
export type DeleteServicePayload = {
  __typename?: 'DeleteServicePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  service?: Maybe<Service>;
};

/** Autogenerated input type of DeleteUnits */
export type DeleteUnitsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  inventoryId: Scalars['ID'];
  unitIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of DeleteUnits. */
export type DeleteUnitsPayload = {
  __typename?: 'DeleteUnitsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** Represents direct upload credentials */
export type DirectUpload = {
  __typename?: 'DirectUpload';
  /** Created blob record ID */
  blobId: Scalars['ID'];
  filename: Scalars['String'];
  /** HTTP request headers (JSON-encoded) */
  headers: Scalars['String'];
  /** Created blob record signed ID */
  signedBlobId: Scalars['ID'];
  /** Upload URL */
  url: Scalars['String'];
};

/** File information required to prepare a direct upload */
export type DirectUploadInput = {
  /** File size (bytes) */
  byteSize: Scalars['Int'];
  /** MD5 file checksum as base64 */
  checksum: Scalars['String'];
  /** File content type */
  contentType: Scalars['String'];
  /** Original file name */
  filename: Scalars['String'];
};

export type DisabilitiesPaginated = {
  __typename?: 'DisabilitiesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Disability>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Disability = {
  __typename?: 'Disability';
  client: Client;
  dataCollectionStage: DataCollectionStage;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  disabilityResponse: DisabilityResponse;
  disabilityType: DisabilityType;
  enrollment: Enrollment;
  id: Scalars['ID'];
  indefiniteAndImpairs?: Maybe<Scalars['Int']>;
  informationDate: Scalars['ISO8601Date'];
  user?: Maybe<User>;
};

/** Group of disability records that were collected at the same time */
export type DisabilityGroup = {
  __typename?: 'DisabilityGroup';
  chronicHealthCondition?: Maybe<NoYesReasonsForMissingData>;
  chronicHealthConditionIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  dataCollectionStage: DataCollectionStage;
  dateCreated?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated?: Maybe<Scalars['ISO8601DateTime']>;
  developmentalDisability?: Maybe<NoYesReasonsForMissingData>;
  /** Current disabling condition on the linked Enrollment. It may not match up with the disabilities specified in this group. */
  disablingCondition: NoYesReasonsForMissingData;
  enrollment: Enrollment;
  hivAids?: Maybe<NoYesReasonsForMissingData>;
  /** Concatenated string of Disability record IDs */
  id: Scalars['ID'];
  informationDate: Scalars['ISO8601Date'];
  mentalHealthDisorder?: Maybe<NoYesReasonsForMissingData>;
  mentalHealthDisorderIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  physicalDisability?: Maybe<NoYesReasonsForMissingData>;
  physicalDisabilityIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  substanceUseDisorder?: Maybe<DisabilityResponse>;
  substanceUseDisorderIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  user?: Maybe<User>;
};

/** 4.10.2 */
export enum DisabilityResponse {
  /** (1) Alcohol use disorder */
  AlcoholUseDisorder = 'ALCOHOL_USE_DISORDER',
  /** (3) Both alcohol and drug use disorders */
  BothAlcoholAndDrugUseDisorders = 'BOTH_ALCOHOL_AND_DRUG_USE_DISORDERS',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (2) Drug use disorder */
  DrugUseDisorder = 'DRUG_USE_DISORDER',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (0) No */
  No = 'NO',
}

/** 1.3 */
export enum DisabilityType {
  /** (7) Chronic health condition */
  ChronicHealthCondition = 'CHRONIC_HEALTH_CONDITION',
  /** (6) Developmental disability */
  DevelopmentalDisability = 'DEVELOPMENTAL_DISABILITY',
  /** (8) HIV/AIDS */
  HivAids = 'HIV_AIDS',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (9) Mental health disorder */
  MentalHealthDisorder = 'MENTAL_HEALTH_DISORDER',
  /** (5) Physical disability */
  PhysicalDisability = 'PHYSICAL_DISABILITY',
  /** (10) Substance use disorder */
  SubstanceUseDisorder = 'SUBSTANCE_USE_DISORDER',
}

export enum DisabledDisplay {
  Hidden = 'HIDDEN',
  Protected = 'PROTECTED',
}

export enum EnableBehavior {
  All = 'ALL',
  Any = 'ANY',
}

export enum EnableOperator {
  /** Use with answerBoolean to specify is the item should be enabled or not. */
  Enabled = 'ENABLED',
  Equal = 'EQUAL',
  /** Use with answerBoolean to specify if an answer should exist or not. */
  Exists = 'EXISTS',
  GreaterThan = 'GREATER_THAN',
  GreaterThanEqual = 'GREATER_THAN_EQUAL',
  /** Whether the value is in the answerCodes array. */
  In = 'IN',
  LessThan = 'LESS_THAN',
  LessThanEqual = 'LESS_THAN_EQUAL',
  NotEqual = 'NOT_EQUAL',
}

export type EnableWhen = {
  __typename?: 'EnableWhen';
  /** If question is boolean type, value for comparison */
  answerBoolean?: Maybe<Scalars['Boolean']>;
  /** If question is choice type, value for comparison */
  answerCode?: Maybe<Scalars['String']>;
  /** If question is choice type, and operator is IN, values for comparison */
  answerCodes?: Maybe<Array<Scalars['String']>>;
  /** If question is choice type and has grouped options, value for comparison */
  answerGroupCode?: Maybe<Scalars['String']>;
  /** If question is numeric, value for comparison */
  answerNumber?: Maybe<Scalars['Int']>;
  /** The linkId of a question to compare with the question using the operator */
  compareQuestion?: Maybe<Scalars['String']>;
  /** How to evaluate the question's answer */
  operator: EnableOperator;
  /** The linkId of question that determines whether item is enabled/disabled */
  question: Scalars['String'];
};

/** HUD Enrollment */
export type Enrollment = {
  __typename?: 'Enrollment';
  assessments: AssessmentsPaginated;
  ceAssessments: CeAssessmentsPaginated;
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateToStreetEssh?: Maybe<Scalars['ISO8601Date']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  disablingCondition?: Maybe<NoYesReasonsForMissingData>;
  entryDate: Scalars['ISO8601Date'];
  events: EventsPaginated;
  exitAssessment?: Maybe<Assessment>;
  exitDate?: Maybe<Scalars['ISO8601Date']>;
  files: FilesPaginated;
  household: Household;
  householdSize: Scalars['Int'];
  id: Scalars['ID'];
  inProgress: Scalars['Boolean'];
  intakeAssessment?: Maybe<Assessment>;
  lengthOfStay?: Maybe<ResidencePriorLengthOfStay>;
  livingSituation?: Maybe<LivingSituation>;
  losUnderThreshold?: Maybe<NoYesMissing>;
  monthsHomelessPastThreeYears?: Maybe<MonthsHomelessPastThreeYears>;
  previousStreetEssh?: Maybe<NoYesMissing>;
  project: Project;
  relationshipToHoH: RelationshipToHoH;
  services: ServicesPaginated;
  status: EnrollmentStatus;
  timesHomelessPastThreeYears?: Maybe<TimesHomelessPastThreeYears>;
  user?: Maybe<User>;
};

/** HUD Enrollment */
export type EnrollmentAssessmentsArgs = {
  inProgress?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  roles?: InputMaybe<Array<FormRole>>;
  sortOrder?: InputMaybe<AssessmentSortOption>;
};

/** HUD Enrollment */
export type EnrollmentCeAssessmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<AssessmentSortOption>;
};

/** HUD Enrollment */
export type EnrollmentEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<EventSortOption>;
};

/** HUD Enrollment */
export type EnrollmentFilesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<FileSortOption>;
};

/** HUD Enrollment */
export type EnrollmentServicesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  searchTerm?: InputMaybe<Scalars['String']>;
  serviceCategory?: InputMaybe<Scalars['ID']>;
  serviceType?: InputMaybe<Scalars['ID']>;
  sortOrder?: InputMaybe<ServiceSortOption>;
};

/** HMIS Enrollment household member input */
export type EnrollmentHouseholdMemberInput = {
  id: Scalars['ID'];
  relationshipToHoH: RelationshipToHoH;
};

/** HUD Enrollment Sorting Options */
export enum EnrollmentSortOption {
  MostRecent = 'MOST_RECENT',
}

/** Status of this enrollment */
export enum EnrollmentStatus {
  /** Active */
  Active = 'ACTIVE',
  /** Household Entry Incomplete */
  AnyEntryIncomplete = 'ANY_ENTRY_INCOMPLETE',
  /** Household Exit Incomplete */
  AnyExitIncomplete = 'ANY_EXIT_INCOMPLETE',
  /** Exited */
  Exited = 'EXITED',
  /** Entry Incomplete */
  OwnEntryIncomplete = 'OWN_ENTRY_INCOMPLETE',
  /** Exit Incomplete */
  OwnExitIncomplete = 'OWN_EXIT_INCOMPLETE',
}

export type EnrollmentsPaginated = {
  __typename?: 'EnrollmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Enrollment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** 3.05.1 */
export enum Ethnicity {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Hispanic/Latin(a)(o)(x) */
  HispanicLatinAOX = 'HISPANIC_LATIN_A_O_X',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (0) Non-Hispanic/Non-Latin(a)(o)(x) */
  NonHispanicNonLatinAOX = 'NON_HISPANIC_NON_LATIN_A_O_X',
}

/** HUD Event */
export type Event = {
  __typename?: 'Event';
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  event: EventType;
  eventDate: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  locationCrisisOrPhHousing?: Maybe<Scalars['String']>;
  probSolDivRrResult?: Maybe<NoYesMissing>;
  referralCaseManageAfter?: Maybe<NoYesMissing>;
  referralResult?: Maybe<ReferralResult>;
  resultDate?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
};

/** HUD Event Sorting Options */
export enum EventSortOption {
  EventDate = 'EVENT_DATE',
}

/** 4.20.2 */
export enum EventType {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (2) Problem Solving/Diversion/Rapid Resolution intervention or service */
  ProblemSolvingDiversionRapidResolutionInterventionOrService = 'PROBLEM_SOLVING_DIVERSION_RAPID_RESOLUTION_INTERVENTION_OR_SERVICE',
  /** (18) Referral to a Housing Stability Voucher */
  ReferralToAHousingStabilityVoucher = 'REFERRAL_TO_A_HOUSING_STABILITY_VOUCHER',
  /** (16) Referral to emergency assistance/flex fund/furniture assistance */
  ReferralToEmergencyAssistanceFlexFundFurnitureAssistance = 'REFERRAL_TO_EMERGENCY_ASSISTANCE_FLEX_FUND_FURNITURE_ASSISTANCE',
  /** (17) Referral to Emergency Housing Voucher (EHV) */
  ReferralToEmergencyHousingVoucherEhv = 'REFERRAL_TO_EMERGENCY_HOUSING_VOUCHER_EHV',
  /** (10) Referral to Emergency Shelter bed opening */
  ReferralToEmergencyShelterBedOpening = 'REFERRAL_TO_EMERGENCY_SHELTER_BED_OPENING',
  /** (7) Referral to Housing Navigation project or services */
  ReferralToHousingNavigationProjectOrServices = 'REFERRAL_TO_HOUSING_NAVIGATION_PROJECT_OR_SERVICES',
  /** (12) Referral to Joint TH-RRH project/unit/resource opening */
  ReferralToJointThRrhProjectUnitResourceOpening = 'REFERRAL_TO_JOINT_TH_RRH_PROJECT_UNIT_RESOURCE_OPENING',
  /** (8) Referral to Non-continuum services: Ineligible for continuum services */
  ReferralToNonContinuumServicesIneligibleForContinuumServices = 'REFERRAL_TO_NON_CONTINUUM_SERVICES_INELIGIBLE_FOR_CONTINUUM_SERVICES',
  /** (9) Referral to Non-continuum services: No availability in continuum services */
  ReferralToNonContinuumServicesNoAvailabilityInContinuumServices = 'REFERRAL_TO_NON_CONTINUUM_SERVICES_NO_AVAILABILITY_IN_CONTINUUM_SERVICES',
  /** (15) Referral to Other PH project/unit/resource opening */
  ReferralToOtherPhProjectUnitResourceOpening = 'REFERRAL_TO_OTHER_PH_PROJECT_UNIT_RESOURCE_OPENING',
  /** (5) Referral to Post-placement/ follow-up case management */
  ReferralToPostPlacementFollowUpCaseManagement = 'REFERRAL_TO_POST_PLACEMENT_FOLLOW_UP_CASE_MANAGEMENT',
  /** (1) Referral to Prevention Assistance project */
  ReferralToPreventionAssistanceProject = 'REFERRAL_TO_PREVENTION_ASSISTANCE_PROJECT',
  /** (14) Referral to PSH project resource opening */
  ReferralToPshProjectResourceOpening = 'REFERRAL_TO_PSH_PROJECT_RESOURCE_OPENING',
  /** (13) Referral to RRH project resource opening */
  ReferralToRrhProjectResourceOpening = 'REFERRAL_TO_RRH_PROJECT_RESOURCE_OPENING',
  /** (3) Referral to scheduled Coordinated Entry Crisis Needs Assessment */
  ReferralToScheduledCoordinatedEntryCrisisNeedsAssessment = 'REFERRAL_TO_SCHEDULED_COORDINATED_ENTRY_CRISIS_NEEDS_ASSESSMENT',
  /** (4) Referral to scheduled Coordinated Entry Housing Needs Assessment */
  ReferralToScheduledCoordinatedEntryHousingNeedsAssessment = 'REFERRAL_TO_SCHEDULED_COORDINATED_ENTRY_HOUSING_NEEDS_ASSESSMENT',
  /** (6) Referral to Street Outreach project or services */
  ReferralToStreetOutreachProjectOrServices = 'REFERRAL_TO_STREET_OUTREACH_PROJECT_OR_SERVICES',
  /** (11) Referral to Transitional Housing bed/unit opening */
  ReferralToTransitionalHousingBedUnitOpening = 'REFERRAL_TO_TRANSITIONAL_HOUSING_BED_UNIT_OPENING',
}

export type EventsPaginated = {
  __typename?: 'EventsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Event>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** C1.2 */
export enum FeelingFrequency {
  /** (4) At least every day */
  AtLeastEveryDay = 'AT_LEAST_EVERY_DAY',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (0) Not at all */
  NotAtAll = 'NOT_AT_ALL',
  /** (1) Once a month */
  OnceAMonth = 'ONCE_A_MONTH',
  /** (2) Several times a month */
  SeveralTimesAMonth = 'SEVERAL_TIMES_A_MONTH',
  /** (3) Several times a week */
  SeveralTimesAWeek = 'SEVERAL_TIMES_A_WEEK',
}

/** File */
export type File = {
  __typename?: 'File';
  confidential?: Maybe<Scalars['Boolean']>;
  contentType: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  effectiveDate?: Maybe<Scalars['ISO8601Date']>;
  enrollment?: Maybe<Enrollment>;
  enrollmentId?: Maybe<Scalars['ID']>;
  expirationDate?: Maybe<Scalars['ISO8601Date']>;
  fileBlobId: Scalars['ID'];
  id: Scalars['ID'];
  name: Scalars['String'];
  ownFile: Scalars['Boolean'];
  tags: Array<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  updatedBy?: Maybe<ApplicationUser>;
  uploadedBy?: Maybe<ApplicationUser>;
  url: Scalars['String'];
};

/** File Sorting Options */
export enum FileSortOption {
  DateCreated = 'DATE_CREATED',
  DateUpdated = 'DATE_UPDATED',
}

export type FilesPaginated = {
  __typename?: 'FilesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<File>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** FormDefinition */
export type FormDefinition = {
  __typename?: 'FormDefinition';
  definition: FormDefinitionJson;
  id: Scalars['ID'];
  identifier: Scalars['String'];
  role: FormRole;
  status: Scalars['String'];
  version: Scalars['Int'];
};

export type FormDefinitionJson = {
  __typename?: 'FormDefinitionJson';
  /** Nested items */
  item: Array<FormItem>;
};

export type FormInput = {
  clientId?: InputMaybe<Scalars['ID']>;
  confirmed?: InputMaybe<Scalars['Boolean']>;
  enrollmentId?: InputMaybe<Scalars['ID']>;
  formDefinitionId: Scalars['ID'];
  hudValues?: InputMaybe<Scalars['JsonObject']>;
  organizationId?: InputMaybe<Scalars['ID']>;
  projectId?: InputMaybe<Scalars['ID']>;
  recordId?: InputMaybe<Scalars['ID']>;
  values?: InputMaybe<Scalars['JsonObject']>;
};

/** A question or group of questions */
export type FormItem = {
  __typename?: 'FormItem';
  /**
   * Whether this item corresponds to the assessment date. Must be used with DATE
   * type. Should be used no more than once per form
   */
  assessmentDate?: Maybe<Scalars['Boolean']>;
  /** Value(s) to autofill based on conditional logic */
  autofillValues?: Maybe<Array<AutofillValue>>;
  /** Bounds applied to the input value */
  bounds?: Maybe<Array<ValueBound>>;
  /** Label to use for placeholder and population table */
  briefText?: Maybe<Scalars['String']>;
  /** Component to use for display/input of this item */
  component?: Maybe<Component>;
  /** Include this item only if the Client meets this HUD DataCollectedAbout condition */
  dataCollectedAbout?: Maybe<DataCollectedAbout>;
  /** How to display item if it is disabled */
  disabledDisplay?: Maybe<DisabledDisplay>;
  enableBehavior?: Maybe<EnableBehavior>;
  enableWhen?: Maybe<Array<EnableWhen>>;
  /**
   * Name of the field on the record (or on the query input type). Used for record
   * creation/update forms, for assessment population, and for assessment extraction.
   */
  fieldName?: Maybe<Scalars['String']>;
  /** Include this item only for the listed funders */
  funders?: Maybe<Array<FundingSource>>;
  /** Helper text for the item */
  helperText?: Maybe<Scalars['String']>;
  /** Whether the item should always be hidden */
  hidden?: Maybe<Scalars['Boolean']>;
  /** Initial value(s) when item is first rendered */
  initial?: Maybe<Array<InitialValue>>;
  /** Nested items */
  item?: Maybe<Array<FormItem>>;
  /** Unique identifier for item */
  linkId: Scalars['String'];
  /** Permitted answers, for choice items */
  pickListOptions?: Maybe<Array<PickListOption>>;
  /** Reference to value set of possible answer options */
  pickListReference?: Maybe<Scalars['String']>;
  /**
   * Whether to allow pre-filling section from recent records. Should only be
   * enabled in conjunction with record_type and for top-level group items.
   */
  prefill?: Maybe<Scalars['Boolean']>;
  /** Prefix for the item label */
  prefix?: Maybe<Scalars['String']>;
  /** Exclude this item for the listed project types */
  projectTypesExcluded?: Maybe<Array<ProjectType>>;
  /** Include this item only for the listed project types */
  projectTypesIncluded?: Maybe<Array<ProjectType>>;
  /** Whether human editing is allowed */
  readOnly?: Maybe<Scalars['Boolean']>;
  /** Record type to use for population and extraction */
  recordType?: Maybe<RelatedRecordType>;
  /** Whether the item may repeat (for choice types, this means multiple choice) */
  repeats?: Maybe<Scalars['Boolean']>;
  /** Whether the item must be included in data results */
  required?: Maybe<Scalars['Boolean']>;
  /** Whether to apply this field to all clients or a single client when bulk creating */
  serviceDetailType?: Maybe<ServiceDetailType>;
  /** Size of the input element */
  size?: Maybe<InputSize>;
  /** Primary text for the item */
  text?: Maybe<Scalars['String']>;
  type: ItemType;
  /** Whether to show a warning if this question is unanswered */
  warnIfEmpty?: Maybe<Scalars['Boolean']>;
};

/** Form Role */
export enum FormRole {
  /** (ANNUAL) Annual Assessment */
  Annual = 'ANNUAL',
  /** (CE) Coordinated Entry */
  Ce = 'CE',
  /** (CLIENT) Client */
  Client = 'CLIENT',
  /** (CUSTOM) Custom Assessment */
  Custom = 'CUSTOM',
  /** (EXIT) Exit Assessment */
  Exit = 'EXIT',
  /** (FILE) File */
  File = 'FILE',
  /** (FUNDER) Funder */
  Funder = 'FUNDER',
  /** (INTAKE) Intake Assessment */
  Intake = 'INTAKE',
  /** (INVENTORY) Inventory */
  Inventory = 'INVENTORY',
  /** (ORGANIZATION) Organization */
  Organization = 'ORGANIZATION',
  /** (POST_EXIT) Post-Exit Assessment */
  PostExit = 'POST_EXIT',
  /** (PROJECT) Project */
  Project = 'PROJECT',
  /** (PROJECT_COC) Project CoC */
  ProjectCoc = 'PROJECT_COC',
  /** (SERVICE) Service */
  Service = 'SERVICE',
  /** (UPDATE) Update Assessment */
  Update = 'UPDATE',
}

export type Funder = {
  __typename?: 'Funder';
  active: Scalars['Boolean'];
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  endDate?: Maybe<Scalars['ISO8601Date']>;
  funder: FundingSource;
  grantId: Scalars['String'];
  id: Scalars['ID'];
  otherFunder?: Maybe<Scalars['String']>;
  project: Project;
  startDate: Scalars['ISO8601Date'];
};

/** HUD Funder Sorting Options */
export enum FunderSortOption {
  StartDate = 'START_DATE',
}

export type FundersPaginated = {
  __typename?: 'FundersPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Funder>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** 2.06.1 */
export enum FundingSource {
  /** (21) HHS: PATH - Street Outreach & Supportive Services Only */
  HhsPathStreetOutreachSupportiveServicesOnly = 'HHS_PATH_STREET_OUTREACH_SUPPORTIVE_SERVICES_ONLY',
  /** (22) HHS: RHY - Basic Center Program (prevention and shelter) */
  HhsRhyBasicCenterProgramPreventionAndShelter = 'HHS_RHY_BASIC_CENTER_PROGRAM_PREVENTION_AND_SHELTER',
  /** (26) HHS: RHY - Demonstration Project */
  HhsRhyDemonstrationProject = 'HHS_RHY_DEMONSTRATION_PROJECT',
  /** (23) HHS: RHY - Maternity Group Home for Pregnant and Parenting Youth */
  HhsRhyMaternityGroupHomeForPregnantAndParentingYouth = 'HHS_RHY_MATERNITY_GROUP_HOME_FOR_PREGNANT_AND_PARENTING_YOUTH',
  /** (25) HHS: RHY - Street Outreach Project */
  HhsRhyStreetOutreachProject = 'HHS_RHY_STREET_OUTREACH_PROJECT',
  /** (24) HHS: RHY - Transitional Living Program */
  HhsRhyTransitionalLivingProgram = 'HHS_RHY_TRANSITIONAL_LIVING_PROGRAM',
  /** (1) HUD: CoC - Homelessness Prevention (High Performing Communities Only) */
  HudCocHomelessnessPreventionHighPerformingCommunitiesOnly = 'HUD_COC_HOMELESSNESS_PREVENTION_HIGH_PERFORMING_COMMUNITIES_ONLY',
  /** (49) HUD: CoC - Joint Component RRH/PSH */
  HudCocJointComponentRrhPsh = 'HUD_COC_JOINT_COMPONENT_RRH_PSH',
  /** (44) HUD: CoC - Joint Component TH/RRH */
  HudCocJointComponentThRrh = 'HUD_COC_JOINT_COMPONENT_TH_RRH',
  /** (2) HUD: CoC - Permanent Supportive Housing */
  HudCocPermanentSupportiveHousing = 'HUD_COC_PERMANENT_SUPPORTIVE_HOUSING',
  /** (3) HUD: CoC - Rapid Re-Housing */
  HudCocRapidReHousing = 'HUD_COC_RAPID_RE_HOUSING',
  /** (6) HUD: CoC - Safe Haven */
  HudCocSafeHaven = 'HUD_COC_SAFE_HAVEN',
  /** (7) HUD: CoC - Single Room Occupancy (SRO) */
  HudCocSingleRoomOccupancySro = 'HUD_COC_SINGLE_ROOM_OCCUPANCY_SRO',
  /** (4) HUD: CoC - Supportive Services Only */
  HudCocSupportiveServicesOnly = 'HUD_COC_SUPPORTIVE_SERVICES_ONLY',
  /** (5) HUD: CoC - Transitional Housing */
  HudCocTransitionalHousing = 'HUD_COC_TRANSITIONAL_HOUSING',
  /** (43) HUD: CoC - Youth Homeless Demonstration Program (YHDP) */
  HudCocYouthHomelessDemonstrationProgramYhdp = 'HUD_COC_YOUTH_HOMELESS_DEMONSTRATION_PROGRAM_YHDP',
  /** (47) HUD: ESG - CV */
  HudEsgCv = 'HUD_ESG_CV',
  /** (8) HUD: ESG - Emergency Shelter (operating and/or essential services) */
  HudEsgEmergencyShelterOperatingAndOrEssentialServices = 'HUD_ESG_EMERGENCY_SHELTER_OPERATING_AND_OR_ESSENTIAL_SERVICES',
  /** (9) HUD: ESG - Homelessness Prevention */
  HudEsgHomelessnessPrevention = 'HUD_ESG_HOMELESSNESS_PREVENTION',
  /** (10) HUD: ESG - Rapid Rehousing */
  HudEsgRapidRehousing = 'HUD_ESG_RAPID_REHOUSING',
  /** (53) HUD: ESG - RUSH */
  HudEsgRush = 'HUD_ESG_RUSH',
  /** (11) HUD: ESG - Street Outreach */
  HudEsgStreetOutreach = 'HUD_ESG_STREET_OUTREACH',
  /** (50) HUD: HOME */
  HudHome = 'HUD_HOME',
  /** (51) HUD: HOME (ARP) */
  HudHomeArp = 'HUD_HOME_ARP',
  /** (48) HUD: HOPWA - CV */
  HudHopwaCv = 'HUD_HOPWA_CV',
  /** (13) HUD: HOPWA - Hotel/Motel Vouchers */
  HudHopwaHotelMotelVouchers = 'HUD_HOPWA_HOTEL_MOTEL_VOUCHERS',
  /** (14) HUD: HOPWA - Housing Information */
  HudHopwaHousingInformation = 'HUD_HOPWA_HOUSING_INFORMATION',
  /** (15) HUD: HOPWA - Permanent Housing (facility based or TBRA) */
  HudHopwaPermanentHousingFacilityBasedOrTbra = 'HUD_HOPWA_PERMANENT_HOUSING_FACILITY_BASED_OR_TBRA',
  /** (16) HUD: HOPWA - Permanent Housing Placement */
  HudHopwaPermanentHousingPlacement = 'HUD_HOPWA_PERMANENT_HOUSING_PLACEMENT',
  /** (17) HUD: HOPWA - Short-Term Rent, Mortgage, Utility assistance */
  HudHopwaShortTermRentMortgageUtilityAssistance = 'HUD_HOPWA_SHORT_TERM_RENT_MORTGAGE_UTILITY_ASSISTANCE',
  /** (18) HUD: HOPWA - Short-Term Supportive Facility */
  HudHopwaShortTermSupportiveFacility = 'HUD_HOPWA_SHORT_TERM_SUPPORTIVE_FACILITY',
  /** (19) HUD: HOPWA - Transitional Housing (facility based or TBRA) */
  HudHopwaTransitionalHousingFacilityBasedOrTbra = 'HUD_HOPWA_TRANSITIONAL_HOUSING_FACILITY_BASED_OR_TBRA',
  /** (20) HUD: HUD/VASH */
  HudHudVash = 'HUD_HUD_VASH',
  /** (35) HUD: Pay for Success */
  HudPayForSuccess = 'HUD_PAY_FOR_SUCCESS',
  /** (52) HUD: PIH (Emergency Housing Voucher) */
  HudPihEmergencyHousingVoucher = 'HUD_PIH_EMERGENCY_HOUSING_VOUCHER',
  /** (36) HUD: Public and Indian Housing (PIH) Programs */
  HudPublicAndIndianHousingPihPrograms = 'HUD_PUBLIC_AND_INDIAN_HOUSING_PIH_PROGRAMS',
  /** (12) HUD: Rural Housing Stability Assistance Program */
  HudRuralHousingStabilityAssistanceProgram = 'HUD_RURAL_HOUSING_STABILITY_ASSISTANCE_PROGRAM',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (46) Local or Other Funding Source */
  LocalOrOtherFundingSource = 'LOCAL_OR_OTHER_FUNDING_SOURCE',
  /** (34) N/A */
  NA = 'N_A',
  /** (30) VA: Community Contract Safe Haven Program */
  VaCommunityContractSafeHavenProgram = 'VA_COMMUNITY_CONTRACT_SAFE_HAVEN_PROGRAM',
  /** (32) VA: Compensated Work Therapy Transitional Residence */
  VaCompensatedWorkTherapyTransitionalResidence = 'VA_COMPENSATED_WORK_THERAPY_TRANSITIONAL_RESIDENCE',
  /** (27) VA: CRS Contract Residential Services */
  VaCrsContractResidentialServices = 'VA_CRS_CONTRACT_RESIDENTIAL_SERVICES',
  /** (37) VA: Grant Per Diem - Bridge Housing */
  VaGrantPerDiemBridgeHousing = 'VA_GRANT_PER_DIEM_BRIDGE_HOUSING',
  /** (45) VA: Grant Per Diem - Case Management/Housing Retention */
  VaGrantPerDiemCaseManagementHousingRetention = 'VA_GRANT_PER_DIEM_CASE_MANAGEMENT_HOUSING_RETENTION',
  /** (40) VA: Grant Per Diem - Clinical Treatment */
  VaGrantPerDiemClinicalTreatment = 'VA_GRANT_PER_DIEM_CLINICAL_TREATMENT',
  /** (39) VA: Grant Per Diem - Hospital to Housing */
  VaGrantPerDiemHospitalToHousing = 'VA_GRANT_PER_DIEM_HOSPITAL_TO_HOUSING',
  /** (38) VA: Grant Per Diem - Low Demand */
  VaGrantPerDiemLowDemand = 'VA_GRANT_PER_DIEM_LOW_DEMAND',
  /** (41) VA: Grant Per Diem - Service Intensive Transitional Housing */
  VaGrantPerDiemServiceIntensiveTransitionalHousing = 'VA_GRANT_PER_DIEM_SERVICE_INTENSIVE_TRANSITIONAL_HOUSING',
  /** (42) VA: Grant Per Diem - Transition in Place */
  VaGrantPerDiemTransitionInPlace = 'VA_GRANT_PER_DIEM_TRANSITION_IN_PLACE',
  /** (33) VA: Supportive Services for Veteran Families */
  VaSupportiveServicesForVeteranFamilies = 'VA_SUPPORTIVE_SERVICES_FOR_VETERAN_FAMILIES',
}

/** HUD Gender (1.7) */
export enum Gender {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (0) Female */
  Female = 'FEMALE',
  /** (1) Male */
  Male = 'MALE',
  /** (4) A gender other than singularly female or male (e.g., non-binary, genderfluid, agender, culturally specific gender) */
  NoSingleGender = 'NO_SINGLE_GENDER',
  /** (6) Questioning */
  Questioning = 'QUESTIONING',
  /** (5) Transgender */
  Transgender = 'TRANSGENDER',
}

/** 2.03.4 */
export enum GeographyType {
  /** (99) Unknown / data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (3) Rural */
  Rural = 'RURAL',
  /** (2) Suburban */
  Suburban = 'SUBURBAN',
  /** (1) Urban */
  Urban = 'URBAN',
}

/** 2.02.9 */
export enum HopwaMedAssistedLivingFac {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (0) No */
  No = 'NO',
  /** (2) Non-HOPWA Funded Project */
  NonHopwaFundedProject = 'NON_HOPWA_FUNDED_PROJECT',
  /** (1) Yes */
  Yes = 'YES',
}

export type HealthAndDv = {
  __typename?: 'HealthAndDv';
  bounceBack?: Maybe<WellbeingAgreement>;
  client: Client;
  currentlyFleeing?: Maybe<NoYesReasonsForMissingData>;
  dataCollectionStage: DataCollectionStage;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  dentalHealthStatus?: Maybe<HealthStatus>;
  domesticViolenceVictim?: Maybe<NoYesReasonsForMissingData>;
  dueDate?: Maybe<Scalars['ISO8601Date']>;
  enrollment: Enrollment;
  feelingFrequency?: Maybe<FeelingFrequency>;
  generalHealthStatus?: Maybe<HealthStatus>;
  id: Scalars['ID'];
  informationDate: Scalars['ISO8601Date'];
  lifeValue?: Maybe<WellbeingAgreement>;
  mentalHealthStatus?: Maybe<HealthStatus>;
  pregnancyStatus?: Maybe<NoYesReasonsForMissingData>;
  supportFromOthers?: Maybe<WellbeingAgreement>;
  user?: Maybe<User>;
  whenOccurred?: Maybe<WhenDvOccurred>;
};

export type HealthAndDvsPaginated = {
  __typename?: 'HealthAndDvsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<HealthAndDv>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** R7.1 */
export enum HealthStatus {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Excellent */
  Excellent = 'EXCELLENT',
  /** (4) Fair */
  Fair = 'FAIR',
  /** (3) Good */
  Good = 'GOOD',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (5) Poor */
  Poor = 'POOR',
  /** (2) Very good */
  VeryGood = 'VERY_GOOD',
}

/** HUD Household */
export type Household = {
  __typename?: 'Household';
  householdClients: Array<HouseholdClient>;
  id: Scalars['ID'];
  shortId: Scalars['ID'];
};

/** HUD Client within a Household */
export type HouseholdClient = {
  __typename?: 'HouseholdClient';
  client: Client;
  enrollment: Enrollment;
  id: Scalars['ID'];
  relationshipToHoH: RelationshipToHoH;
};

/** 2.07.4 */
export enum HouseholdType {
  /** (1) Households without children */
  HouseholdsWithoutChildren = 'HOUSEHOLDS_WITHOUT_CHILDREN',
  /** (3) Households with at least one adult and one child */
  HouseholdsWithAtLeastOneAdultAndOneChild = 'HOUSEHOLDS_WITH_AT_LEAST_ONE_ADULT_AND_ONE_CHILD',
  /** (4) Households with only children */
  HouseholdsWithOnlyChildren = 'HOUSEHOLDS_WITH_ONLY_CHILDREN',
  /** Invalid Value */
  Invalid = 'INVALID',
}

/** 2.02.D */
export enum HousingType {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (2) Site-based - clustered / multiple sites */
  SiteBasedClusteredMultipleSites = 'SITE_BASED_CLUSTERED_MULTIPLE_SITES',
  /** (1) Site-based - single site */
  SiteBasedSingleSite = 'SITE_BASED_SINGLE_SITE',
  /** (3) Tenant-based - scattered site */
  TenantBasedScatteredSite = 'TENANT_BASED_SCATTERED_SITE',
}

export type IncomeBenefit = {
  __typename?: 'IncomeBenefit';
  adap?: Maybe<NoYesReasonsForMissingData>;
  alimony?: Maybe<NoYesMissing>;
  alimonyAmount?: Maybe<Scalars['Float']>;
  benefitsFromAnySource?: Maybe<NoYesReasonsForMissingData>;
  childSupport?: Maybe<NoYesMissing>;
  childSupportAmount?: Maybe<Scalars['Float']>;
  client: Client;
  cobra?: Maybe<NoYesMissing>;
  connectionWithSoar?: Maybe<NoYesReasonsForMissingData>;
  dataCollectionStage: DataCollectionStage;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  earned?: Maybe<NoYesMissing>;
  earnedAmount?: Maybe<Scalars['Float']>;
  employerProvided?: Maybe<NoYesMissing>;
  enrollment: Enrollment;
  ga?: Maybe<NoYesMissing>;
  gaAmount?: Maybe<Scalars['Float']>;
  hivaidsAssistance?: Maybe<NoYesReasonsForMissingData>;
  id: Scalars['ID'];
  incomeFromAnySource?: Maybe<NoYesReasonsForMissingData>;
  indianHealthServices?: Maybe<NoYesMissing>;
  informationDate: Scalars['ISO8601Date'];
  insuranceFromAnySource?: Maybe<NoYesReasonsForMissingData>;
  medicaid?: Maybe<NoYesMissing>;
  medicare?: Maybe<NoYesMissing>;
  noAdapReason?: Maybe<NoAssistanceReason>;
  noCobraReason?: Maybe<ReasonNotInsured>;
  noEmployerProvidedReason?: Maybe<ReasonNotInsured>;
  noHivaidsAssistanceReason?: Maybe<NoAssistanceReason>;
  noIndianHealthServicesReason?: Maybe<ReasonNotInsured>;
  noMedicaidReason?: Maybe<ReasonNotInsured>;
  noMedicareReason?: Maybe<ReasonNotInsured>;
  noPrivatePayReason?: Maybe<ReasonNotInsured>;
  noRyanWhiteReason?: Maybe<NoAssistanceReason>;
  noSchipReason?: Maybe<ReasonNotInsured>;
  noStateHealthInsReason?: Maybe<ReasonNotInsured>;
  noVaMedReason?: Maybe<ReasonNotInsured>;
  otherBenefitsSource?: Maybe<NoYesMissing>;
  otherBenefitsSourceIdentify?: Maybe<Scalars['String']>;
  otherIncomeAmount?: Maybe<Scalars['Float']>;
  otherIncomeSource?: Maybe<NoYesMissing>;
  otherIncomeSourceIdentify?: Maybe<Scalars['String']>;
  otherInsurance?: Maybe<NoYesMissing>;
  otherInsuranceIdentify?: Maybe<Scalars['String']>;
  otherTanf?: Maybe<NoYesMissing>;
  pension?: Maybe<NoYesMissing>;
  pensionAmount?: Maybe<Scalars['Float']>;
  privateDisability?: Maybe<NoYesMissing>;
  privateDisabilityAmount?: Maybe<Scalars['Float']>;
  privatePay?: Maybe<NoYesMissing>;
  ryanWhiteMedDent?: Maybe<NoYesReasonsForMissingData>;
  schip?: Maybe<NoYesMissing>;
  snap?: Maybe<NoYesMissing>;
  socSecRetirement?: Maybe<NoYesMissing>;
  socSecRetirementAmount?: Maybe<Scalars['Float']>;
  ssdi?: Maybe<NoYesMissing>;
  ssdiAmount?: Maybe<Scalars['Float']>;
  ssi?: Maybe<NoYesMissing>;
  ssiAmount?: Maybe<Scalars['Float']>;
  stateHealthIns?: Maybe<NoYesMissing>;
  tanf?: Maybe<NoYesMissing>;
  tanfAmount?: Maybe<Scalars['Float']>;
  tanfChildCare?: Maybe<NoYesMissing>;
  tanfTransportation?: Maybe<NoYesMissing>;
  totalMonthlyIncome?: Maybe<Scalars['String']>;
  unemployment?: Maybe<NoYesMissing>;
  unemploymentAmount?: Maybe<Scalars['Float']>;
  user?: Maybe<User>;
  vaDisabilityNonService?: Maybe<NoYesMissing>;
  vaDisabilityNonServiceAmount?: Maybe<Scalars['Float']>;
  vaDisabilityService?: Maybe<NoYesMissing>;
  vaDisabilityServiceAmount?: Maybe<Scalars['Float']>;
  vaMedicalServices?: Maybe<NoYesMissing>;
  wic?: Maybe<NoYesMissing>;
  workersComp?: Maybe<NoYesMissing>;
  workersCompAmount?: Maybe<Scalars['Float']>;
};

export type IncomeBenefitsPaginated = {
  __typename?: 'IncomeBenefitsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<IncomeBenefit>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export enum InitialBehavior {
  /** When loading the form, only set the specified initial value if there is no existing value. */
  IfEmpty = 'IF_EMPTY',
  /** When loading the form, always overwrite the existing value with specified initial value. */
  Overwrite = 'OVERWRITE',
}

/** Initial value when item is first rendered */
export type InitialValue = {
  __typename?: 'InitialValue';
  initialBehavior: InitialBehavior;
  /** Boolean to set as initial value */
  valueBoolean?: Maybe<Scalars['Boolean']>;
  /** Code to set as initial value */
  valueCode?: Maybe<Scalars['String']>;
  /** Name of local variable to use as initial value if present. Variable type should match item type. */
  valueLocalConstant?: Maybe<Scalars['String']>;
  /** Number to set as initial value */
  valueNumber?: Maybe<Scalars['Int']>;
};

export enum InputSize {
  Large = 'LARGE',
  Medium = 'MEDIUM',
  Small = 'SMALL',
  Xsmall = 'XSMALL',
}

export type InventoriesPaginated = {
  __typename?: 'InventoriesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Inventory>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Inventory = {
  __typename?: 'Inventory';
  active: Scalars['Boolean'];
  availability?: Maybe<Availability>;
  bedInventory: Scalars['Int'];
  beds: BedsPaginated;
  chBedInventory?: Maybe<Scalars['Int']>;
  chVetBedInventory?: Maybe<Scalars['Int']>;
  chYouthBedInventory?: Maybe<Scalars['Int']>;
  cocCode: Scalars['String'];
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  esBedType?: Maybe<BedType>;
  householdType: HouseholdType;
  id: Scalars['ID'];
  inventoryEndDate?: Maybe<Scalars['ISO8601Date']>;
  inventoryStartDate: Scalars['ISO8601Date'];
  otherBedInventory?: Maybe<Scalars['Int']>;
  project: Project;
  unitInventory: Scalars['Int'];
  units: UnitsPaginated;
  vetBedInventory?: Maybe<Scalars['Int']>;
  youthBedInventory?: Maybe<Scalars['Int']>;
  youthVetBedInventory?: Maybe<Scalars['Int']>;
};

export type InventoryBedsArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  bedType?: InputMaybe<InventoryBedType>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

export type InventoryUnitsArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

export enum InventoryBedType {
  /** Chronic */
  Chronic = 'CHRONIC',
  /** Chronic Veteran */
  ChronicVeteran = 'CHRONIC_VETERAN',
  /** Chronic Youth */
  ChronicYouth = 'CHRONIC_YOUTH',
  /** Other */
  Other = 'OTHER',
  /** Veteran */
  Veteran = 'VETERAN',
  /** Youth */
  Youth = 'YOUTH',
  /** Youth Veteran */
  YouthVeteran = 'YOUTH_VETERAN',
}

/** HUD Inventory Sorting Options */
export enum InventorySortOption {
  StartDate = 'START_DATE',
}

export enum ItemType {
  Boolean = 'BOOLEAN',
  Choice = 'CHOICE',
  Currency = 'CURRENCY',
  Date = 'DATE',
  Display = 'DISPLAY',
  File = 'FILE',
  Group = 'GROUP',
  Image = 'IMAGE',
  Integer = 'INTEGER',
  OpenChoice = 'OPEN_CHOICE',
  String = 'STRING',
  Text = 'TEXT',
}

/** 3.12.1 */
export enum LivingSituation {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (24) Deceased */
  Deceased = 'DECEASED',
  /** (1) Emergency shelter, including hotel or motel paid for with emergency shelter voucher, or RHY-funded Host Home shelter */
  EmergencyShelterIncludingHotelOrMotelPaidForWithEmergencyShelterVoucherOrRhyFundedHostHomeShelter = 'EMERGENCY_SHELTER_INCLUDING_HOTEL_OR_MOTEL_PAID_FOR_WITH_EMERGENCY_SHELTER_VOUCHER_OR_RHY_FUNDED_HOST_HOME_SHELTER',
  /** (15) Foster care home or foster care group home */
  FosterCareHomeOrFosterCareGroupHome = 'FOSTER_CARE_HOME_OR_FOSTER_CARE_GROUP_HOME',
  /** (6) Hospital or other residential non-psychiatric medical facility */
  HospitalOrOtherResidentialNonPsychiatricMedicalFacility = 'HOSPITAL_OR_OTHER_RESIDENTIAL_NON_PSYCHIATRIC_MEDICAL_FACILITY',
  /** (32) Host Home (non-crisis) */
  HostHomeNonCrisis = 'HOST_HOME_NON_CRISIS',
  /** (14) Hotel or motel paid for without emergency shelter voucher */
  HotelOrMotelPaidForWithoutEmergencyShelterVoucher = 'HOTEL_OR_MOTEL_PAID_FOR_WITHOUT_EMERGENCY_SHELTER_VOUCHER',
  /** (27) Interim Housing */
  InterimHousing = 'INTERIM_HOUSING',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (7) Jail, prison or juvenile detention facility */
  JailPrisonOrJuvenileDetentionFacility = 'JAIL_PRISON_OR_JUVENILE_DETENTION_FACILITY',
  /** (25) Long-term care facility or nursing home */
  LongTermCareFacilityOrNursingHome = 'LONG_TERM_CARE_FACILITY_OR_NURSING_HOME',
  /** (26) Moved from one HOPWA funded project to HOPWA PH */
  MovedFromOneHopwaFundedProjectToHopwaPh = 'MOVED_FROM_ONE_HOPWA_FUNDED_PROJECT_TO_HOPWA_PH',
  /** (30) No exit interview completed */
  NoExitInterviewCompleted = 'NO_EXIT_INTERVIEW_COMPLETED',
  /** (17) Other */
  Other = 'OTHER',
  /** (11) Owned by client, no ongoing housing subsidy */
  OwnedByClientNoOngoingHousingSubsidy = 'OWNED_BY_CLIENT_NO_ONGOING_HOUSING_SUBSIDY',
  /** (21) Owned by client, with ongoing housing subsidy */
  OwnedByClientWithOngoingHousingSubsidy = 'OWNED_BY_CLIENT_WITH_ONGOING_HOUSING_SUBSIDY',
  /** (3) Permanent housing (other than RRH) for formerly homeless persons */
  PermanentHousingOtherThanRrhForFormerlyHomelessPersons = 'PERMANENT_HOUSING_OTHER_THAN_RRH_FOR_FORMERLY_HOMELESS_PERSONS',
  /**
   * (16) Place not meant for habitation (e.g., a vehicle, an abandoned building,
   * bus/train/subway station/airport or anywhere outside)
   */
  PlaceNotMeantForHabitationEGAVehicleAnAbandonedBuildingBusTrainSubwayStationAirportOrAnywhereOutside = 'PLACE_NOT_MEANT_FOR_HABITATION_E_G_A_VEHICLE_AN_ABANDONED_BUILDING_BUS_TRAIN_SUBWAY_STATION_AIRPORT_OR_ANYWHERE_OUTSIDE',
  /** (4) Psychiatric hospital or other psychiatric facility */
  PsychiatricHospitalOrOtherPsychiatricFacility = 'PSYCHIATRIC_HOSPITAL_OR_OTHER_PSYCHIATRIC_FACILITY',
  /** (34) Rental by client in a public housing unit */
  RentalByClientInAPublicHousingUnit = 'RENTAL_BY_CLIENT_IN_A_PUBLIC_HOUSING_UNIT',
  /** (10) Rental by client, no ongoing housing subsidy */
  RentalByClientNoOngoingHousingSubsidy = 'RENTAL_BY_CLIENT_NO_ONGOING_HOUSING_SUBSIDY',
  /** (28) Rental by client, with GPD TIP housing subsidy */
  RentalByClientWithGpdTipHousingSubsidy = 'RENTAL_BY_CLIENT_WITH_GPD_TIP_HOUSING_SUBSIDY',
  /** (33) Rental by client, with HCV voucher (tenant or project based) */
  RentalByClientWithHcvVoucherTenantOrProjectBased = 'RENTAL_BY_CLIENT_WITH_HCV_VOUCHER_TENANT_OR_PROJECT_BASED',
  /** (20) Rental by client, with other ongoing housing subsidy */
  RentalByClientWithOtherOngoingHousingSubsidy = 'RENTAL_BY_CLIENT_WITH_OTHER_ONGOING_HOUSING_SUBSIDY',
  /** (31) Rental by client, with RRH or equivalent subsidy */
  RentalByClientWithRrhOrEquivalentSubsidy = 'RENTAL_BY_CLIENT_WITH_RRH_OR_EQUIVALENT_SUBSIDY',
  /** (19) Rental by client, with VASH housing subsidy */
  RentalByClientWithVashHousingSubsidy = 'RENTAL_BY_CLIENT_WITH_VASH_HOUSING_SUBSIDY',
  /** (29) Residential project or halfway house with no homeless criteria */
  ResidentialProjectOrHalfwayHouseWithNoHomelessCriteria = 'RESIDENTIAL_PROJECT_OR_HALFWAY_HOUSE_WITH_NO_HOMELESS_CRITERIA',
  /** (18) Safe Haven */
  SafeHaven = 'SAFE_HAVEN',
  /** (35) Staying or living in a family member's room, apartment or house */
  StayingOrLivingInAFamilyMemberSRoomApartmentOrHouse = 'STAYING_OR_LIVING_IN_A_FAMILY_MEMBER_S_ROOM_APARTMENT_OR_HOUSE',
  /** (36) Staying or living in a friend's room, apartment or house */
  StayingOrLivingInAFriendSRoomApartmentOrHouse = 'STAYING_OR_LIVING_IN_A_FRIEND_S_ROOM_APARTMENT_OR_HOUSE',
  /** (22) Staying or living with family, permanent tenure */
  StayingOrLivingWithFamilyPermanentTenure = 'STAYING_OR_LIVING_WITH_FAMILY_PERMANENT_TENURE',
  /** (12) Staying or living with family, temporary tenure (e.g. room, apartment or house) */
  StayingOrLivingWithFamilyTemporaryTenureEGRoomApartmentOrHouse = 'STAYING_OR_LIVING_WITH_FAMILY_TEMPORARY_TENURE_E_G_ROOM_APARTMENT_OR_HOUSE',
  /** (23) Staying or living with friends, permanent tenure */
  StayingOrLivingWithFriendsPermanentTenure = 'STAYING_OR_LIVING_WITH_FRIENDS_PERMANENT_TENURE',
  /** (13) Staying or living with friends, temporary tenure (e.g. room apartment or house) */
  StayingOrLivingWithFriendsTemporaryTenureEGRoomApartmentOrHouse = 'STAYING_OR_LIVING_WITH_FRIENDS_TEMPORARY_TENURE_E_G_ROOM_APARTMENT_OR_HOUSE',
  /** (5) Substance abuse treatment facility or detox center */
  SubstanceAbuseTreatmentFacilityOrDetoxCenter = 'SUBSTANCE_ABUSE_TREATMENT_FACILITY_OR_DETOX_CENTER',
  /** (2) Transitional housing for homeless persons (including homeless youth) */
  TransitionalHousingForHomelessPersonsIncludingHomelessYouth = 'TRANSITIONAL_HOUSING_FOR_HOMELESS_PERSONS_INCLUDING_HOMELESS_YOUTH',
  /** (37) Worker unable to determine */
  WorkerUnableToDetermine = 'WORKER_UNABLE_TO_DETERMINE',
}

/** 3.917.5 */
export enum MonthsHomelessPastThreeYears {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (113) More than 12 months */
  MoreThan_12Months = 'MORE_THAN_12_MONTHS',
  /** (101) 1 */
  Num_1 = 'NUM_1',
  /** (102) 2 */
  Num_2 = 'NUM_2',
  /** (103) 3 */
  Num_3 = 'NUM_3',
  /** (104) 4 */
  Num_4 = 'NUM_4',
  /** (105) 5 */
  Num_5 = 'NUM_5',
  /** (106) 6 */
  Num_6 = 'NUM_6',
  /** (107) 7 */
  Num_7 = 'NUM_7',
  /** (108) 8 */
  Num_8 = 'NUM_8',
  /** (109) 9 */
  Num_9 = 'NUM_9',
  /** (110) 10 */
  Num_10 = 'NUM_10',
  /** (111) 11 */
  Num_11 = 'NUM_11',
  /** (112) 12 */
  Num_12 = 'NUM_12',
}

export type Mutation = {
  __typename?: 'Mutation';
  addHouseholdMembersToEnrollment?: Maybe<AddHouseholdMembersToEnrollmentPayload>;
  addRecentItem?: Maybe<ApplicationUser>;
  clearRecentItems?: Maybe<ApplicationUser>;
  createBeds?: Maybe<CreateBedsPayload>;
  createDirectUpload?: Maybe<DirectUpload>;
  createEnrollment?: Maybe<CreateEnrollmentPayload>;
  createService?: Maybe<CreateServicePayload>;
  createUnits?: Maybe<CreateUnitsPayload>;
  deleteAssessment?: Maybe<DeleteAssessmentPayload>;
  deleteBeds?: Maybe<DeleteBedsPayload>;
  deleteClientFile?: Maybe<DeleteClientFilePayload>;
  deleteClientImage?: Maybe<DeleteClientImagePayload>;
  deleteEnrollment?: Maybe<DeleteEnrollmentPayload>;
  deleteFunder?: Maybe<DeleteFunderPayload>;
  deleteInventory?: Maybe<DeleteInventoryPayload>;
  deleteOrganization?: Maybe<DeleteOrganizationPayload>;
  deleteProject?: Maybe<DeleteProjectPayload>;
  deleteProjectCoc?: Maybe<DeleteProjectCocPayload>;
  deleteService?: Maybe<DeleteServicePayload>;
  deleteUnits?: Maybe<DeleteUnitsPayload>;
  /** Create/Save assessment as work-in-progress */
  saveAssessment?: Maybe<SaveAssessmentPayload>;
  setHoHForEnrollment?: Maybe<SetHoHForEnrollmentPayload>;
  /** Create/Submit assessment, and create/update related HUD records */
  submitAssessment?: Maybe<SubmitAssessmentPayload>;
  /** Submit a form to create/update HUD record(s) */
  submitForm?: Maybe<SubmitFormPayload>;
  /** Submit multiple assessments in a household */
  submitHouseholdAssessments?: Maybe<SubmitHouseholdAssessmentsPayload>;
  updateBeds?: Maybe<UpdateBedsPayload>;
  updateClientImage?: Maybe<UpdateClientImagePayload>;
  updateEnrollment?: Maybe<UpdateEnrollmentPayload>;
  updateService?: Maybe<UpdateServicePayload>;
  updateUnits?: Maybe<UpdateUnitsPayload>;
};

export type MutationAddHouseholdMembersToEnrollmentArgs = {
  input: AddHouseholdMembersToEnrollmentInput;
};

export type MutationAddRecentItemArgs = {
  input: AddRecentItemInput;
};

export type MutationClearRecentItemsArgs = {
  input: ClearRecentItemsInput;
};

export type MutationCreateBedsArgs = {
  input: CreateBedsInput;
};

export type MutationCreateDirectUploadArgs = {
  input: CreateDirectUploadInput;
};

export type MutationCreateEnrollmentArgs = {
  input: CreateEnrollmentInput;
};

export type MutationCreateServiceArgs = {
  input: CreateServiceInput;
};

export type MutationCreateUnitsArgs = {
  input: CreateUnitsInput;
};

export type MutationDeleteAssessmentArgs = {
  input: DeleteAssessmentInput;
};

export type MutationDeleteBedsArgs = {
  input: DeleteBedsInput;
};

export type MutationDeleteClientFileArgs = {
  input: DeleteClientFileInput;
};

export type MutationDeleteClientImageArgs = {
  input: DeleteClientImageInput;
};

export type MutationDeleteEnrollmentArgs = {
  input: DeleteEnrollmentInput;
};

export type MutationDeleteFunderArgs = {
  input: DeleteFunderInput;
};

export type MutationDeleteInventoryArgs = {
  input: DeleteInventoryInput;
};

export type MutationDeleteOrganizationArgs = {
  input: DeleteOrganizationInput;
};

export type MutationDeleteProjectArgs = {
  input: DeleteProjectInput;
};

export type MutationDeleteProjectCocArgs = {
  input: DeleteProjectCocInput;
};

export type MutationDeleteServiceArgs = {
  input: DeleteServiceInput;
};

export type MutationDeleteUnitsArgs = {
  input: DeleteUnitsInput;
};

export type MutationSaveAssessmentArgs = {
  input: SaveAssessmentInput;
};

export type MutationSetHoHForEnrollmentArgs = {
  input: SetHoHForEnrollmentInput;
};

export type MutationSubmitAssessmentArgs = {
  input: SubmitAssessmentInput;
};

export type MutationSubmitFormArgs = {
  input: SubmitFormInput;
};

export type MutationSubmitHouseholdAssessmentsArgs = {
  input: SubmitHouseholdAssessmentsInput;
};

export type MutationUpdateBedsArgs = {
  input: UpdateBedsInput;
};

export type MutationUpdateClientImageArgs = {
  input: UpdateClientImageInput;
};

export type MutationUpdateEnrollmentArgs = {
  input: UpdateEnrollmentInput;
};

export type MutationUpdateServiceArgs = {
  input: UpdateServiceInput;
};

export type MutationUpdateUnitsArgs = {
  input: UpdateUnitsInput;
};

/** 3.01.5 */
export enum NameDataQuality {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Full name reported */
  FullNameReported = 'FULL_NAME_REPORTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (2) Partial, street name, or code name reported */
  PartialStreetNameOrCodeNameReported = 'PARTIAL_STREET_NAME_OR_CODE_NAME_REPORTED',
}

/** W3 */
export enum NoAssistanceReason {
  /** (2) Applied; client not eligible */
  AppliedClientNotEligible = 'APPLIED_CLIENT_NOT_ELIGIBLE',
  /** (1) Applied; decision pending */
  AppliedDecisionPending = 'APPLIED_DECISION_PENDING',
  /** (3) Client did not apply */
  ClientDidNotApply = 'CLIENT_DID_NOT_APPLY',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Insurance type not applicable for this client */
  InsuranceTypeNotApplicableForThisClient = 'INSURANCE_TYPE_NOT_APPLICABLE_FOR_THIS_CLIENT',
  /** Invalid Value */
  Invalid = 'INVALID',
}

/** 1.7 */
export enum NoYesMissing {
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (0) No */
  No = 'NO',
  /** (1) Yes */
  Yes = 'YES',
}

/** 1.8 */
export enum NoYesReasonsForMissingData {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (0) No */
  No = 'NO',
  /** (1) Yes */
  Yes = 'YES',
}

/** Results from client/project omnisearch */
export type OmnisearchResult = Client | Project;

export type Organization = {
  __typename?: 'Organization';
  access: OrganizationAccess;
  contactInformation?: Maybe<Scalars['String']>;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  organizationName: Scalars['String'];
  projects: ProjectsPaginated;
  victimServiceProvider: NoYesMissing;
};

export type OrganizationProjectsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  projectTypes?: InputMaybe<Array<ProjectType>>;
  searchTerm?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

export type OrganizationAccess = {
  __typename?: 'OrganizationAccess';
  canDeleteOrganization: Scalars['Boolean'];
  canEditOrganization: Scalars['Boolean'];
  id: Scalars['ID'];
};

/** HUD Organization Sorting Options */
export enum OrganizationSortOption {
  Name = 'NAME',
}

export type OrganizationsPaginated = {
  __typename?: 'OrganizationsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Organization>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** P2.A */
export enum PathReferralOutcome {
  /** (1) Attained */
  Attained = 'ATTAINED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (2) Not attained */
  NotAttained = 'NOT_ATTAINED',
  /** (3) Unknown */
  Unknown = 'UNKNOWN',
}

export type PickListOption = {
  __typename?: 'PickListOption';
  /** Code for the option */
  code: Scalars['String'];
  /** Code for group that option belongs to, if grouped */
  groupCode?: Maybe<Scalars['String']>;
  /** Label for group that option belongs to, if grouped */
  groupLabel?: Maybe<Scalars['String']>;
  /** Whether option is selected by default */
  initialSelected?: Maybe<Scalars['Boolean']>;
  /** Label for the option */
  label?: Maybe<Scalars['String']>;
  /** Secondary label, such as project type or CoC code */
  secondaryLabel?: Maybe<Scalars['String']>;
};

export enum PickListType {
  AvailableFileTypes = 'AVAILABLE_FILE_TYPES',
  AvailableUnits = 'AVAILABLE_UNITS',
  ClientEnrollments = 'CLIENT_ENROLLMENTS',
  Coc = 'COC',
  CurrentLivingSituation = 'CURRENT_LIVING_SITUATION',
  Destination = 'DESTINATION',
  Geocode = 'GEOCODE',
  Organization = 'ORGANIZATION',
  PriorLivingSituation = 'PRIOR_LIVING_SITUATION',
  Project = 'PROJECT',
  ReferralOutcome = 'REFERRAL_OUTCOME',
  ServiceType = 'SERVICE_TYPE',
  State = 'STATE',
  SubTypeProvided_3 = 'SUB_TYPE_PROVIDED_3',
  SubTypeProvided_4 = 'SUB_TYPE_PROVIDED_4',
  SubTypeProvided_5 = 'SUB_TYPE_PROVIDED_5',
}

/** 4.19.7 */
export enum PrioritizationStatus {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (2) Not placed on prioritization list */
  NotPlacedOnPrioritizationList = 'NOT_PLACED_ON_PRIORITIZATION_LIST',
  /** (1) Placed on prioritization list */
  PlacedOnPrioritizationList = 'PLACED_ON_PRIORITIZATION_LIST',
}

export type Project = {
  __typename?: 'Project';
  HMISParticipatingProject?: Maybe<NoYesMissing>;
  HOPWAMedAssistedLivingFac?: Maybe<HopwaMedAssistedLivingFac>;
  access: ProjectAccess;
  active: Scalars['Boolean'];
  contactInformation?: Maybe<Scalars['String']>;
  continuumProject?: Maybe<NoYesMissing>;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  enrollments: EnrollmentsPaginated;
  funders: FundersPaginated;
  housingType?: Maybe<HousingType>;
  id: Scalars['ID'];
  inventories: InventoriesPaginated;
  operatingEndDate?: Maybe<Scalars['ISO8601Date']>;
  operatingStartDate: Scalars['ISO8601Date'];
  organization: Organization;
  projectCocs: ProjectCocsPaginated;
  projectName: Scalars['String'];
  projectType?: Maybe<ProjectType>;
  residentialAffiliation?: Maybe<NoYesMissing>;
  targetPopulation?: Maybe<TargetPopulation>;
  trackingMethod?: Maybe<TrackingMethod>;
};

export type ProjectEnrollmentsArgs = {
  includeInProgress?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  openOnDate?: InputMaybe<Scalars['ISO8601Date']>;
  searchTerm?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<EnrollmentSortOption>;
};

export type ProjectFundersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<FunderSortOption>;
};

export type ProjectInventoriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<InventorySortOption>;
};

export type ProjectProjectCocsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

export type ProjectAccess = {
  __typename?: 'ProjectAccess';
  canDeleteEnrollments: Scalars['Boolean'];
  canDeleteProject: Scalars['Boolean'];
  canEditEnrollments: Scalars['Boolean'];
  canEditProjectDetails: Scalars['Boolean'];
  canViewDob: Scalars['Boolean'];
  canViewEnrollmentDetails: Scalars['Boolean'];
  canViewFullSsn: Scalars['Boolean'];
  canViewPartialSsn: Scalars['Boolean'];
  id: Scalars['ID'];
};

export type ProjectCoc = {
  __typename?: 'ProjectCoc';
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  cocCode: Scalars['String'];
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  geocode: Scalars['String'];
  geographyType?: Maybe<GeographyType>;
  id: Scalars['ID'];
  project: Project;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type ProjectCocsPaginated = {
  __typename?: 'ProjectCocsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<ProjectCoc>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** HUD Project Sorting Options */
export enum ProjectSortOption {
  Name = 'NAME',
  OrganizationAndName = 'ORGANIZATION_AND_NAME',
}

/** HUD Project Types */
export enum ProjectType {
  /** Coordinated Entry */
  Ce = 'CE',
  /** Day Shelter */
  DayShelter = 'DAY_SHELTER',
  /** Emergency Shelter */
  Es = 'ES',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** Permanent Housing Only */
  Oph = 'OPH',
  /** Other */
  Other = 'OTHER',
  /** Permanent Housing */
  Ph = 'PH',
  /** Homelessness Prevention */
  Prevention = 'PREVENTION',
  /** Permanent Supportive Housing */
  Psh = 'PSH',
  /** Rapid Re-Housing */
  Rrh = 'RRH',
  /** Services Only */
  ServicesOnly = 'SERVICES_ONLY',
  /** Safe Haven */
  Sh = 'SH',
  /** Street Outreach */
  So = 'SO',
  /** Transitional Housing */
  Th = 'TH',
}

export type ProjectsPaginated = {
  __typename?: 'ProjectsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Project>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  access: QueryAccess;
  /** Assessment lookup */
  assessment?: Maybe<Assessment>;
  /** Client lookup */
  client?: Maybe<Client>;
  /** Client omnisearch */
  clientOmniSearch: ClientsPaginated;
  /** Search for clients */
  clientSearch: ClientsPaginated;
  currentUser?: Maybe<ApplicationUser>;
  /** Enrollment lookup */
  enrollment?: Maybe<Enrollment>;
  file?: Maybe<File>;
  /** Funder lookup */
  funder?: Maybe<Funder>;
  /** Get most relevant/recent form definition for the specified Role and project (optionally) */
  getFormDefinition?: Maybe<FormDefinition>;
  /** Inventory lookup */
  inventory?: Maybe<Inventory>;
  /** Organization lookup */
  organization?: Maybe<Organization>;
  organizations: OrganizationsPaginated;
  /** Get list of options for pick list */
  pickList: Array<PickListOption>;
  /** Project lookup */
  project?: Maybe<Project>;
  /** Project CoC lookup */
  projectCoc?: Maybe<ProjectCoc>;
  projects: ProjectsPaginated;
  /** Service lookup */
  service?: Maybe<Service>;
};

export type QueryAssessmentArgs = {
  id: Scalars['ID'];
};

export type QueryClientArgs = {
  id: Scalars['ID'];
};

export type QueryClientOmniSearchArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ClientSortOption>;
  textSearch: Scalars['String'];
};

export type QueryClientSearchArgs = {
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ClientSortOption>;
};

export type QueryEnrollmentArgs = {
  id: Scalars['ID'];
};

export type QueryFileArgs = {
  id: Scalars['ID'];
};

export type QueryFunderArgs = {
  id: Scalars['ID'];
};

export type QueryGetFormDefinitionArgs = {
  enrollmentId?: InputMaybe<Scalars['ID']>;
  projectId?: InputMaybe<Scalars['ID']>;
  role: FormRole;
};

export type QueryInventoryArgs = {
  id: Scalars['ID'];
};

export type QueryOrganizationArgs = {
  id: Scalars['ID'];
};

export type QueryOrganizationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<OrganizationSortOption>;
};

export type QueryPickListArgs = {
  pickListType: PickListType;
  relationId?: InputMaybe<Scalars['ID']>;
};

export type QueryProjectArgs = {
  id: Scalars['ID'];
};

export type QueryProjectCocArgs = {
  id: Scalars['ID'];
};

export type QueryProjectsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  projectTypes?: InputMaybe<Array<ProjectType>>;
  searchTerm?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

export type QueryServiceArgs = {
  id: Scalars['ID'];
};

export type QueryAccess = {
  __typename?: 'QueryAccess';
  canAdministerHmis: Scalars['Boolean'];
  canAuditClients: Scalars['Boolean'];
  canDeleteAssignedProjectData: Scalars['Boolean'];
  canDeleteEnrollments: Scalars['Boolean'];
  canDeleteOrganization: Scalars['Boolean'];
  canDeleteProject: Scalars['Boolean'];
  canEditClients: Scalars['Boolean'];
  canEditEnrollments: Scalars['Boolean'];
  canEditOrganization: Scalars['Boolean'];
  canEditProjectDetails: Scalars['Boolean'];
  canManageAnyClientFiles: Scalars['Boolean'];
  canManageOwnClientFiles: Scalars['Boolean'];
  canViewAnyConfidentialClientFiles: Scalars['Boolean'];
  canViewAnyNonconfidentialClientFiles: Scalars['Boolean'];
  canViewClients: Scalars['Boolean'];
  canViewDob: Scalars['Boolean'];
  canViewEnrollmentDetails: Scalars['Boolean'];
  canViewFullSsn: Scalars['Boolean'];
  canViewPartialSsn: Scalars['Boolean'];
  id: Scalars['ID'];
};

/** HUD Race (1.7) */
export enum Race {
  /** (AmIndAKNative) American Indian, Alaska Native, or Indigenous */
  AmIndAkNative = 'AM_IND_AK_NATIVE',
  /** (Asian) Asian or Asian American */
  Asian = 'ASIAN',
  /** (BlackAfAmerican) Black, African American, or African */
  BlackAfAmerican = 'BLACK_AF_AMERICAN',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (NativeHIPacific) Native Hawaiian or Pacific Islander */
  NativeHiPacific = 'NATIVE_HI_PACIFIC',
  /** (White) White */
  White = 'WHITE',
}

/** 4.04.A */
export enum ReasonNotInsured {
  /** (2) Applied; client not eligible */
  AppliedClientNotEligible = 'APPLIED_CLIENT_NOT_ELIGIBLE',
  /** (1) Applied; decision pending */
  AppliedDecisionPending = 'APPLIED_DECISION_PENDING',
  /** (3) Client did not apply */
  ClientDidNotApply = 'CLIENT_DID_NOT_APPLY',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Insurance type N/A for this client */
  InsuranceTypeNAForThisClient = 'INSURANCE_TYPE_N_A_FOR_THIS_CLIENT',
  /** Invalid Value */
  Invalid = 'INVALID',
}

/** Types allowed for recent items */
export enum RecentItemType {
  Client = 'Client',
  Project = 'Project',
}

/** 1.4 */
export enum RecordType {
  /** (200) Bed Night */
  BedNight = 'BED_NIGHT',
  /** (12) Contact 12 */
  Contact_12 = 'CONTACT_12',
  /** (13) Contact 13 */
  Contact_13 = 'CONTACT_13',
  /** (151) HOPWA Financial Assistance */
  HopwaFinancialAssistance = 'HOPWA_FINANCIAL_ASSISTANCE',
  /** (143) HOPWA Service */
  HopwaService = 'HOPWA_SERVICE',
  /** (210) HUD-VASH OTH Voucher Tracking */
  HudVashOthVoucherTracking = 'HUD_VASH_OTH_VOUCHER_TRACKING',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (300) Moving On Assistance */
  MovingOnAssistance = 'MOVING_ON_ASSISTANCE',
  /** (161) PATH Referral */
  PathReferral = 'PATH_REFERRAL',
  /** (141) PATH Service */
  PathService = 'PATH_SERVICE',
  /** (162) RHY Referral */
  RhyReferral = 'RHY_REFERRAL',
  /** (142) RHY Service Connections */
  RhyServiceConnections = 'RHY_SERVICE_CONNECTIONS',
  /** (152) SSVF Financial Assistance */
  SsvfFinancialAssistance = 'SSVF_FINANCIAL_ASSISTANCE',
  /** (144) SSVF Service */
  SsvfService = 'SSVF_SERVICE',
}

/** 4.20.D */
export enum ReferralResult {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (1) Successful referral: client accepted */
  SuccessfulReferralClientAccepted = 'SUCCESSFUL_REFERRAL_CLIENT_ACCEPTED',
  /** (2) Unsuccessful referral: client rejected */
  UnsuccessfulReferralClientRejected = 'UNSUCCESSFUL_REFERRAL_CLIENT_REJECTED',
  /** (3) Unsuccessful referral: provider rejected */
  UnsuccessfulReferralProviderRejected = 'UNSUCCESSFUL_REFERRAL_PROVIDER_REJECTED',
}

/** Related record type for a group of questions in an assessment */
export enum RelatedRecordType {
  /** CurrentLivingSituation */
  CurrentLivingSituation = 'CURRENT_LIVING_SITUATION',
  /** DisabilityGroup */
  DisabilityGroup = 'DISABILITY_GROUP',
  /** ExmploymentEducation */
  EmploymentEducation = 'EMPLOYMENT_EDUCATION',
  /** Enrollment */
  Enrollment = 'ENROLLMENT',
  /** EnrollmentCoc */
  EnrollmentCoc = 'ENROLLMENT_COC',
  /** Exit */
  Exit = 'EXIT',
  /** HealthAndDv */
  HealthAndDv = 'HEALTH_AND_DV',
  /** IncomeBenefit */
  IncomeBenefit = 'INCOME_BENEFIT',
  /** YouthEducationStatus */
  YouthEducationStatus = 'YOUTH_EDUCATION_STATUS',
}

/** 3.15.1 */
export enum RelationshipToHoH {
  /** (2) Child */
  Child = 'CHILD',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (4) Other relative */
  OtherRelative = 'OTHER_RELATIVE',
  /** (1) Self (head of household) */
  SelfHeadOfHousehold = 'SELF_HEAD_OF_HOUSEHOLD',
  /** (3) Spouse or partner */
  SpouseOrPartner = 'SPOUSE_OR_PARTNER',
  /** (5) Unrelated household member */
  UnrelatedHouseholdMember = 'UNRELATED_HOUSEHOLD_MEMBER',
}

/** 3.917.2 */
export enum ResidencePriorLengthOfStay {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (4) 90 days or more but less than one year */
  Num_90DaysOrMoreButLessThanOneYear = 'NUM_90_DAYS_OR_MORE_BUT_LESS_THAN_ONE_YEAR',
  /** (3) One month or more, but less than 90 days */
  OneMonthOrMoreButLessThan_90Days = 'ONE_MONTH_OR_MORE_BUT_LESS_THAN_90_DAYS',
  /** (10) One night or less */
  OneNightOrLess = 'ONE_NIGHT_OR_LESS',
  /** (2) One week or more, but less than one month */
  OneWeekOrMoreButLessThanOneMonth = 'ONE_WEEK_OR_MORE_BUT_LESS_THAN_ONE_MONTH',
  /** (5) One year or longer */
  OneYearOrLonger = 'ONE_YEAR_OR_LONGER',
  /** (11) Two to six nights */
  TwoToSixNights = 'TWO_TO_SIX_NIGHTS',
}

/** 3.02.2 */
export enum SsnDataQuality {
  /** (2) Approximate or partial SSN reported */
  ApproximateOrPartialSsnReported = 'APPROXIMATE_OR_PARTIAL_SSN_REPORTED',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Full SSN reported */
  FullSsnReported = 'FULL_SSN_REPORTED',
  /** Invalid Value */
  Invalid = 'INVALID',
}

/** Autogenerated input type of SaveAssessment */
export type SaveAssessmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: AssessmentInput;
};

/** Autogenerated return type of SaveAssessment. */
export type SaveAssessmentPayload = {
  __typename?: 'SaveAssessmentPayload';
  assessment?: Maybe<Assessment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** HUD or Custom Service rendered */
export type Service = {
  __typename?: 'Service';
  FAAmount?: Maybe<Scalars['Float']>;
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateProvided: Scalars['ISO8601Date'];
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  id: Scalars['ID'];
  movingOnOtherType?: Maybe<Scalars['String']>;
  otherTypeProvided?: Maybe<Scalars['String']>;
  recordType?: Maybe<RecordType>;
  referralOutcome?: Maybe<PathReferralOutcome>;
  subTypeProvided?: Maybe<ServiceSubTypeProvided>;
  typeProvided?: Maybe<ServiceTypeProvided>;
  user?: Maybe<User>;
};

export enum ServiceDetailType {
  Bulk = 'BULK',
  Client = 'CLIENT',
}

/** HUD Service Input */
export type ServiceInput = {
  FAAmount?: InputMaybe<Scalars['Float']>;
  dateProvided?: InputMaybe<Scalars['ISO8601Date']>;
  enrollmentId?: InputMaybe<Scalars['ID']>;
  movingOnOtherType?: InputMaybe<Scalars['String']>;
  otherTypeProvided?: InputMaybe<Scalars['String']>;
  recordType?: InputMaybe<RecordType>;
  referralOutcome?: InputMaybe<PathReferralOutcome>;
  subTypeProvided?: InputMaybe<ServiceSubTypeProvided>;
  typeProvided?: InputMaybe<ServiceTypeProvided>;
};

/** HMIS Service Sorting Options */
export enum ServiceSortOption {
  DateProvided = 'DATE_PROVIDED',
}

/** HUD Service TypeProvided:SubTypeProvided aggregate (V2.A, V2.B, V2.C) */
export enum ServiceSubTypeProvided {
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (12) Child care */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsChildCare = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__CHILD_CARE',
  /** (2) Daily living services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsDailyLivingServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__DAILY_LIVING_SERVICES',
  /** (6) Fiduciary and representative payee services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsFiduciaryAndRepresentativePayeeServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__FIDUCIARY_AND_REPRESENTATIVE_PAYEE_SERVICES',
  /** (1) Health care services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsHealthCareServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__HEALTH_CARE_SERVICES',
  /** (13) Housing counseling */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsHousingCounseling = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__HOUSING_COUNSELING',
  /** (5) Income support services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsIncomeSupportServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__INCOME_SUPPORT_SERVICES',
  /** (7) Legal services - child support */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesChildSupport = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_CHILD_SUPPORT',
  /** (8) Legal services - eviction prevention */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesEvictionPrevention = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_EVICTION_PREVENTION',
  /** (11) Legal services - other */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesOther = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OTHER',
  /** (9) Legal services - outstanding fines and penalties */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesOutstandingFinesAndPenalties = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OUTSTANDING_FINES_AND_PENALTIES',
  /** (10) Legal services - restore / acquire driver's license */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesRestoreAcquireDriverSLicense = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_RESTORE_ACQUIRE_DRIVER_S_LICENSE',
  /** (3) Personal financial planning services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsPersonalFinancialPlanningServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__PERSONAL_FINANCIAL_PLANNING_SERVICES',
  /** (4) Transportation services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsTransportationServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__TRANSPORTATION_SERVICES',
  /** (3) Educational assistance */
  SsvfServiceAssistanceObtainingVaBenefitsEducationalAssistance = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__EDUCATIONAL_ASSISTANCE',
  /** (2) Employment and training services */
  SsvfServiceAssistanceObtainingVaBenefitsEmploymentAndTrainingServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (4) Health care services */
  SsvfServiceAssistanceObtainingVaBenefitsHealthCareServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__HEALTH_CARE_SERVICES',
  /** (1) VA vocational and rehabilitation counseling */
  SsvfServiceAssistanceObtainingVaBenefitsVaVocationalAndRehabilitationCounseling = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__VA_VOCATIONAL_AND_REHABILITATION_COUNSELING',
  /** (10) Child care */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsChildCare = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__CHILD_CARE',
  /** (4) Fiduciary and representative payee services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsFiduciaryAndRepresentativePayeeServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__FIDUCIARY_AND_REPRESENTATIVE_PAYEE_SERVICES',
  /** (11) Housing counseling */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsHousingCounseling = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__HOUSING_COUNSELING',
  /** (3) Income support services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsIncomeSupportServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__INCOME_SUPPORT_SERVICES',
  /** (5) Legal services - child support */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesChildSupport = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_CHILD_SUPPORT',
  /** (6) Legal services - eviction prevention */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesEvictionPrevention = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_EVICTION_PREVENTION',
  /** (9) Legal services - other */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesOther = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OTHER',
  /** (7) Legal services - outstanding fines and penalties */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesOutstandingFinesAndPenalties = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OUTSTANDING_FINES_AND_PENALTIES',
  /** (8) Legal services - restore / acquire driver's license */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesRestoreAcquireDriverSLicense = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_RESTORE_ACQUIRE_DRIVER_S_LICENSE',
  /** (1) Personal financial planning services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsPersonalFinancialPlanningServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__PERSONAL_FINANCIAL_PLANNING_SERVICES',
  /** (2) Transportation services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsTransportationServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__TRANSPORTATION_SERVICES',
}

/** HUD Service RecordType:TypeProvided aggregate (P1.2, R14.2, W1.2, V2.2, W2.3, V3.3, P2.2, 4.14, V8.1, C2.2) */
export enum ServiceTypeProvided {
  /** (200) BedNight */
  BedNightBedNight = 'BED_NIGHT__BED_NIGHT',
  /** (7) Mortgage assistance */
  HopwaFinancialAssistanceMortgageAssistance = 'HOPWA_FINANCIAL_ASSISTANCE__MORTGAGE_ASSISTANCE',
  /** (1) Rental assistance */
  HopwaFinancialAssistanceRentalAssistance = 'HOPWA_FINANCIAL_ASSISTANCE__RENTAL_ASSISTANCE',
  /** (2) Security deposits */
  HopwaFinancialAssistanceSecurityDeposits = 'HOPWA_FINANCIAL_ASSISTANCE__SECURITY_DEPOSITS',
  /** (3) Utility deposits */
  HopwaFinancialAssistanceUtilityDeposits = 'HOPWA_FINANCIAL_ASSISTANCE__UTILITY_DEPOSITS',
  /** (4) Utility payments */
  HopwaFinancialAssistanceUtilityPayments = 'HOPWA_FINANCIAL_ASSISTANCE__UTILITY_PAYMENTS',
  /** (1) Adult day care and personal assistance */
  HopwaServiceAdultDayCareAndPersonalAssistance = 'HOPWA_SERVICE__ADULT_DAY_CARE_AND_PERSONAL_ASSISTANCE',
  /** (2) Case management */
  HopwaServiceCaseManagement = 'HOPWA_SERVICE__CASE_MANAGEMENT',
  /** (3) Child care */
  HopwaServiceChildCare = 'HOPWA_SERVICE__CHILD_CARE',
  /** (4) Criminal justice/legal services */
  HopwaServiceCriminalJusticeLegalServices = 'HOPWA_SERVICE__CRIMINAL_JUSTICE_LEGAL_SERVICES',
  /** (5) Education */
  HopwaServiceEducation = 'HOPWA_SERVICE__EDUCATION',
  /** (6) Employment and training services */
  HopwaServiceEmploymentAndTrainingServices = 'HOPWA_SERVICE__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (7) Food/meals/nutritional services */
  HopwaServiceFoodMealsNutritionalServices = 'HOPWA_SERVICE__FOOD_MEALS_NUTRITIONAL_SERVICES',
  /** (8) Health/medical care */
  HopwaServiceHealthMedicalCare = 'HOPWA_SERVICE__HEALTH_MEDICAL_CARE',
  /** (9) Life skills training */
  HopwaServiceLifeSkillsTraining = 'HOPWA_SERVICE__LIFE_SKILLS_TRAINING',
  /** (10) Mental health care/counseling */
  HopwaServiceMentalHealthCareCounseling = 'HOPWA_SERVICE__MENTAL_HEALTH_CARE_COUNSELING',
  /** (14) Other HOPWA funded service */
  HopwaServiceOtherHopwaFundedService = 'HOPWA_SERVICE__OTHER_HOPWA_FUNDED_SERVICE',
  /** (11) Outreach and/or engagement */
  HopwaServiceOutreachAndOrEngagement = 'HOPWA_SERVICE__OUTREACH_AND_OR_ENGAGEMENT',
  /** (12) Substance abuse services/treatment */
  HopwaServiceSubstanceAbuseServicesTreatment = 'HOPWA_SERVICE__SUBSTANCE_ABUSE_SERVICES_TREATMENT',
  /** (13) Transportation */
  HopwaServiceTransportation = 'HOPWA_SERVICE__TRANSPORTATION',
  /** (12) Other */
  HudVashOthVoucherTrackingOther = 'HUD_VASH_OTH_VOUCHER_TRACKING__OTHER',
  /** (1) Referral package forwarded to PHA */
  HudVashOthVoucherTrackingReferralPackageForwardedToPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__REFERRAL_PACKAGE_FORWARDED_TO_PHA',
  /** (10) Veteran exited - family maintained the voucher */
  HudVashOthVoucherTrackingVeteranExitedFamilyMaintainedTheVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_FAMILY_MAINTAINED_THE_VOUCHER',
  /** (11) Veteran exited - prior to ever receiving a voucher */
  HudVashOthVoucherTrackingVeteranExitedPriorToEverReceivingAVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_PRIOR_TO_EVER_RECEIVING_A_VOUCHER',
  /** (9) Veteran exited - voucher was returned */
  HudVashOthVoucherTrackingVeteranExitedVoucherWasReturned = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_VOUCHER_WAS_RETURNED',
  /** (2) Voucher denied by PHA */
  HudVashOthVoucherTrackingVoucherDeniedByPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_DENIED_BY_PHA',
  /** (5) Voucher in use - veteran moved into housing */
  HudVashOthVoucherTrackingVoucherInUseVeteranMovedIntoHousing = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_IN_USE_VETERAN_MOVED_INTO_HOUSING',
  /** (3) Voucher issued by PHA */
  HudVashOthVoucherTrackingVoucherIssuedByPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_ISSUED_BY_PHA',
  /** (4) Voucher revoked or expired */
  HudVashOthVoucherTrackingVoucherRevokedOrExpired = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_REVOKED_OR_EXPIRED',
  /** (7) Voucher was administratively absorbed by new PHA */
  HudVashOthVoucherTrackingVoucherWasAdministrativelyAbsorbedByNewPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_ADMINISTRATIVELY_ABSORBED_BY_NEW_PHA',
  /** (8) Voucher was converted to Housing Choice Voucher */
  HudVashOthVoucherTrackingVoucherWasConvertedToHousingChoiceVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_CONVERTED_TO_HOUSING_CHOICE_VOUCHER',
  /** (6) Voucher was ported locally */
  HudVashOthVoucherTrackingVoucherWasPortedLocally = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_PORTED_LOCALLY',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (2) Financial assistance for Moving On (e.g., security deposit, moving expenses) */
  MovingOnAssistanceFinancialAssistanceForMovingOnEGSecurityDepositMovingExpenses = 'MOVING_ON_ASSISTANCE__FINANCIAL_ASSISTANCE_FOR_MOVING_ON_E_G_SECURITY_DEPOSIT_MOVING_EXPENSES',
  /** (4) Housing referral/placement */
  MovingOnAssistanceHousingReferralPlacement = 'MOVING_ON_ASSISTANCE__HOUSING_REFERRAL_PLACEMENT',
  /** (3) Non-financial assistance for Moving On (e.g., housing navigation, transition support) */
  MovingOnAssistanceNonFinancialAssistanceForMovingOnEGHousingNavigationTransitionSupport = 'MOVING_ON_ASSISTANCE__NON_FINANCIAL_ASSISTANCE_FOR_MOVING_ON_E_G_HOUSING_NAVIGATION_TRANSITION_SUPPORT',
  /** (5) Other */
  MovingOnAssistanceOther = 'MOVING_ON_ASSISTANCE__OTHER',
  /** (1) Subsidized housing application assistance */
  MovingOnAssistanceSubsidizedHousingApplicationAssistance = 'MOVING_ON_ASSISTANCE__SUBSIDIZED_HOUSING_APPLICATION_ASSISTANCE',
  /** (1) Community mental health */
  PathReferralCommunityMentalHealth = 'PATH_REFERRAL__COMMUNITY_MENTAL_HEALTH',
  /** (5) Educational services */
  PathReferralEducationalServices = 'PATH_REFERRAL__EDUCATIONAL_SERVICES',
  /** (9) Employment assistance */
  PathReferralEmploymentAssistance = 'PATH_REFERRAL__EMPLOYMENT_ASSISTANCE',
  /** (6) Housing services */
  PathReferralHousingServices = 'PATH_REFERRAL__HOUSING_SERVICES',
  /** (8) Income assistance */
  PathReferralIncomeAssistance = 'PATH_REFERRAL__INCOME_ASSISTANCE',
  /** (4) Job training */
  PathReferralJobTraining = 'PATH_REFERRAL__JOB_TRAINING',
  /** (10) Medical insurance */
  PathReferralMedicalInsurance = 'PATH_REFERRAL__MEDICAL_INSURANCE',
  /** (7) Permanent housing */
  PathReferralPermanentHousing = 'PATH_REFERRAL__PERMANENT_HOUSING',
  /** (3) Primary health/dental care */
  PathReferralPrimaryHealthDentalCare = 'PATH_REFERRAL__PRIMARY_HEALTH_DENTAL_CARE',
  /** (2) Substance use treatment */
  PathReferralSubstanceUseTreatment = 'PATH_REFERRAL__SUBSTANCE_USE_TREATMENT',
  /** (11) Temporary housing */
  PathReferralTemporaryHousing = 'PATH_REFERRAL__TEMPORARY_HOUSING',
  /** (6) Case management */
  PathServiceCaseManagement = 'PATH_SERVICE__CASE_MANAGEMENT',
  /** (14) Clinical assessment */
  PathServiceClinicalAssessment = 'PATH_SERVICE__CLINICAL_ASSESSMENT',
  /** (4) Community mental health */
  PathServiceCommunityMentalHealth = 'PATH_SERVICE__COMMUNITY_MENTAL_HEALTH',
  /** (3) Habilitation/rehabilitation */
  PathServiceHabilitationRehabilitation = 'PATH_SERVICE__HABILITATION_REHABILITATION',
  /** (10) Housing eligibility determination */
  PathServiceHousingEligibilityDetermination = 'PATH_SERVICE__HOUSING_ELIGIBILITY_DETERMINATION',
  /** (8) Housing minor renovation */
  PathServiceHousingMinorRenovation = 'PATH_SERVICE__HOUSING_MINOR_RENOVATION',
  /** (9) Housing moving assistance */
  PathServiceHousingMovingAssistance = 'PATH_SERVICE__HOUSING_MOVING_ASSISTANCE',
  /** (12) One-time rent for eviction prevention */
  PathServiceOneTimeRentForEvictionPrevention = 'PATH_SERVICE__ONE_TIME_RENT_FOR_EVICTION_PREVENTION',
  /** (7) Residential supportive services */
  PathServiceResidentialSupportiveServices = 'PATH_SERVICE__RESIDENTIAL_SUPPORTIVE_SERVICES',
  /** (1) Re-engagement */
  PathServiceReEngagement = 'PATH_SERVICE__RE_ENGAGEMENT',
  /** (2) Screening */
  PathServiceScreening = 'PATH_SERVICE__SCREENING',
  /** (11) Security deposits */
  PathServiceSecurityDeposits = 'PATH_SERVICE__SECURITY_DEPOSITS',
  /** (5) Substance use treatment */
  PathServiceSubstanceUseTreatment = 'PATH_SERVICE__SUBSTANCE_USE_TREATMENT',
  /** (2) Community service/service learning (CSL) */
  RhyServiceConnectionsCommunityServiceServiceLearningCsl = 'RHY_SERVICE_CONNECTIONS__COMMUNITY_SERVICE_SERVICE_LEARNING_CSL',
  /** (7) Criminal justice /legal services */
  RhyServiceConnectionsCriminalJusticeLegalServices = 'RHY_SERVICE_CONNECTIONS__CRIMINAL_JUSTICE_LEGAL_SERVICES',
  /** (5) Education */
  RhyServiceConnectionsEducation = 'RHY_SERVICE_CONNECTIONS__EDUCATION',
  /** (6) Employment and training services */
  RhyServiceConnectionsEmploymentAndTrainingServices = 'RHY_SERVICE_CONNECTIONS__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (14) Health/medical care */
  RhyServiceConnectionsHealthMedicalCare = 'RHY_SERVICE_CONNECTIONS__HEALTH_MEDICAL_CARE',
  /** (26) Home-based Services */
  RhyServiceConnectionsHomeBasedServices = 'RHY_SERVICE_CONNECTIONS__HOME_BASED_SERVICES',
  /** (8) Life skills training */
  RhyServiceConnectionsLifeSkillsTraining = 'RHY_SERVICE_CONNECTIONS__LIFE_SKILLS_TRAINING',
  /** (10) Parenting education for youth with children */
  RhyServiceConnectionsParentingEducationForYouthWithChildren = 'RHY_SERVICE_CONNECTIONS__PARENTING_EDUCATION_FOR_YOUTH_WITH_CHILDREN',
  /** (12) Post-natal care */
  RhyServiceConnectionsPostNatalCare = 'RHY_SERVICE_CONNECTIONS__POST_NATAL_CARE',
  /** (27) Post-natal newborn care (wellness exams; immunizations) */
  RhyServiceConnectionsPostNatalNewbornCareWellnessExamsImmunizations = 'RHY_SERVICE_CONNECTIONS__POST_NATAL_NEWBORN_CARE_WELLNESS_EXAMS_IMMUNIZATIONS',
  /** (13) Pre-natal care */
  RhyServiceConnectionsPreNatalCare = 'RHY_SERVICE_CONNECTIONS__PRE_NATAL_CARE',
  /** (28) STD Testing */
  RhyServiceConnectionsStdTesting = 'RHY_SERVICE_CONNECTIONS__STD_TESTING',
  /** (29) Street-based Services */
  RhyServiceConnectionsStreetBasedServices = 'RHY_SERVICE_CONNECTIONS__STREET_BASED_SERVICES',
  /** (18) Substance use disorder/Prevention Services */
  RhyServiceConnectionsSubstanceUseDisorderPreventionServices = 'RHY_SERVICE_CONNECTIONS__SUBSTANCE_USE_DISORDER_PREVENTION_SERVICES',
  /** (17) Substance use disorder treatment */
  RhyServiceConnectionsSubstanceUseDisorderTreatment = 'RHY_SERVICE_CONNECTIONS__SUBSTANCE_USE_DISORDER_TREATMENT',
  /** (10) Child care */
  SsvfFinancialAssistanceChildCare = 'SSVF_FINANCIAL_ASSISTANCE__CHILD_CARE',
  /** (14) Emergency housing assistance */
  SsvfFinancialAssistanceEmergencyHousingAssistance = 'SSVF_FINANCIAL_ASSISTANCE__EMERGENCY_HOUSING_ASSISTANCE',
  /** (15) Extended Shallow Subsidy - Rental Assistance */
  SsvfFinancialAssistanceExtendedShallowSubsidyRentalAssistance = 'SSVF_FINANCIAL_ASSISTANCE__EXTENDED_SHALLOW_SUBSIDY_RENTAL_ASSISTANCE',
  /** (16) Food Assistance */
  SsvfFinancialAssistanceFoodAssistance = 'SSVF_FINANCIAL_ASSISTANCE__FOOD_ASSISTANCE',
  /** (12) General housing stability assistance */
  SsvfFinancialAssistanceGeneralHousingStabilityAssistance = 'SSVF_FINANCIAL_ASSISTANCE__GENERAL_HOUSING_STABILITY_ASSISTANCE',
  /** (11) General housing stability assistance - emergency supplies */
  SsvfFinancialAssistanceGeneralHousingStabilityAssistanceEmergencySupplies = 'SSVF_FINANCIAL_ASSISTANCE__GENERAL_HOUSING_STABILITY_ASSISTANCE_EMERGENCY_SUPPLIES',
  /** (5) Moving costs */
  SsvfFinancialAssistanceMovingCosts = 'SSVF_FINANCIAL_ASSISTANCE__MOVING_COSTS',
  /** (1) Rental assistance */
  SsvfFinancialAssistanceRentalAssistance = 'SSVF_FINANCIAL_ASSISTANCE__RENTAL_ASSISTANCE',
  /** (2) Security deposit */
  SsvfFinancialAssistanceSecurityDeposit = 'SSVF_FINANCIAL_ASSISTANCE__SECURITY_DEPOSIT',
  /** (8) Transportation services: tokens/vouchers */
  SsvfFinancialAssistanceTransportationServicesTokensVouchers = 'SSVF_FINANCIAL_ASSISTANCE__TRANSPORTATION_SERVICES_TOKENS_VOUCHERS',
  /** (9) Transportation services: vehicle repair/maintenance */
  SsvfFinancialAssistanceTransportationServicesVehicleRepairMaintenance = 'SSVF_FINANCIAL_ASSISTANCE__TRANSPORTATION_SERVICES_VEHICLE_REPAIR_MAINTENANCE',
  /** (3) Utility deposit */
  SsvfFinancialAssistanceUtilityDeposit = 'SSVF_FINANCIAL_ASSISTANCE__UTILITY_DEPOSIT',
  /** (4) Utility fee payment assistance */
  SsvfFinancialAssistanceUtilityFeePaymentAssistance = 'SSVF_FINANCIAL_ASSISTANCE__UTILITY_FEE_PAYMENT_ASSISTANCE',
  /** (4) Assistance obtaining/coordinating other public benefits */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefits = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS',
  /** (3) Assistance obtaining VA benefits */
  SsvfServiceAssistanceObtainingVaBenefits = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS',
  /** (2) Case management services */
  SsvfServiceCaseManagementServices = 'SSVF_SERVICE__CASE_MANAGEMENT_SERVICES',
  /** (5) Direct provision of other public benefits */
  SsvfServiceDirectProvisionOfOtherPublicBenefits = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS',
  /** (6) Other (non-TFA) supportive service approved by VA */
  SsvfServiceOtherNonTfaSupportiveServiceApprovedByVa = 'SSVF_SERVICE__OTHER_NON_TFA_SUPPORTIVE_SERVICE_APPROVED_BY_VA',
  /** (1) Outreach services */
  SsvfServiceOutreachServices = 'SSVF_SERVICE__OUTREACH_SERVICES',
}

export type ServicesPaginated = {
  __typename?: 'ServicesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Service>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of SetHoHForEnrollment */
export type SetHoHForEnrollmentInput = {
  clientId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  householdId: Scalars['ID'];
};

/** Autogenerated return type of SetHoHForEnrollment. */
export type SetHoHForEnrollmentPayload = {
  __typename?: 'SetHoHForEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of SubmitAssessment */
export type SubmitAssessmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: AssessmentInput;
};

/** Autogenerated return type of SubmitAssessment. */
export type SubmitAssessmentPayload = {
  __typename?: 'SubmitAssessmentPayload';
  assessment?: Maybe<Assessment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of SubmitForm */
export type SubmitFormInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: FormInput;
};

/** Autogenerated return type of SubmitForm. */
export type SubmitFormPayload = {
  __typename?: 'SubmitFormPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  record?: Maybe<SubmitFormResult>;
};

/** Union type of allowed records for form submission response */
export type SubmitFormResult =
  | Client
  | File
  | Funder
  | Inventory
  | Organization
  | Project
  | ProjectCoc
  | Service;

/** Autogenerated input type of SubmitHouseholdAssessments */
export type SubmitHouseholdAssessmentsInput = {
  assessmentIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether warnings have been confirmed */
  confirmed?: InputMaybe<Scalars['Boolean']>;
  /** Validate assessments but don't submit them */
  validateOnly?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of SubmitHouseholdAssessments. */
export type SubmitHouseholdAssessmentsPayload = {
  __typename?: 'SubmitHouseholdAssessmentsPayload';
  assessments?: Maybe<Array<Assessment>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** 2.02.8 */
export enum TargetPopulation {
  /** (1) Domestic violence victims */
  DomesticViolenceVictims = 'DOMESTIC_VIOLENCE_VICTIMS',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (4) Not applicable */
  NotApplicable = 'NOT_APPLICABLE',
  /** (3) Persons with HIV/AIDS */
  PersonsWithHivAids = 'PERSONS_WITH_HIV_AIDS',
}

/** 3.917.4 */
export enum TimesHomelessPastThreeYears {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Four or more times */
  FourOrMoreTimes = 'FOUR_OR_MORE_TIMES',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (1) One time */
  OneTime = 'ONE_TIME',
  /** (3) Three times */
  ThreeTimes = 'THREE_TIMES',
  /** (2) Two times */
  TwoTimes = 'TWO_TIMES',
}

/** 2.02.C */
export enum TrackingMethod {
  /** (0) Entry/Exit Date */
  EntryExitDate = 'ENTRY_EXIT_DATE',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (3) Night-by-Night */
  NightByNight = 'NIGHT_BY_NIGHT',
}

export type Unit = {
  __typename?: 'Unit';
  bedCount: Scalars['Int'];
  beds: Array<Bed>;
  endDate?: Maybe<Scalars['ISO8601Date']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  startDate: Scalars['ISO8601Date'];
};

export type UnitInput = {
  /** Number of units to create */
  count?: InputMaybe<Scalars['Int']>;
  inventoryId: Scalars['ID'];
  /** Prefix for unit names */
  prefix?: InputMaybe<Scalars['String']>;
};

export type UnitsPaginated = {
  __typename?: 'UnitsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Unit>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of UpdateBeds */
export type UpdateBedsInput = {
  bedIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Scalars['String']>;
  inventoryId: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
  unit?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of UpdateBeds. */
export type UpdateBedsPayload = {
  __typename?: 'UpdateBedsPayload';
  beds: Array<Bed>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of UpdateClientImage */
export type UpdateClientImageInput = {
  clientId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  imageBlobId: Scalars['ID'];
};

/** Autogenerated return type of UpdateClientImage. */
export type UpdateClientImagePayload = {
  __typename?: 'UpdateClientImagePayload';
  client?: Maybe<Client>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of UpdateEnrollment */
export type UpdateEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Entry date with format yyyy-mm-dd */
  entryDate?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  relationshipToHoH?: InputMaybe<RelationshipToHoH>;
};

/** Autogenerated return type of UpdateEnrollment. */
export type UpdateEnrollmentPayload = {
  __typename?: 'UpdateEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of UpdateService */
export type UpdateServiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: ServiceInput;
};

/** Autogenerated return type of UpdateService. */
export type UpdateServicePayload = {
  __typename?: 'UpdateServicePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  service?: Maybe<Service>;
};

/** Autogenerated input type of UpdateUnits */
export type UpdateUnitsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  inventoryId: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
  unitIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of UpdateUnits. */
export type UpdateUnitsPayload = {
  __typename?: 'UpdateUnitsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  units: Array<Unit>;
};

/** HUD User */
export type User = {
  __typename?: 'User';
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ValidationError = {
  __typename?: 'ValidationError';
  attribute: Scalars['String'];
  fullMessage: Scalars['String'];
  /** Unique ID for this error */
  id?: Maybe<Scalars['String']>;
  /** Link ID of form item if this error is linked to a specific item */
  linkId?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  readableAttribute?: Maybe<Scalars['String']>;
  /** ID of the AR record this error pertains to */
  recordId?: Maybe<Scalars['ID']>;
  section?: Maybe<Scalars['String']>;
  severity: ValidationSeverity;
  type: ValidationType;
};

export enum ValidationSeverity {
  Error = 'error',
  Warning = 'warning',
}

export enum ValidationType {
  DataNotCollected = 'data_not_collected',
  Information = 'information',
  Invalid = 'invalid',
  NotAllowed = 'not_allowed',
  NotFound = 'not_found',
  OutOfRange = 'out_of_range',
  Required = 'required',
  ServerError = 'server_error',
}

/** Bound applied to the response value. The bound may or may not be dependent on another questions answer. */
export type ValueBound = {
  __typename?: 'ValueBound';
  /** Unique identifier for this bound */
  id?: Maybe<Scalars['String']>;
  /** Link ID of dependent question, if this items value should be compared to another items value */
  question?: Maybe<Scalars['String']>;
  /** Severity of bound. If error, user will be unable to submit a value that does not meet this condition. */
  severity: ValidationSeverity;
  type: BoundType;
  valueDate?: Maybe<Scalars['ISO8601Date']>;
  valueNumber?: Maybe<Scalars['Int']>;
};

/** C1.1 */
export enum WellbeingAgreement {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (2) Neither agree nor disagree */
  NeitherAgreeNorDisagree = 'NEITHER_AGREE_NOR_DISAGREE',
  /** (3) Somewhat agree */
  SomewhatAgree = 'SOMEWHAT_AGREE',
  /** (1) Somewhat disagree */
  SomewhatDisagree = 'SOMEWHAT_DISAGREE',
  /** (4) Strongly agree */
  StronglyAgree = 'STRONGLY_AGREE',
  /** (0) Strongly disagree */
  StronglyDisagree = 'STRONGLY_DISAGREE',
}

/** 4.11.A */
export enum WhenDvOccurred {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** Invalid Value */
  Invalid = 'INVALID',
  /** (4) One year or more */
  OneYearOrMore = 'ONE_YEAR_OR_MORE',
  /** (3) Six months to one year ago (excluding one year exactly) */
  SixMonthsToOneYearAgoExcludingOneYearExactly = 'SIX_MONTHS_TO_ONE_YEAR_AGO_EXCLUDING_ONE_YEAR_EXACTLY',
  /** (2) Three to six months ago (excluding six months exactly) */
  ThreeToSixMonthsAgoExcludingSixMonthsExactly = 'THREE_TO_SIX_MONTHS_AGO_EXCLUDING_SIX_MONTHS_EXACTLY',
  /** (1) Within the past three months */
  WithinThePastThreeMonths = 'WITHIN_THE_PAST_THREE_MONTHS',
}

export type FormDefinitionFieldsFragment = {
  __typename?: 'FormDefinition';
  id: string;
  version: number;
  role: FormRole;
  status: string;
  identifier: string;
};

export type PickListOptionFieldsFragment = {
  __typename?: 'PickListOption';
  code: string;
  label?: string | null;
  secondaryLabel?: string | null;
  groupLabel?: string | null;
  groupCode?: string | null;
  initialSelected?: boolean | null;
};

export type EnableWhenFieldsFragment = {
  __typename?: 'EnableWhen';
  question: string;
  operator: EnableOperator;
  answerCode?: string | null;
  answerCodes?: Array<string> | null;
  answerNumber?: number | null;
  answerBoolean?: boolean | null;
  answerGroupCode?: string | null;
  compareQuestion?: string | null;
};

export type ItemFieldsFragment = {
  __typename: 'FormItem';
  linkId: string;
  type: ItemType;
  component?: Component | null;
  prefix?: string | null;
  text?: string | null;
  briefText?: string | null;
  helperText?: string | null;
  required?: boolean | null;
  warnIfEmpty?: boolean | null;
  hidden?: boolean | null;
  readOnly?: boolean | null;
  repeats?: boolean | null;
  fieldName?: string | null;
  recordType?: RelatedRecordType | null;
  pickListReference?: string | null;
  serviceDetailType?: ServiceDetailType | null;
  size?: InputSize | null;
  assessmentDate?: boolean | null;
  prefill?: boolean | null;
  dataCollectedAbout?: DataCollectedAbout | null;
  disabledDisplay?: DisabledDisplay | null;
  enableBehavior?: EnableBehavior | null;
  bounds?: Array<{
    __typename?: 'ValueBound';
    id?: string | null;
    severity: ValidationSeverity;
    type: BoundType;
    question?: string | null;
    valueNumber?: number | null;
    valueDate?: string | null;
  }> | null;
  pickListOptions?: Array<{
    __typename?: 'PickListOption';
    code: string;
    label?: string | null;
    secondaryLabel?: string | null;
    groupLabel?: string | null;
    groupCode?: string | null;
    initialSelected?: boolean | null;
  }> | null;
  initial?: Array<{
    __typename?: 'InitialValue';
    valueCode?: string | null;
    valueBoolean?: boolean | null;
    valueNumber?: number | null;
    valueLocalConstant?: string | null;
    initialBehavior: InitialBehavior;
  }> | null;
  enableWhen?: Array<{
    __typename?: 'EnableWhen';
    question: string;
    operator: EnableOperator;
    answerCode?: string | null;
    answerCodes?: Array<string> | null;
    answerNumber?: number | null;
    answerBoolean?: boolean | null;
    answerGroupCode?: string | null;
    compareQuestion?: string | null;
  }> | null;
  autofillValues?: Array<{
    __typename?: 'AutofillValue';
    valueCode?: string | null;
    valueBoolean?: boolean | null;
    valueNumber?: number | null;
    sumQuestions?: Array<string> | null;
    autofillBehavior: EnableBehavior;
    autofillWhen: Array<{
      __typename?: 'EnableWhen';
      question: string;
      operator: EnableOperator;
      answerCode?: string | null;
      answerCodes?: Array<string> | null;
      answerNumber?: number | null;
      answerBoolean?: boolean | null;
      answerGroupCode?: string | null;
      compareQuestion?: string | null;
    }>;
  }> | null;
};

export type FormDefinitionWithJsonFragment = {
  __typename?: 'FormDefinition';
  id: string;
  version: number;
  role: FormRole;
  status: string;
  identifier: string;
  definition: {
    __typename: 'FormDefinitionJson';
    item: Array<{
      __typename: 'FormItem';
      linkId: string;
      type: ItemType;
      component?: Component | null;
      prefix?: string | null;
      text?: string | null;
      briefText?: string | null;
      helperText?: string | null;
      required?: boolean | null;
      warnIfEmpty?: boolean | null;
      hidden?: boolean | null;
      readOnly?: boolean | null;
      repeats?: boolean | null;
      fieldName?: string | null;
      recordType?: RelatedRecordType | null;
      pickListReference?: string | null;
      serviceDetailType?: ServiceDetailType | null;
      size?: InputSize | null;
      assessmentDate?: boolean | null;
      prefill?: boolean | null;
      dataCollectedAbout?: DataCollectedAbout | null;
      disabledDisplay?: DisabledDisplay | null;
      enableBehavior?: EnableBehavior | null;
      item?: Array<{
        __typename: 'FormItem';
        linkId: string;
        type: ItemType;
        component?: Component | null;
        prefix?: string | null;
        text?: string | null;
        briefText?: string | null;
        helperText?: string | null;
        required?: boolean | null;
        warnIfEmpty?: boolean | null;
        hidden?: boolean | null;
        readOnly?: boolean | null;
        repeats?: boolean | null;
        fieldName?: string | null;
        recordType?: RelatedRecordType | null;
        pickListReference?: string | null;
        serviceDetailType?: ServiceDetailType | null;
        size?: InputSize | null;
        assessmentDate?: boolean | null;
        prefill?: boolean | null;
        dataCollectedAbout?: DataCollectedAbout | null;
        disabledDisplay?: DisabledDisplay | null;
        enableBehavior?: EnableBehavior | null;
        item?: Array<{
          __typename: 'FormItem';
          linkId: string;
          type: ItemType;
          component?: Component | null;
          prefix?: string | null;
          text?: string | null;
          briefText?: string | null;
          helperText?: string | null;
          required?: boolean | null;
          warnIfEmpty?: boolean | null;
          hidden?: boolean | null;
          readOnly?: boolean | null;
          repeats?: boolean | null;
          fieldName?: string | null;
          recordType?: RelatedRecordType | null;
          pickListReference?: string | null;
          serviceDetailType?: ServiceDetailType | null;
          size?: InputSize | null;
          assessmentDate?: boolean | null;
          prefill?: boolean | null;
          dataCollectedAbout?: DataCollectedAbout | null;
          disabledDisplay?: DisabledDisplay | null;
          enableBehavior?: EnableBehavior | null;
          item?: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            briefText?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            warnIfEmpty?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            serviceDetailType?: ServiceDetailType | null;
            size?: InputSize | null;
            assessmentDate?: boolean | null;
            prefill?: boolean | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              briefText?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              warnIfEmpty?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              serviceDetailType?: ServiceDetailType | null;
              size?: InputSize | null;
              assessmentDate?: boolean | null;
              prefill?: boolean | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                id?: string | null;
                severity: ValidationSeverity;
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
                initialBehavior: InitialBehavior;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                sumQuestions?: Array<string> | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              id?: string | null;
              severity: ValidationSeverity;
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
              initialBehavior: InitialBehavior;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              sumQuestions?: Array<string> | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }> | null;
          bounds?: Array<{
            __typename?: 'ValueBound';
            id?: string | null;
            severity: ValidationSeverity;
            type: BoundType;
            question?: string | null;
            valueNumber?: number | null;
            valueDate?: string | null;
          }> | null;
          pickListOptions?: Array<{
            __typename?: 'PickListOption';
            code: string;
            label?: string | null;
            secondaryLabel?: string | null;
            groupLabel?: string | null;
            groupCode?: string | null;
            initialSelected?: boolean | null;
          }> | null;
          initial?: Array<{
            __typename?: 'InitialValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            valueLocalConstant?: string | null;
            initialBehavior: InitialBehavior;
          }> | null;
          enableWhen?: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }> | null;
          autofillValues?: Array<{
            __typename?: 'AutofillValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            sumQuestions?: Array<string> | null;
            autofillBehavior: EnableBehavior;
            autofillWhen: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }>;
          }> | null;
        }> | null;
        bounds?: Array<{
          __typename?: 'ValueBound';
          id?: string | null;
          severity: ValidationSeverity;
          type: BoundType;
          question?: string | null;
          valueNumber?: number | null;
          valueDate?: string | null;
        }> | null;
        pickListOptions?: Array<{
          __typename?: 'PickListOption';
          code: string;
          label?: string | null;
          secondaryLabel?: string | null;
          groupLabel?: string | null;
          groupCode?: string | null;
          initialSelected?: boolean | null;
        }> | null;
        initial?: Array<{
          __typename?: 'InitialValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          valueLocalConstant?: string | null;
          initialBehavior: InitialBehavior;
        }> | null;
        enableWhen?: Array<{
          __typename?: 'EnableWhen';
          question: string;
          operator: EnableOperator;
          answerCode?: string | null;
          answerCodes?: Array<string> | null;
          answerNumber?: number | null;
          answerBoolean?: boolean | null;
          answerGroupCode?: string | null;
          compareQuestion?: string | null;
        }> | null;
        autofillValues?: Array<{
          __typename?: 'AutofillValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          sumQuestions?: Array<string> | null;
          autofillBehavior: EnableBehavior;
          autofillWhen: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }>;
        }> | null;
      }> | null;
      bounds?: Array<{
        __typename?: 'ValueBound';
        id?: string | null;
        severity: ValidationSeverity;
        type: BoundType;
        question?: string | null;
        valueNumber?: number | null;
        valueDate?: string | null;
      }> | null;
      pickListOptions?: Array<{
        __typename?: 'PickListOption';
        code: string;
        label?: string | null;
        secondaryLabel?: string | null;
        groupLabel?: string | null;
        groupCode?: string | null;
        initialSelected?: boolean | null;
      }> | null;
      initial?: Array<{
        __typename?: 'InitialValue';
        valueCode?: string | null;
        valueBoolean?: boolean | null;
        valueNumber?: number | null;
        valueLocalConstant?: string | null;
        initialBehavior: InitialBehavior;
      }> | null;
      enableWhen?: Array<{
        __typename?: 'EnableWhen';
        question: string;
        operator: EnableOperator;
        answerCode?: string | null;
        answerCodes?: Array<string> | null;
        answerNumber?: number | null;
        answerBoolean?: boolean | null;
        answerGroupCode?: string | null;
        compareQuestion?: string | null;
      }> | null;
      autofillValues?: Array<{
        __typename?: 'AutofillValue';
        valueCode?: string | null;
        valueBoolean?: boolean | null;
        valueNumber?: number | null;
        sumQuestions?: Array<string> | null;
        autofillBehavior: EnableBehavior;
        autofillWhen: Array<{
          __typename?: 'EnableWhen';
          question: string;
          operator: EnableOperator;
          answerCode?: string | null;
          answerCodes?: Array<string> | null;
          answerNumber?: number | null;
          answerBoolean?: boolean | null;
          answerGroupCode?: string | null;
          compareQuestion?: string | null;
        }>;
      }> | null;
    }>;
  };
};

export type CustomFormFieldsFragment = {
  __typename?: 'CustomForm';
  id: string;
};

export type UserFieldsFragment = {
  __typename: 'User';
  id: string;
  name: string;
};

export type AssessmentFieldsFragment = {
  __typename?: 'Assessment';
  id: string;
  inProgress: boolean;
  assessmentDate: string;
  dataCollectionStage?: DataCollectionStage | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
  user?: { __typename: 'User'; id: string; name: string } | null;
  customForm?: {
    __typename?: 'CustomForm';
    id: string;
    definition: {
      __typename?: 'FormDefinition';
      id: string;
      version: number;
      role: FormRole;
      status: string;
      identifier: string;
    };
  } | null;
};

export type AssessmentWithDefinitionAndValuesFragment = {
  __typename?: 'Assessment';
  id: string;
  inProgress: boolean;
  assessmentDate: string;
  dataCollectionStage?: DataCollectionStage | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
  customForm?: {
    __typename?: 'CustomForm';
    values?: any | null;
    id: string;
    definition: {
      __typename?: 'FormDefinition';
      id: string;
      version: number;
      role: FormRole;
      status: string;
      identifier: string;
      definition: {
        __typename: 'FormDefinitionJson';
        item: Array<{
          __typename: 'FormItem';
          linkId: string;
          type: ItemType;
          component?: Component | null;
          prefix?: string | null;
          text?: string | null;
          briefText?: string | null;
          helperText?: string | null;
          required?: boolean | null;
          warnIfEmpty?: boolean | null;
          hidden?: boolean | null;
          readOnly?: boolean | null;
          repeats?: boolean | null;
          fieldName?: string | null;
          recordType?: RelatedRecordType | null;
          pickListReference?: string | null;
          serviceDetailType?: ServiceDetailType | null;
          size?: InputSize | null;
          assessmentDate?: boolean | null;
          prefill?: boolean | null;
          dataCollectedAbout?: DataCollectedAbout | null;
          disabledDisplay?: DisabledDisplay | null;
          enableBehavior?: EnableBehavior | null;
          item?: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            briefText?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            warnIfEmpty?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            serviceDetailType?: ServiceDetailType | null;
            size?: InputSize | null;
            assessmentDate?: boolean | null;
            prefill?: boolean | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              briefText?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              warnIfEmpty?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              serviceDetailType?: ServiceDetailType | null;
              size?: InputSize | null;
              assessmentDate?: boolean | null;
              prefill?: boolean | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                briefText?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                warnIfEmpty?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                serviceDetailType?: ServiceDetailType | null;
                size?: InputSize | null;
                assessmentDate?: boolean | null;
                prefill?: boolean | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                item?: Array<{
                  __typename: 'FormItem';
                  linkId: string;
                  type: ItemType;
                  component?: Component | null;
                  prefix?: string | null;
                  text?: string | null;
                  briefText?: string | null;
                  helperText?: string | null;
                  required?: boolean | null;
                  warnIfEmpty?: boolean | null;
                  hidden?: boolean | null;
                  readOnly?: boolean | null;
                  repeats?: boolean | null;
                  fieldName?: string | null;
                  recordType?: RelatedRecordType | null;
                  pickListReference?: string | null;
                  serviceDetailType?: ServiceDetailType | null;
                  size?: InputSize | null;
                  assessmentDate?: boolean | null;
                  prefill?: boolean | null;
                  dataCollectedAbout?: DataCollectedAbout | null;
                  disabledDisplay?: DisabledDisplay | null;
                  enableBehavior?: EnableBehavior | null;
                  bounds?: Array<{
                    __typename?: 'ValueBound';
                    id?: string | null;
                    severity: ValidationSeverity;
                    type: BoundType;
                    question?: string | null;
                    valueNumber?: number | null;
                    valueDate?: string | null;
                  }> | null;
                  pickListOptions?: Array<{
                    __typename?: 'PickListOption';
                    code: string;
                    label?: string | null;
                    secondaryLabel?: string | null;
                    groupLabel?: string | null;
                    groupCode?: string | null;
                    initialSelected?: boolean | null;
                  }> | null;
                  initial?: Array<{
                    __typename?: 'InitialValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    valueLocalConstant?: string | null;
                    initialBehavior: InitialBehavior;
                  }> | null;
                  enableWhen?: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }> | null;
                  autofillValues?: Array<{
                    __typename?: 'AutofillValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    sumQuestions?: Array<string> | null;
                    autofillBehavior: EnableBehavior;
                    autofillWhen: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }>;
                  }> | null;
                }> | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  id?: string | null;
                  severity: ValidationSeverity;
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                  initialBehavior: InitialBehavior;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  sumQuestions?: Array<string> | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                id?: string | null;
                severity: ValidationSeverity;
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
                initialBehavior: InitialBehavior;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                sumQuestions?: Array<string> | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              id?: string | null;
              severity: ValidationSeverity;
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
              initialBehavior: InitialBehavior;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              sumQuestions?: Array<string> | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }> | null;
          bounds?: Array<{
            __typename?: 'ValueBound';
            id?: string | null;
            severity: ValidationSeverity;
            type: BoundType;
            question?: string | null;
            valueNumber?: number | null;
            valueDate?: string | null;
          }> | null;
          pickListOptions?: Array<{
            __typename?: 'PickListOption';
            code: string;
            label?: string | null;
            secondaryLabel?: string | null;
            groupLabel?: string | null;
            groupCode?: string | null;
            initialSelected?: boolean | null;
          }> | null;
          initial?: Array<{
            __typename?: 'InitialValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            valueLocalConstant?: string | null;
            initialBehavior: InitialBehavior;
          }> | null;
          enableWhen?: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }> | null;
          autofillValues?: Array<{
            __typename?: 'AutofillValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            sumQuestions?: Array<string> | null;
            autofillBehavior: EnableBehavior;
            autofillWhen: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }>;
          }> | null;
        }>;
      };
    };
  } | null;
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type AssessmentWithValuesFragment = {
  __typename?: 'Assessment';
  id: string;
  inProgress: boolean;
  assessmentDate: string;
  dataCollectionStage?: DataCollectionStage | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
  customForm?: {
    __typename?: 'CustomForm';
    values?: any | null;
    id: string;
    definition: {
      __typename?: 'FormDefinition';
      id: string;
      version: number;
      role: FormRole;
      status: string;
      identifier: string;
    };
  } | null;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
    relationshipToHoH: RelationshipToHoH;
    householdSize: number;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
    household: { __typename?: 'Household'; id: string; shortId: string };
    client: { __typename?: 'Client'; id: string };
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type GetAssessmentQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAssessmentQuery = {
  __typename?: 'Query';
  assessment?: {
    __typename?: 'Assessment';
    id: string;
    inProgress: boolean;
    assessmentDate: string;
    dataCollectionStage?: DataCollectionStage | null;
    dateCreated: string;
    dateUpdated: string;
    dateDeleted?: string | null;
    customForm?: {
      __typename?: 'CustomForm';
      values?: any | null;
      id: string;
      definition: {
        __typename?: 'FormDefinition';
        id: string;
        version: number;
        role: FormRole;
        status: string;
        identifier: string;
        definition: {
          __typename: 'FormDefinitionJson';
          item: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            briefText?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            warnIfEmpty?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            serviceDetailType?: ServiceDetailType | null;
            size?: InputSize | null;
            assessmentDate?: boolean | null;
            prefill?: boolean | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              briefText?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              warnIfEmpty?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              serviceDetailType?: ServiceDetailType | null;
              size?: InputSize | null;
              assessmentDate?: boolean | null;
              prefill?: boolean | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                briefText?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                warnIfEmpty?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                serviceDetailType?: ServiceDetailType | null;
                size?: InputSize | null;
                assessmentDate?: boolean | null;
                prefill?: boolean | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                item?: Array<{
                  __typename: 'FormItem';
                  linkId: string;
                  type: ItemType;
                  component?: Component | null;
                  prefix?: string | null;
                  text?: string | null;
                  briefText?: string | null;
                  helperText?: string | null;
                  required?: boolean | null;
                  warnIfEmpty?: boolean | null;
                  hidden?: boolean | null;
                  readOnly?: boolean | null;
                  repeats?: boolean | null;
                  fieldName?: string | null;
                  recordType?: RelatedRecordType | null;
                  pickListReference?: string | null;
                  serviceDetailType?: ServiceDetailType | null;
                  size?: InputSize | null;
                  assessmentDate?: boolean | null;
                  prefill?: boolean | null;
                  dataCollectedAbout?: DataCollectedAbout | null;
                  disabledDisplay?: DisabledDisplay | null;
                  enableBehavior?: EnableBehavior | null;
                  item?: Array<{
                    __typename: 'FormItem';
                    linkId: string;
                    type: ItemType;
                    component?: Component | null;
                    prefix?: string | null;
                    text?: string | null;
                    briefText?: string | null;
                    helperText?: string | null;
                    required?: boolean | null;
                    warnIfEmpty?: boolean | null;
                    hidden?: boolean | null;
                    readOnly?: boolean | null;
                    repeats?: boolean | null;
                    fieldName?: string | null;
                    recordType?: RelatedRecordType | null;
                    pickListReference?: string | null;
                    serviceDetailType?: ServiceDetailType | null;
                    size?: InputSize | null;
                    assessmentDate?: boolean | null;
                    prefill?: boolean | null;
                    dataCollectedAbout?: DataCollectedAbout | null;
                    disabledDisplay?: DisabledDisplay | null;
                    enableBehavior?: EnableBehavior | null;
                    bounds?: Array<{
                      __typename?: 'ValueBound';
                      id?: string | null;
                      severity: ValidationSeverity;
                      type: BoundType;
                      question?: string | null;
                      valueNumber?: number | null;
                      valueDate?: string | null;
                    }> | null;
                    pickListOptions?: Array<{
                      __typename?: 'PickListOption';
                      code: string;
                      label?: string | null;
                      secondaryLabel?: string | null;
                      groupLabel?: string | null;
                      groupCode?: string | null;
                      initialSelected?: boolean | null;
                    }> | null;
                    initial?: Array<{
                      __typename?: 'InitialValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      valueLocalConstant?: string | null;
                      initialBehavior: InitialBehavior;
                    }> | null;
                    enableWhen?: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }> | null;
                    autofillValues?: Array<{
                      __typename?: 'AutofillValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      sumQuestions?: Array<string> | null;
                      autofillBehavior: EnableBehavior;
                      autofillWhen: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }>;
                    }> | null;
                  }> | null;
                  bounds?: Array<{
                    __typename?: 'ValueBound';
                    id?: string | null;
                    severity: ValidationSeverity;
                    type: BoundType;
                    question?: string | null;
                    valueNumber?: number | null;
                    valueDate?: string | null;
                  }> | null;
                  pickListOptions?: Array<{
                    __typename?: 'PickListOption';
                    code: string;
                    label?: string | null;
                    secondaryLabel?: string | null;
                    groupLabel?: string | null;
                    groupCode?: string | null;
                    initialSelected?: boolean | null;
                  }> | null;
                  initial?: Array<{
                    __typename?: 'InitialValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    valueLocalConstant?: string | null;
                    initialBehavior: InitialBehavior;
                  }> | null;
                  enableWhen?: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }> | null;
                  autofillValues?: Array<{
                    __typename?: 'AutofillValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    sumQuestions?: Array<string> | null;
                    autofillBehavior: EnableBehavior;
                    autofillWhen: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }>;
                  }> | null;
                }> | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  id?: string | null;
                  severity: ValidationSeverity;
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                  initialBehavior: InitialBehavior;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  sumQuestions?: Array<string> | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                id?: string | null;
                severity: ValidationSeverity;
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
                initialBehavior: InitialBehavior;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                sumQuestions?: Array<string> | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              id?: string | null;
              severity: ValidationSeverity;
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
              initialBehavior: InitialBehavior;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              sumQuestions?: Array<string> | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }>;
        };
      };
    } | null;
    user?: { __typename: 'User'; id: string; name: string } | null;
  } | null;
};

export type GetPickListQueryVariables = Exact<{
  pickListType: PickListType;
  relationId?: InputMaybe<Scalars['ID']>;
}>;

export type GetPickListQuery = {
  __typename?: 'Query';
  pickList: Array<{
    __typename?: 'PickListOption';
    code: string;
    label?: string | null;
    secondaryLabel?: string | null;
    groupLabel?: string | null;
    groupCode?: string | null;
    initialSelected?: boolean | null;
  }>;
};

export type GetEnrollmentAssessmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  roles?: InputMaybe<Array<FormRole> | FormRole>;
  inProgress?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetEnrollmentAssessmentsQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    assessments: {
      __typename?: 'AssessmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Assessment';
        id: string;
        inProgress: boolean;
        assessmentDate: string;
        dataCollectionStage?: DataCollectionStage | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
        user?: { __typename: 'User'; id: string; name: string } | null;
        customForm?: {
          __typename?: 'CustomForm';
          id: string;
          definition: {
            __typename?: 'FormDefinition';
            id: string;
            version: number;
            role: FormRole;
            status: string;
            identifier: string;
          };
        } | null;
      }>;
    };
  } | null;
};

export type GetFormDefinitionQueryVariables = Exact<{
  role: FormRole;
  enrollmentId?: InputMaybe<Scalars['ID']>;
  projectId?: InputMaybe<Scalars['ID']>;
}>;

export type GetFormDefinitionQuery = {
  __typename?: 'Query';
  getFormDefinition?: {
    __typename?: 'FormDefinition';
    id: string;
    version: number;
    role: FormRole;
    status: string;
    identifier: string;
    definition: {
      __typename: 'FormDefinitionJson';
      item: Array<{
        __typename: 'FormItem';
        linkId: string;
        type: ItemType;
        component?: Component | null;
        prefix?: string | null;
        text?: string | null;
        briefText?: string | null;
        helperText?: string | null;
        required?: boolean | null;
        warnIfEmpty?: boolean | null;
        hidden?: boolean | null;
        readOnly?: boolean | null;
        repeats?: boolean | null;
        fieldName?: string | null;
        recordType?: RelatedRecordType | null;
        pickListReference?: string | null;
        serviceDetailType?: ServiceDetailType | null;
        size?: InputSize | null;
        assessmentDate?: boolean | null;
        prefill?: boolean | null;
        dataCollectedAbout?: DataCollectedAbout | null;
        disabledDisplay?: DisabledDisplay | null;
        enableBehavior?: EnableBehavior | null;
        item?: Array<{
          __typename: 'FormItem';
          linkId: string;
          type: ItemType;
          component?: Component | null;
          prefix?: string | null;
          text?: string | null;
          briefText?: string | null;
          helperText?: string | null;
          required?: boolean | null;
          warnIfEmpty?: boolean | null;
          hidden?: boolean | null;
          readOnly?: boolean | null;
          repeats?: boolean | null;
          fieldName?: string | null;
          recordType?: RelatedRecordType | null;
          pickListReference?: string | null;
          serviceDetailType?: ServiceDetailType | null;
          size?: InputSize | null;
          assessmentDate?: boolean | null;
          prefill?: boolean | null;
          dataCollectedAbout?: DataCollectedAbout | null;
          disabledDisplay?: DisabledDisplay | null;
          enableBehavior?: EnableBehavior | null;
          item?: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            briefText?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            warnIfEmpty?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            serviceDetailType?: ServiceDetailType | null;
            size?: InputSize | null;
            assessmentDate?: boolean | null;
            prefill?: boolean | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              briefText?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              warnIfEmpty?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              serviceDetailType?: ServiceDetailType | null;
              size?: InputSize | null;
              assessmentDate?: boolean | null;
              prefill?: boolean | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                briefText?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                warnIfEmpty?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                serviceDetailType?: ServiceDetailType | null;
                size?: InputSize | null;
                assessmentDate?: boolean | null;
                prefill?: boolean | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  id?: string | null;
                  severity: ValidationSeverity;
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                  initialBehavior: InitialBehavior;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  sumQuestions?: Array<string> | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                id?: string | null;
                severity: ValidationSeverity;
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
                initialBehavior: InitialBehavior;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                sumQuestions?: Array<string> | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              id?: string | null;
              severity: ValidationSeverity;
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
              initialBehavior: InitialBehavior;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              sumQuestions?: Array<string> | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }> | null;
          bounds?: Array<{
            __typename?: 'ValueBound';
            id?: string | null;
            severity: ValidationSeverity;
            type: BoundType;
            question?: string | null;
            valueNumber?: number | null;
            valueDate?: string | null;
          }> | null;
          pickListOptions?: Array<{
            __typename?: 'PickListOption';
            code: string;
            label?: string | null;
            secondaryLabel?: string | null;
            groupLabel?: string | null;
            groupCode?: string | null;
            initialSelected?: boolean | null;
          }> | null;
          initial?: Array<{
            __typename?: 'InitialValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            valueLocalConstant?: string | null;
            initialBehavior: InitialBehavior;
          }> | null;
          enableWhen?: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }> | null;
          autofillValues?: Array<{
            __typename?: 'AutofillValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            sumQuestions?: Array<string> | null;
            autofillBehavior: EnableBehavior;
            autofillWhen: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }>;
          }> | null;
        }> | null;
        bounds?: Array<{
          __typename?: 'ValueBound';
          id?: string | null;
          severity: ValidationSeverity;
          type: BoundType;
          question?: string | null;
          valueNumber?: number | null;
          valueDate?: string | null;
        }> | null;
        pickListOptions?: Array<{
          __typename?: 'PickListOption';
          code: string;
          label?: string | null;
          secondaryLabel?: string | null;
          groupLabel?: string | null;
          groupCode?: string | null;
          initialSelected?: boolean | null;
        }> | null;
        initial?: Array<{
          __typename?: 'InitialValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          valueLocalConstant?: string | null;
          initialBehavior: InitialBehavior;
        }> | null;
        enableWhen?: Array<{
          __typename?: 'EnableWhen';
          question: string;
          operator: EnableOperator;
          answerCode?: string | null;
          answerCodes?: Array<string> | null;
          answerNumber?: number | null;
          answerBoolean?: boolean | null;
          answerGroupCode?: string | null;
          compareQuestion?: string | null;
        }> | null;
        autofillValues?: Array<{
          __typename?: 'AutofillValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          sumQuestions?: Array<string> | null;
          autofillBehavior: EnableBehavior;
          autofillWhen: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }>;
        }> | null;
      }>;
    };
  } | null;
};

export type SaveAssessmentMutationVariables = Exact<{
  input: SaveAssessmentInput;
}>;

export type SaveAssessmentMutation = {
  __typename?: 'Mutation';
  saveAssessment?: {
    __typename?: 'SaveAssessmentPayload';
    assessment?: {
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
      assessmentDate: string;
      dataCollectionStage?: DataCollectionStage | null;
      dateCreated: string;
      dateUpdated: string;
      dateDeleted?: string | null;
      customForm?: {
        __typename?: 'CustomForm';
        values?: any | null;
        id: string;
        definition: {
          __typename?: 'FormDefinition';
          id: string;
          version: number;
          role: FormRole;
          status: string;
          identifier: string;
          definition: {
            __typename: 'FormDefinitionJson';
            item: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              briefText?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              warnIfEmpty?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              serviceDetailType?: ServiceDetailType | null;
              size?: InputSize | null;
              assessmentDate?: boolean | null;
              prefill?: boolean | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                briefText?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                warnIfEmpty?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                serviceDetailType?: ServiceDetailType | null;
                size?: InputSize | null;
                assessmentDate?: boolean | null;
                prefill?: boolean | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                item?: Array<{
                  __typename: 'FormItem';
                  linkId: string;
                  type: ItemType;
                  component?: Component | null;
                  prefix?: string | null;
                  text?: string | null;
                  briefText?: string | null;
                  helperText?: string | null;
                  required?: boolean | null;
                  warnIfEmpty?: boolean | null;
                  hidden?: boolean | null;
                  readOnly?: boolean | null;
                  repeats?: boolean | null;
                  fieldName?: string | null;
                  recordType?: RelatedRecordType | null;
                  pickListReference?: string | null;
                  serviceDetailType?: ServiceDetailType | null;
                  size?: InputSize | null;
                  assessmentDate?: boolean | null;
                  prefill?: boolean | null;
                  dataCollectedAbout?: DataCollectedAbout | null;
                  disabledDisplay?: DisabledDisplay | null;
                  enableBehavior?: EnableBehavior | null;
                  item?: Array<{
                    __typename: 'FormItem';
                    linkId: string;
                    type: ItemType;
                    component?: Component | null;
                    prefix?: string | null;
                    text?: string | null;
                    briefText?: string | null;
                    helperText?: string | null;
                    required?: boolean | null;
                    warnIfEmpty?: boolean | null;
                    hidden?: boolean | null;
                    readOnly?: boolean | null;
                    repeats?: boolean | null;
                    fieldName?: string | null;
                    recordType?: RelatedRecordType | null;
                    pickListReference?: string | null;
                    serviceDetailType?: ServiceDetailType | null;
                    size?: InputSize | null;
                    assessmentDate?: boolean | null;
                    prefill?: boolean | null;
                    dataCollectedAbout?: DataCollectedAbout | null;
                    disabledDisplay?: DisabledDisplay | null;
                    enableBehavior?: EnableBehavior | null;
                    item?: Array<{
                      __typename: 'FormItem';
                      linkId: string;
                      type: ItemType;
                      component?: Component | null;
                      prefix?: string | null;
                      text?: string | null;
                      briefText?: string | null;
                      helperText?: string | null;
                      required?: boolean | null;
                      warnIfEmpty?: boolean | null;
                      hidden?: boolean | null;
                      readOnly?: boolean | null;
                      repeats?: boolean | null;
                      fieldName?: string | null;
                      recordType?: RelatedRecordType | null;
                      pickListReference?: string | null;
                      serviceDetailType?: ServiceDetailType | null;
                      size?: InputSize | null;
                      assessmentDate?: boolean | null;
                      prefill?: boolean | null;
                      dataCollectedAbout?: DataCollectedAbout | null;
                      disabledDisplay?: DisabledDisplay | null;
                      enableBehavior?: EnableBehavior | null;
                      bounds?: Array<{
                        __typename?: 'ValueBound';
                        id?: string | null;
                        severity: ValidationSeverity;
                        type: BoundType;
                        question?: string | null;
                        valueNumber?: number | null;
                        valueDate?: string | null;
                      }> | null;
                      pickListOptions?: Array<{
                        __typename?: 'PickListOption';
                        code: string;
                        label?: string | null;
                        secondaryLabel?: string | null;
                        groupLabel?: string | null;
                        groupCode?: string | null;
                        initialSelected?: boolean | null;
                      }> | null;
                      initial?: Array<{
                        __typename?: 'InitialValue';
                        valueCode?: string | null;
                        valueBoolean?: boolean | null;
                        valueNumber?: number | null;
                        valueLocalConstant?: string | null;
                        initialBehavior: InitialBehavior;
                      }> | null;
                      enableWhen?: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }> | null;
                      autofillValues?: Array<{
                        __typename?: 'AutofillValue';
                        valueCode?: string | null;
                        valueBoolean?: boolean | null;
                        valueNumber?: number | null;
                        sumQuestions?: Array<string> | null;
                        autofillBehavior: EnableBehavior;
                        autofillWhen: Array<{
                          __typename?: 'EnableWhen';
                          question: string;
                          operator: EnableOperator;
                          answerCode?: string | null;
                          answerCodes?: Array<string> | null;
                          answerNumber?: number | null;
                          answerBoolean?: boolean | null;
                          answerGroupCode?: string | null;
                          compareQuestion?: string | null;
                        }>;
                      }> | null;
                    }> | null;
                    bounds?: Array<{
                      __typename?: 'ValueBound';
                      id?: string | null;
                      severity: ValidationSeverity;
                      type: BoundType;
                      question?: string | null;
                      valueNumber?: number | null;
                      valueDate?: string | null;
                    }> | null;
                    pickListOptions?: Array<{
                      __typename?: 'PickListOption';
                      code: string;
                      label?: string | null;
                      secondaryLabel?: string | null;
                      groupLabel?: string | null;
                      groupCode?: string | null;
                      initialSelected?: boolean | null;
                    }> | null;
                    initial?: Array<{
                      __typename?: 'InitialValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      valueLocalConstant?: string | null;
                      initialBehavior: InitialBehavior;
                    }> | null;
                    enableWhen?: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }> | null;
                    autofillValues?: Array<{
                      __typename?: 'AutofillValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      sumQuestions?: Array<string> | null;
                      autofillBehavior: EnableBehavior;
                      autofillWhen: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }>;
                    }> | null;
                  }> | null;
                  bounds?: Array<{
                    __typename?: 'ValueBound';
                    id?: string | null;
                    severity: ValidationSeverity;
                    type: BoundType;
                    question?: string | null;
                    valueNumber?: number | null;
                    valueDate?: string | null;
                  }> | null;
                  pickListOptions?: Array<{
                    __typename?: 'PickListOption';
                    code: string;
                    label?: string | null;
                    secondaryLabel?: string | null;
                    groupLabel?: string | null;
                    groupCode?: string | null;
                    initialSelected?: boolean | null;
                  }> | null;
                  initial?: Array<{
                    __typename?: 'InitialValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    valueLocalConstant?: string | null;
                    initialBehavior: InitialBehavior;
                  }> | null;
                  enableWhen?: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }> | null;
                  autofillValues?: Array<{
                    __typename?: 'AutofillValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    sumQuestions?: Array<string> | null;
                    autofillBehavior: EnableBehavior;
                    autofillWhen: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }>;
                  }> | null;
                }> | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  id?: string | null;
                  severity: ValidationSeverity;
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                  initialBehavior: InitialBehavior;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  sumQuestions?: Array<string> | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                id?: string | null;
                severity: ValidationSeverity;
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
                initialBehavior: InitialBehavior;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                sumQuestions?: Array<string> | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }>;
          };
        };
      } | null;
      user?: { __typename: 'User'; id: string; name: string } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type SubmitAssessmentMutationVariables = Exact<{
  input: SubmitAssessmentInput;
}>;

export type SubmitAssessmentMutation = {
  __typename?: 'Mutation';
  submitAssessment?: {
    __typename?: 'SubmitAssessmentPayload';
    assessment?: {
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
      assessmentDate: string;
      dataCollectionStage?: DataCollectionStage | null;
      dateCreated: string;
      dateUpdated: string;
      dateDeleted?: string | null;
      customForm?: {
        __typename?: 'CustomForm';
        values?: any | null;
        id: string;
        definition: {
          __typename?: 'FormDefinition';
          id: string;
          version: number;
          role: FormRole;
          status: string;
          identifier: string;
          definition: {
            __typename: 'FormDefinitionJson';
            item: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              briefText?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              warnIfEmpty?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              serviceDetailType?: ServiceDetailType | null;
              size?: InputSize | null;
              assessmentDate?: boolean | null;
              prefill?: boolean | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                briefText?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                warnIfEmpty?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                serviceDetailType?: ServiceDetailType | null;
                size?: InputSize | null;
                assessmentDate?: boolean | null;
                prefill?: boolean | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                item?: Array<{
                  __typename: 'FormItem';
                  linkId: string;
                  type: ItemType;
                  component?: Component | null;
                  prefix?: string | null;
                  text?: string | null;
                  briefText?: string | null;
                  helperText?: string | null;
                  required?: boolean | null;
                  warnIfEmpty?: boolean | null;
                  hidden?: boolean | null;
                  readOnly?: boolean | null;
                  repeats?: boolean | null;
                  fieldName?: string | null;
                  recordType?: RelatedRecordType | null;
                  pickListReference?: string | null;
                  serviceDetailType?: ServiceDetailType | null;
                  size?: InputSize | null;
                  assessmentDate?: boolean | null;
                  prefill?: boolean | null;
                  dataCollectedAbout?: DataCollectedAbout | null;
                  disabledDisplay?: DisabledDisplay | null;
                  enableBehavior?: EnableBehavior | null;
                  item?: Array<{
                    __typename: 'FormItem';
                    linkId: string;
                    type: ItemType;
                    component?: Component | null;
                    prefix?: string | null;
                    text?: string | null;
                    briefText?: string | null;
                    helperText?: string | null;
                    required?: boolean | null;
                    warnIfEmpty?: boolean | null;
                    hidden?: boolean | null;
                    readOnly?: boolean | null;
                    repeats?: boolean | null;
                    fieldName?: string | null;
                    recordType?: RelatedRecordType | null;
                    pickListReference?: string | null;
                    serviceDetailType?: ServiceDetailType | null;
                    size?: InputSize | null;
                    assessmentDate?: boolean | null;
                    prefill?: boolean | null;
                    dataCollectedAbout?: DataCollectedAbout | null;
                    disabledDisplay?: DisabledDisplay | null;
                    enableBehavior?: EnableBehavior | null;
                    item?: Array<{
                      __typename: 'FormItem';
                      linkId: string;
                      type: ItemType;
                      component?: Component | null;
                      prefix?: string | null;
                      text?: string | null;
                      briefText?: string | null;
                      helperText?: string | null;
                      required?: boolean | null;
                      warnIfEmpty?: boolean | null;
                      hidden?: boolean | null;
                      readOnly?: boolean | null;
                      repeats?: boolean | null;
                      fieldName?: string | null;
                      recordType?: RelatedRecordType | null;
                      pickListReference?: string | null;
                      serviceDetailType?: ServiceDetailType | null;
                      size?: InputSize | null;
                      assessmentDate?: boolean | null;
                      prefill?: boolean | null;
                      dataCollectedAbout?: DataCollectedAbout | null;
                      disabledDisplay?: DisabledDisplay | null;
                      enableBehavior?: EnableBehavior | null;
                      bounds?: Array<{
                        __typename?: 'ValueBound';
                        id?: string | null;
                        severity: ValidationSeverity;
                        type: BoundType;
                        question?: string | null;
                        valueNumber?: number | null;
                        valueDate?: string | null;
                      }> | null;
                      pickListOptions?: Array<{
                        __typename?: 'PickListOption';
                        code: string;
                        label?: string | null;
                        secondaryLabel?: string | null;
                        groupLabel?: string | null;
                        groupCode?: string | null;
                        initialSelected?: boolean | null;
                      }> | null;
                      initial?: Array<{
                        __typename?: 'InitialValue';
                        valueCode?: string | null;
                        valueBoolean?: boolean | null;
                        valueNumber?: number | null;
                        valueLocalConstant?: string | null;
                        initialBehavior: InitialBehavior;
                      }> | null;
                      enableWhen?: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }> | null;
                      autofillValues?: Array<{
                        __typename?: 'AutofillValue';
                        valueCode?: string | null;
                        valueBoolean?: boolean | null;
                        valueNumber?: number | null;
                        sumQuestions?: Array<string> | null;
                        autofillBehavior: EnableBehavior;
                        autofillWhen: Array<{
                          __typename?: 'EnableWhen';
                          question: string;
                          operator: EnableOperator;
                          answerCode?: string | null;
                          answerCodes?: Array<string> | null;
                          answerNumber?: number | null;
                          answerBoolean?: boolean | null;
                          answerGroupCode?: string | null;
                          compareQuestion?: string | null;
                        }>;
                      }> | null;
                    }> | null;
                    bounds?: Array<{
                      __typename?: 'ValueBound';
                      id?: string | null;
                      severity: ValidationSeverity;
                      type: BoundType;
                      question?: string | null;
                      valueNumber?: number | null;
                      valueDate?: string | null;
                    }> | null;
                    pickListOptions?: Array<{
                      __typename?: 'PickListOption';
                      code: string;
                      label?: string | null;
                      secondaryLabel?: string | null;
                      groupLabel?: string | null;
                      groupCode?: string | null;
                      initialSelected?: boolean | null;
                    }> | null;
                    initial?: Array<{
                      __typename?: 'InitialValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      valueLocalConstant?: string | null;
                      initialBehavior: InitialBehavior;
                    }> | null;
                    enableWhen?: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }> | null;
                    autofillValues?: Array<{
                      __typename?: 'AutofillValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      sumQuestions?: Array<string> | null;
                      autofillBehavior: EnableBehavior;
                      autofillWhen: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }>;
                    }> | null;
                  }> | null;
                  bounds?: Array<{
                    __typename?: 'ValueBound';
                    id?: string | null;
                    severity: ValidationSeverity;
                    type: BoundType;
                    question?: string | null;
                    valueNumber?: number | null;
                    valueDate?: string | null;
                  }> | null;
                  pickListOptions?: Array<{
                    __typename?: 'PickListOption';
                    code: string;
                    label?: string | null;
                    secondaryLabel?: string | null;
                    groupLabel?: string | null;
                    groupCode?: string | null;
                    initialSelected?: boolean | null;
                  }> | null;
                  initial?: Array<{
                    __typename?: 'InitialValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    valueLocalConstant?: string | null;
                    initialBehavior: InitialBehavior;
                  }> | null;
                  enableWhen?: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }> | null;
                  autofillValues?: Array<{
                    __typename?: 'AutofillValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    sumQuestions?: Array<string> | null;
                    autofillBehavior: EnableBehavior;
                    autofillWhen: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }>;
                  }> | null;
                }> | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  id?: string | null;
                  severity: ValidationSeverity;
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                  initialBehavior: InitialBehavior;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  sumQuestions?: Array<string> | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                id?: string | null;
                severity: ValidationSeverity;
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
                initialBehavior: InitialBehavior;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                sumQuestions?: Array<string> | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }>;
          };
        };
      } | null;
      user?: { __typename: 'User'; id: string; name: string } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type SubmitHouseholdAssessmentsMutationVariables = Exact<{
  input: SubmitHouseholdAssessmentsInput;
}>;

export type SubmitHouseholdAssessmentsMutation = {
  __typename?: 'Mutation';
  submitHouseholdAssessments?: {
    __typename?: 'SubmitHouseholdAssessmentsPayload';
    assessments?: Array<{
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
    }> | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type GetAssessmentsForPopulationQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  roles?: InputMaybe<Array<FormRole> | FormRole>;
  inProgress?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetAssessmentsForPopulationQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    assessments: {
      __typename?: 'AssessmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Assessment';
        id: string;
        inProgress: boolean;
        assessmentDate: string;
        dataCollectionStage?: DataCollectionStage | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
        customForm?: {
          __typename?: 'CustomForm';
          values?: any | null;
          id: string;
          definition: {
            __typename?: 'FormDefinition';
            id: string;
            version: number;
            role: FormRole;
            status: string;
            identifier: string;
          };
        } | null;
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          entryDate: string;
          exitDate?: string | null;
          inProgress: boolean;
          relationshipToHoH: RelationshipToHoH;
          householdSize: number;
          project: {
            __typename?: 'Project';
            id: string;
            projectName: string;
            projectType?: ProjectType | null;
          };
          household: { __typename?: 'Household'; id: string; shortId: string };
          client: { __typename?: 'Client'; id: string };
        };
        user?: { __typename: 'User'; id: string; name: string } | null;
      }>;
    };
  } | null;
};

export type DeleteAssessmentMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteAssessmentMutation = {
  __typename?: 'Mutation';
  deleteAssessment?: {
    __typename?: 'DeleteAssessmentPayload';
    clientMutationId?: string | null;
    assessment?: {
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
      assessmentDate: string;
      dataCollectionStage?: DataCollectionStage | null;
      dateCreated: string;
      dateUpdated: string;
      dateDeleted?: string | null;
      user?: { __typename: 'User'; id: string; name: string } | null;
      customForm?: {
        __typename?: 'CustomForm';
        id: string;
        definition: {
          __typename?: 'FormDefinition';
          id: string;
          version: number;
          role: FormRole;
          status: string;
          identifier: string;
        };
      } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type SubmitFormMutationVariables = Exact<{
  input: SubmitFormInput;
}>;

export type SubmitFormMutation = {
  __typename?: 'Mutation';
  submitForm?: {
    __typename?: 'SubmitFormPayload';
    clientMutationId?: string | null;
    record?:
      | {
          __typename?: 'Client';
          dobDataQuality: DobDataQuality;
          ethnicity: Ethnicity;
          gender: Array<Gender>;
          pronouns: Array<string>;
          nameDataQuality: NameDataQuality;
          personalId: string;
          race: Array<Race>;
          ssnDataQuality: SsnDataQuality;
          veteranStatus: NoYesReasonsForMissingData;
          dateCreated: string;
          dateDeleted?: string | null;
          dateUpdated: string;
          warehouseUrl: string;
          id: string;
          dob?: string | null;
          age?: number | null;
          ssn?: string | null;
          firstName?: string | null;
          middleName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
          user?: { __typename: 'User'; id: string; name: string } | null;
          access: {
            __typename?: 'ClientAccess';
            id: string;
            canViewFullSsn: boolean;
            canViewPartialSsn: boolean;
          };
          image?: {
            __typename?: 'ClientImage';
            id: string;
            contentType: string;
            base64: string;
          } | null;
        }
      | {
          __typename?: 'File';
          confidential?: boolean | null;
          contentType: string;
          createdAt: string;
          effectiveDate?: string | null;
          expirationDate?: string | null;
          id: string;
          name: string;
          fileBlobId: string;
          updatedAt: string;
          url: string;
          tags: Array<string>;
          ownFile: boolean;
          enrollmentId?: string | null;
          enrollment?: { __typename?: 'Enrollment'; id: string } | null;
          updatedBy?: {
            __typename?: 'ApplicationUser';
            id: string;
            name: string;
          } | null;
        }
      | {
          __typename?: 'Funder';
          dateCreated: string;
          dateDeleted?: string | null;
          dateUpdated: string;
          endDate?: string | null;
          funder: FundingSource;
          grantId: string;
          id: string;
          otherFunder?: string | null;
          startDate: string;
        }
      | {
          __typename?: 'Inventory';
          availability?: Availability | null;
          bedInventory: number;
          cocCode: string;
          dateCreated: string;
          dateDeleted?: string | null;
          dateUpdated: string;
          esBedType?: BedType | null;
          householdType: HouseholdType;
          id: string;
          inventoryEndDate?: string | null;
          inventoryStartDate: string;
          unitInventory: number;
          beds: { __typename?: 'BedsPaginated'; nodesCount: number };
          units: { __typename?: 'UnitsPaginated'; nodesCount: number };
        }
      | {
          __typename?: 'Organization';
          id: string;
          organizationName: string;
          description?: string | null;
          contactInformation?: string | null;
          victimServiceProvider: NoYesMissing;
        }
      | {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
          HMISParticipatingProject?: NoYesMissing | null;
          HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
          contactInformation?: string | null;
          continuumProject?: NoYesMissing | null;
          description?: string | null;
          housingType?: HousingType | null;
          operatingEndDate?: string | null;
          operatingStartDate: string;
          residentialAffiliation?: NoYesMissing | null;
          targetPopulation?: TargetPopulation | null;
          trackingMethod?: TrackingMethod | null;
          organization: {
            __typename?: 'Organization';
            id: string;
            organizationName: string;
          };
        }
      | {
          __typename?: 'ProjectCoc';
          address1?: string | null;
          address2?: string | null;
          city?: string | null;
          cocCode: string;
          dateCreated: string;
          dateDeleted?: string | null;
          dateUpdated: string;
          geocode: string;
          geographyType?: GeographyType | null;
          id: string;
          state?: string | null;
          zip?: string | null;
        }
      | {
          __typename?: 'Service';
          id: string;
          dateProvided: string;
          movingOnOtherType?: string | null;
          recordType?: RecordType | null;
          referralOutcome?: PathReferralOutcome | null;
          subTypeProvided?: ServiceSubTypeProvided | null;
          typeProvided?: ServiceTypeProvided | null;
          otherTypeProvided?: string | null;
          FAAmount?: number | null;
          dateCreated: string;
          dateUpdated: string;
          dateDeleted?: string | null;
        }
      | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type ValidationErrorFieldsFragment = {
  __typename?: 'ValidationError';
  type: ValidationType;
  attribute: string;
  readableAttribute?: string | null;
  message: string;
  fullMessage: string;
  severity: ValidationSeverity;
  id?: string | null;
  recordId?: string | null;
  linkId?: string | null;
  section?: string | null;
};

export type ClientNameFragment = {
  __typename?: 'Client';
  firstName?: string | null;
  middleName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
};

export type ClientAccessFieldsFragment = {
  __typename?: 'ClientAccess';
  id: string;
  canViewDob: boolean;
  canViewFullSsn: boolean;
  canViewPartialSsn: boolean;
  canEditEnrollments: boolean;
  canDeleteEnrollments: boolean;
  canViewEnrollmentDetails: boolean;
  canManageAnyClientFiles: boolean;
  canManageOwnClientFiles: boolean;
  canViewAnyConfidentialClientFiles: boolean;
  canViewAnyNonconfidentialClientFiles: boolean;
};

export type ClientPermissionsFragment = {
  __typename?: 'Client';
  id: string;
  access: {
    __typename?: 'ClientAccess';
    id: string;
    canViewDob: boolean;
    canViewFullSsn: boolean;
    canViewPartialSsn: boolean;
    canEditEnrollments: boolean;
    canDeleteEnrollments: boolean;
    canViewEnrollmentDetails: boolean;
    canManageAnyClientFiles: boolean;
    canManageOwnClientFiles: boolean;
    canViewAnyConfidentialClientFiles: boolean;
    canViewAnyNonconfidentialClientFiles: boolean;
  };
};

export type ClientImageFragment = {
  __typename?: 'Client';
  id: string;
  image?: {
    __typename?: 'ClientImage';
    id: string;
    contentType: string;
    base64: string;
  } | null;
};

export type ClientIdentificationFieldsFragment = {
  __typename?: 'Client';
  id: string;
  dob?: string | null;
  age?: number | null;
  ssn?: string | null;
  access: {
    __typename?: 'ClientAccess';
    id: string;
    canViewFullSsn: boolean;
    canViewPartialSsn: boolean;
  };
};

export type ClientFieldsFragment = {
  __typename?: 'Client';
  dobDataQuality: DobDataQuality;
  ethnicity: Ethnicity;
  gender: Array<Gender>;
  pronouns: Array<string>;
  nameDataQuality: NameDataQuality;
  personalId: string;
  race: Array<Race>;
  ssnDataQuality: SsnDataQuality;
  veteranStatus: NoYesReasonsForMissingData;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  warehouseUrl: string;
  id: string;
  dob?: string | null;
  age?: number | null;
  ssn?: string | null;
  firstName?: string | null;
  middleName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
  user?: { __typename: 'User'; id: string; name: string } | null;
  access: {
    __typename?: 'ClientAccess';
    id: string;
    canViewFullSsn: boolean;
    canViewPartialSsn: boolean;
  };
  image?: {
    __typename?: 'ClientImage';
    id: string;
    contentType: string;
    base64: string;
  } | null;
};

export type ClientImageFieldsFragment = {
  __typename?: 'ClientImage';
  id: string;
  contentType: string;
  base64: string;
};

export type ClientOmniSearchFieldsFragment = {
  __typename?: 'Client';
  id: string;
  dob?: string | null;
  age?: number | null;
  gender: Array<Gender>;
  personalId: string;
  firstName?: string | null;
  middleName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
};

export type HouseholdClientFieldsFragment = {
  __typename?: 'HouseholdClient';
  id: string;
  relationshipToHoH: RelationshipToHoH;
  client: {
    __typename?: 'Client';
    id: string;
    veteranStatus: NoYesReasonsForMissingData;
    firstName?: string | null;
    middleName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
    dob?: string | null;
    age?: number | null;
    ssn?: string | null;
    access: {
      __typename?: 'ClientAccess';
      id: string;
      canViewFullSsn: boolean;
      canViewPartialSsn: boolean;
      canViewDob: boolean;
      canEditEnrollments: boolean;
      canDeleteEnrollments: boolean;
      canViewEnrollmentDetails: boolean;
      canManageAnyClientFiles: boolean;
      canManageOwnClientFiles: boolean;
      canViewAnyConfidentialClientFiles: boolean;
      canViewAnyNonconfidentialClientFiles: boolean;
    };
  };
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
  };
};

export type HouseholdClientFieldsWithAssessmentsFragment = {
  __typename?: 'HouseholdClient';
  id: string;
  relationshipToHoH: RelationshipToHoH;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
    intakeAssessment?: {
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
      assessmentDate: string;
    } | null;
    exitAssessment?: {
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
      assessmentDate: string;
    } | null;
  };
  client: {
    __typename?: 'Client';
    id: string;
    veteranStatus: NoYesReasonsForMissingData;
    firstName?: string | null;
    middleName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
    dob?: string | null;
    age?: number | null;
    ssn?: string | null;
    access: {
      __typename?: 'ClientAccess';
      id: string;
      canViewFullSsn: boolean;
      canViewPartialSsn: boolean;
      canViewDob: boolean;
      canEditEnrollments: boolean;
      canDeleteEnrollments: boolean;
      canViewEnrollmentDetails: boolean;
      canManageAnyClientFiles: boolean;
      canManageOwnClientFiles: boolean;
      canViewAnyConfidentialClientFiles: boolean;
      canViewAnyNonconfidentialClientFiles: boolean;
    };
  };
};

export type EnrollmentFieldsFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate: string;
  exitDate?: string | null;
  inProgress: boolean;
  relationshipToHoH: RelationshipToHoH;
  householdSize: number;
  project: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
  };
  household: { __typename?: 'Household'; id: string; shortId: string };
  client: { __typename?: 'Client'; id: string };
};

export type EnrollmentFieldsFromAssessmentFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate: string;
  exitDate?: string | null;
  livingSituation?: LivingSituation | null;
  lengthOfStay?: ResidencePriorLengthOfStay | null;
  previousStreetEssh?: NoYesMissing | null;
  dateToStreetEssh?: string | null;
  timesHomelessPastThreeYears?: TimesHomelessPastThreeYears | null;
  monthsHomelessPastThreeYears?: MonthsHomelessPastThreeYears | null;
  intakeAssessment?: {
    __typename?: 'Assessment';
    user?: { __typename?: 'User'; name: string } | null;
  } | null;
  project: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type EnrollmentWithHouseholdFragmentFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate: string;
  exitDate?: string | null;
  inProgress: boolean;
  relationshipToHoH: RelationshipToHoH;
  householdSize: number;
  household: {
    __typename?: 'Household';
    id: string;
    shortId: string;
    householdClients: Array<{
      __typename?: 'HouseholdClient';
      id: string;
      relationshipToHoH: RelationshipToHoH;
      client: {
        __typename?: 'Client';
        id: string;
        veteranStatus: NoYesReasonsForMissingData;
        firstName?: string | null;
        middleName?: string | null;
        preferredName?: string | null;
        lastName?: string | null;
        nameSuffix?: string | null;
        dob?: string | null;
        age?: number | null;
        ssn?: string | null;
        access: {
          __typename?: 'ClientAccess';
          id: string;
          canViewFullSsn: boolean;
          canViewPartialSsn: boolean;
          canViewDob: boolean;
          canEditEnrollments: boolean;
          canDeleteEnrollments: boolean;
          canViewEnrollmentDetails: boolean;
          canManageAnyClientFiles: boolean;
          canManageOwnClientFiles: boolean;
          canViewAnyConfidentialClientFiles: boolean;
          canViewAnyNonconfidentialClientFiles: boolean;
        };
      };
      enrollment: {
        __typename?: 'Enrollment';
        id: string;
        entryDate: string;
        exitDate?: string | null;
        inProgress: boolean;
      };
    }>;
  };
  project: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
  };
  client: { __typename?: 'Client'; id: string };
};

export type EventFieldsFragment = {
  __typename?: 'Event';
  id: string;
  event: EventType;
  eventDate: string;
  locationCrisisOrPhHousing?: string | null;
  probSolDivRrResult?: NoYesMissing | null;
  referralCaseManageAfter?: NoYesMissing | null;
  referralResult?: ReferralResult | null;
  resultDate?: string | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
};

export type ServiceFieldsFragment = {
  __typename?: 'Service';
  id: string;
  dateProvided: string;
  movingOnOtherType?: string | null;
  recordType?: RecordType | null;
  referralOutcome?: PathReferralOutcome | null;
  subTypeProvided?: ServiceSubTypeProvided | null;
  typeProvided?: ServiceTypeProvided | null;
  otherTypeProvided?: string | null;
  FAAmount?: number | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
};

export type IncomeBenefitFieldsFragment = {
  __typename: 'IncomeBenefit';
  adap?: NoYesReasonsForMissingData | null;
  alimony?: NoYesMissing | null;
  alimonyAmount?: number | null;
  benefitsFromAnySource?: NoYesReasonsForMissingData | null;
  childSupport?: NoYesMissing | null;
  childSupportAmount?: number | null;
  cobra?: NoYesMissing | null;
  connectionWithSoar?: NoYesReasonsForMissingData | null;
  dataCollectionStage: DataCollectionStage;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  earned?: NoYesMissing | null;
  earnedAmount?: number | null;
  employerProvided?: NoYesMissing | null;
  ga?: NoYesMissing | null;
  gaAmount?: number | null;
  hivaidsAssistance?: NoYesReasonsForMissingData | null;
  id: string;
  incomeFromAnySource?: NoYesReasonsForMissingData | null;
  indianHealthServices?: NoYesMissing | null;
  informationDate: string;
  insuranceFromAnySource?: NoYesReasonsForMissingData | null;
  medicaid?: NoYesMissing | null;
  medicare?: NoYesMissing | null;
  noAdapReason?: NoAssistanceReason | null;
  noCobraReason?: ReasonNotInsured | null;
  noEmployerProvidedReason?: ReasonNotInsured | null;
  noHivaidsAssistanceReason?: NoAssistanceReason | null;
  noIndianHealthServicesReason?: ReasonNotInsured | null;
  noMedicaidReason?: ReasonNotInsured | null;
  noMedicareReason?: ReasonNotInsured | null;
  noPrivatePayReason?: ReasonNotInsured | null;
  noRyanWhiteReason?: NoAssistanceReason | null;
  noSchipReason?: ReasonNotInsured | null;
  noStateHealthInsReason?: ReasonNotInsured | null;
  noVaMedReason?: ReasonNotInsured | null;
  otherBenefitsSource?: NoYesMissing | null;
  otherBenefitsSourceIdentify?: string | null;
  otherIncomeAmount?: number | null;
  otherIncomeSource?: NoYesMissing | null;
  otherIncomeSourceIdentify?: string | null;
  otherInsurance?: NoYesMissing | null;
  otherInsuranceIdentify?: string | null;
  otherTanf?: NoYesMissing | null;
  pension?: NoYesMissing | null;
  pensionAmount?: number | null;
  privateDisability?: NoYesMissing | null;
  privateDisabilityAmount?: number | null;
  privatePay?: NoYesMissing | null;
  ryanWhiteMedDent?: NoYesReasonsForMissingData | null;
  schip?: NoYesMissing | null;
  snap?: NoYesMissing | null;
  socSecRetirement?: NoYesMissing | null;
  socSecRetirementAmount?: number | null;
  ssdi?: NoYesMissing | null;
  ssdiAmount?: number | null;
  ssi?: NoYesMissing | null;
  ssiAmount?: number | null;
  stateHealthIns?: NoYesMissing | null;
  tanf?: NoYesMissing | null;
  tanfAmount?: number | null;
  tanfChildCare?: NoYesMissing | null;
  tanfTransportation?: NoYesMissing | null;
  totalMonthlyIncome?: string | null;
  unemployment?: NoYesMissing | null;
  unemploymentAmount?: number | null;
  vaDisabilityNonService?: NoYesMissing | null;
  vaDisabilityNonServiceAmount?: number | null;
  vaDisabilityService?: NoYesMissing | null;
  vaDisabilityServiceAmount?: number | null;
  vaMedicalServices?: NoYesMissing | null;
  wic?: NoYesMissing | null;
  workersComp?: NoYesMissing | null;
  workersCompAmount?: number | null;
  user?: { __typename: 'User'; id: string; name: string } | null;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
  };
};

export type DisabilityGroupFieldsFragment = {
  __typename: 'DisabilityGroup';
  id: string;
  dataCollectionStage: DataCollectionStage;
  informationDate: string;
  disablingCondition: NoYesReasonsForMissingData;
  chronicHealthCondition?: NoYesReasonsForMissingData | null;
  chronicHealthConditionIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  developmentalDisability?: NoYesReasonsForMissingData | null;
  hivAids?: NoYesReasonsForMissingData | null;
  mentalHealthDisorder?: NoYesReasonsForMissingData | null;
  mentalHealthDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  physicalDisability?: NoYesReasonsForMissingData | null;
  physicalDisabilityIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  substanceUseDisorder?: DisabilityResponse | null;
  substanceUseDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  dateCreated?: string | null;
  dateUpdated?: string | null;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type HealthAndDvFieldsFragment = {
  __typename: 'HealthAndDv';
  bounceBack?: WellbeingAgreement | null;
  currentlyFleeing?: NoYesReasonsForMissingData | null;
  dataCollectionStage: DataCollectionStage;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  dentalHealthStatus?: HealthStatus | null;
  domesticViolenceVictim?: NoYesReasonsForMissingData | null;
  dueDate?: string | null;
  feelingFrequency?: FeelingFrequency | null;
  generalHealthStatus?: HealthStatus | null;
  id: string;
  informationDate: string;
  lifeValue?: WellbeingAgreement | null;
  mentalHealthStatus?: HealthStatus | null;
  pregnancyStatus?: NoYesReasonsForMissingData | null;
  supportFromOthers?: WellbeingAgreement | null;
  whenOccurred?: WhenDvOccurred | null;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type FileFieldsFragment = {
  __typename?: 'File';
  confidential?: boolean | null;
  contentType: string;
  createdAt: string;
  effectiveDate?: string | null;
  expirationDate?: string | null;
  id: string;
  name: string;
  fileBlobId: string;
  updatedAt: string;
  url: string;
  tags: Array<string>;
  ownFile: boolean;
  enrollmentId?: string | null;
  enrollment?: { __typename?: 'Enrollment'; id: string } | null;
  updatedBy?: {
    __typename?: 'ApplicationUser';
    id: string;
    name: string;
  } | null;
};

export type ClientAuditEventFieldsFragment = {
  __typename?: 'ClientAuditEvent';
  id: string;
  createdAt: string;
  event: AuditEventType;
  objectChanges?: any | null;
  item: { __typename?: 'Client'; id: string };
  user?: { __typename?: 'ApplicationUser'; id: string; name: string } | null;
};

export type SearchClientsQueryVariables = Exact<{
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ClientSortOption>;
}>;

export type SearchClientsQuery = {
  __typename?: 'Query';
  clientSearch: {
    __typename?: 'ClientsPaginated';
    offset: number;
    limit: number;
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Client';
      dobDataQuality: DobDataQuality;
      ethnicity: Ethnicity;
      gender: Array<Gender>;
      pronouns: Array<string>;
      nameDataQuality: NameDataQuality;
      personalId: string;
      race: Array<Race>;
      ssnDataQuality: SsnDataQuality;
      veteranStatus: NoYesReasonsForMissingData;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      warehouseUrl: string;
      id: string;
      dob?: string | null;
      age?: number | null;
      ssn?: string | null;
      firstName?: string | null;
      middleName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
      user?: { __typename: 'User'; id: string; name: string } | null;
      access: {
        __typename?: 'ClientAccess';
        id: string;
        canViewFullSsn: boolean;
        canViewPartialSsn: boolean;
      };
      image?: {
        __typename?: 'ClientImage';
        id: string;
        contentType: string;
        base64: string;
      } | null;
    }>;
  };
};

export type GetClientQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetClientQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    dobDataQuality: DobDataQuality;
    ethnicity: Ethnicity;
    gender: Array<Gender>;
    pronouns: Array<string>;
    nameDataQuality: NameDataQuality;
    personalId: string;
    race: Array<Race>;
    ssnDataQuality: SsnDataQuality;
    veteranStatus: NoYesReasonsForMissingData;
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    warehouseUrl: string;
    id: string;
    dob?: string | null;
    age?: number | null;
    ssn?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
    user?: { __typename: 'User'; id: string; name: string } | null;
    access: {
      __typename?: 'ClientAccess';
      id: string;
      canViewFullSsn: boolean;
      canViewPartialSsn: boolean;
      canViewDob: boolean;
      canEditEnrollments: boolean;
      canDeleteEnrollments: boolean;
      canViewEnrollmentDetails: boolean;
      canManageAnyClientFiles: boolean;
      canManageOwnClientFiles: boolean;
      canViewAnyConfidentialClientFiles: boolean;
      canViewAnyNonconfidentialClientFiles: boolean;
    };
    image?: {
      __typename?: 'ClientImage';
      id: string;
      contentType: string;
      base64: string;
    } | null;
  } | null;
};

export type GetClientNameQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetClientNameQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    firstName?: string | null;
    middleName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
  } | null;
};

export type GetClientPermissionsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetClientPermissionsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    access: {
      __typename?: 'ClientAccess';
      id: string;
      canViewDob: boolean;
      canViewFullSsn: boolean;
      canViewPartialSsn: boolean;
      canEditEnrollments: boolean;
      canDeleteEnrollments: boolean;
      canViewEnrollmentDetails: boolean;
      canManageAnyClientFiles: boolean;
      canManageOwnClientFiles: boolean;
      canViewAnyConfidentialClientFiles: boolean;
      canViewAnyNonconfidentialClientFiles: boolean;
    };
  } | null;
};

export type GetClientImageQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetClientImageQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    image?: {
      __typename?: 'ClientImage';
      id: string;
      contentType: string;
      base64: string;
    } | null;
  } | null;
};

export type GetClientEnrollmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientEnrollmentsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        id: string;
        entryDate: string;
        exitDate?: string | null;
        inProgress: boolean;
        relationshipToHoH: RelationshipToHoH;
        householdSize: number;
        project: {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        };
        household: { __typename?: 'Household'; id: string; shortId: string };
        client: { __typename?: 'Client'; id: string };
      }>;
    };
  } | null;
};

export type GetClientAuditEventsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientAuditEventsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    auditHistory: {
      __typename?: 'ClientAuditEventsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'ClientAuditEvent';
        id: string;
        createdAt: string;
        event: AuditEventType;
        objectChanges?: any | null;
        item: { __typename?: 'Client'; id: string };
        user?: {
          __typename?: 'ApplicationUser';
          id: string;
          name: string;
        } | null;
      }>;
    };
  } | null;
};

export type GetClientAssessmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientAssessmentsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    assessments: {
      __typename?: 'AssessmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Assessment';
        id: string;
        inProgress: boolean;
        assessmentDate: string;
        dataCollectionStage?: DataCollectionStage | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          entryDate: string;
          exitDate?: string | null;
          inProgress: boolean;
          relationshipToHoH: RelationshipToHoH;
          householdSize: number;
          project: {
            __typename?: 'Project';
            id: string;
            projectName: string;
            projectType?: ProjectType | null;
          };
          household: { __typename?: 'Household'; id: string; shortId: string };
          client: { __typename?: 'Client'; id: string };
        };
        user?: { __typename: 'User'; id: string; name: string } | null;
        customForm?: {
          __typename?: 'CustomForm';
          id: string;
          definition: {
            __typename?: 'FormDefinition';
            id: string;
            version: number;
            role: FormRole;
            status: string;
            identifier: string;
          };
        } | null;
      }>;
    };
  } | null;
};

export type GetRecentEnrollmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetRecentEnrollmentsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        id: string;
        entryDate: string;
        exitDate?: string | null;
        livingSituation?: LivingSituation | null;
        lengthOfStay?: ResidencePriorLengthOfStay | null;
        previousStreetEssh?: NoYesMissing | null;
        dateToStreetEssh?: string | null;
        timesHomelessPastThreeYears?: TimesHomelessPastThreeYears | null;
        monthsHomelessPastThreeYears?: MonthsHomelessPastThreeYears | null;
        intakeAssessment?: {
          __typename?: 'Assessment';
          user?: { __typename?: 'User'; name: string } | null;
        } | null;
        project: {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        };
        user?: { __typename: 'User'; id: string; name: string } | null;
      }>;
    };
  } | null;
};

export type UpdateClientImageMutationVariables = Exact<{
  clientId: Scalars['ID'];
  imageBlobId: Scalars['ID'];
}>;

export type UpdateClientImageMutation = {
  __typename?: 'Mutation';
  updateClientImage?: {
    __typename?: 'UpdateClientImagePayload';
    clientMutationId?: string | null;
    client?: {
      __typename?: 'Client';
      id: string;
      image?: {
        __typename?: 'ClientImage';
        id: string;
        contentType: string;
        base64: string;
      } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteClientImageMutationVariables = Exact<{
  clientId: Scalars['ID'];
}>;

export type DeleteClientImageMutation = {
  __typename?: 'Mutation';
  deleteClientImage?: {
    __typename?: 'DeleteClientImagePayload';
    clientMutationId?: string | null;
    client?: {
      __typename?: 'Client';
      id: string;
      image?: {
        __typename?: 'ClientImage';
        id: string;
        contentType: string;
        base64: string;
      } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type CreateEnrollmentMutationVariables = Exact<{
  input: CreateEnrollmentInput;
}>;

export type CreateEnrollmentMutation = {
  __typename?: 'Mutation';
  createEnrollment?: {
    __typename?: 'CreateEnrollmentPayload';
    clientMutationId?: string | null;
    enrollments?: Array<{
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      relationshipToHoH: RelationshipToHoH;
      householdSize: number;
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      household: { __typename?: 'Household'; id: string; shortId: string };
      client: { __typename?: 'Client'; id: string };
    }> | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type UpdateEnrollmentMutationVariables = Exact<{
  input: UpdateEnrollmentInput;
}>;

export type UpdateEnrollmentMutation = {
  __typename?: 'Mutation';
  updateEnrollment?: {
    __typename?: 'UpdateEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      relationshipToHoH: RelationshipToHoH;
      householdSize: number;
      household: {
        __typename?: 'Household';
        id: string;
        shortId: string;
        householdClients: Array<{
          __typename?: 'HouseholdClient';
          id: string;
          relationshipToHoH: RelationshipToHoH;
          client: {
            __typename?: 'Client';
            id: string;
            veteranStatus: NoYesReasonsForMissingData;
            firstName?: string | null;
            middleName?: string | null;
            preferredName?: string | null;
            lastName?: string | null;
            nameSuffix?: string | null;
            dob?: string | null;
            age?: number | null;
            ssn?: string | null;
            access: {
              __typename?: 'ClientAccess';
              id: string;
              canViewFullSsn: boolean;
              canViewPartialSsn: boolean;
              canViewDob: boolean;
              canEditEnrollments: boolean;
              canDeleteEnrollments: boolean;
              canViewEnrollmentDetails: boolean;
              canManageAnyClientFiles: boolean;
              canManageOwnClientFiles: boolean;
              canViewAnyConfidentialClientFiles: boolean;
              canViewAnyNonconfidentialClientFiles: boolean;
            };
          };
          enrollment: {
            __typename?: 'Enrollment';
            id: string;
            entryDate: string;
            exitDate?: string | null;
            inProgress: boolean;
          };
        }>;
      };
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type SetHoHMutationVariables = Exact<{
  input: SetHoHForEnrollmentInput;
}>;

export type SetHoHMutation = {
  __typename?: 'Mutation';
  setHoHForEnrollment?: {
    __typename?: 'SetHoHForEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      relationshipToHoH: RelationshipToHoH;
      householdSize: number;
      household: {
        __typename?: 'Household';
        id: string;
        shortId: string;
        householdClients: Array<{
          __typename?: 'HouseholdClient';
          id: string;
          relationshipToHoH: RelationshipToHoH;
          client: {
            __typename?: 'Client';
            id: string;
            veteranStatus: NoYesReasonsForMissingData;
            firstName?: string | null;
            middleName?: string | null;
            preferredName?: string | null;
            lastName?: string | null;
            nameSuffix?: string | null;
            dob?: string | null;
            age?: number | null;
            ssn?: string | null;
            access: {
              __typename?: 'ClientAccess';
              id: string;
              canViewFullSsn: boolean;
              canViewPartialSsn: boolean;
              canViewDob: boolean;
              canEditEnrollments: boolean;
              canDeleteEnrollments: boolean;
              canViewEnrollmentDetails: boolean;
              canManageAnyClientFiles: boolean;
              canManageOwnClientFiles: boolean;
              canViewAnyConfidentialClientFiles: boolean;
              canViewAnyNonconfidentialClientFiles: boolean;
            };
          };
          enrollment: {
            __typename?: 'Enrollment';
            id: string;
            entryDate: string;
            exitDate?: string | null;
            inProgress: boolean;
          };
        }>;
      };
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteEnrollmentMutationVariables = Exact<{
  input: DeleteEnrollmentInput;
}>;

export type DeleteEnrollmentMutation = {
  __typename?: 'Mutation';
  deleteEnrollment?: {
    __typename?: 'DeleteEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      relationshipToHoH: RelationshipToHoH;
      householdSize: number;
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      household: { __typename?: 'Household'; id: string; shortId: string };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteClientFileMutationVariables = Exact<{
  input: DeleteClientFileInput;
}>;

export type DeleteClientFileMutation = {
  __typename?: 'Mutation';
  deleteClientFile?: {
    __typename?: 'DeleteClientFilePayload';
    clientMutationId?: string | null;
    file?: {
      __typename?: 'File';
      confidential?: boolean | null;
      contentType: string;
      createdAt: string;
      effectiveDate?: string | null;
      expirationDate?: string | null;
      id: string;
      name: string;
      fileBlobId: string;
      updatedAt: string;
      url: string;
      tags: Array<string>;
      ownFile: boolean;
      enrollmentId?: string | null;
      enrollment?: { __typename?: 'Enrollment'; id: string } | null;
      updatedBy?: {
        __typename?: 'ApplicationUser';
        id: string;
        name: string;
      } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type AddHouseholdMembersMutationVariables = Exact<{
  input: AddHouseholdMembersToEnrollmentInput;
}>;

export type AddHouseholdMembersMutation = {
  __typename?: 'Mutation';
  addHouseholdMembersToEnrollment?: {
    __typename?: 'AddHouseholdMembersToEnrollmentPayload';
    clientMutationId?: string | null;
    enrollments?: Array<{
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      relationshipToHoH: RelationshipToHoH;
      householdSize: number;
      household: {
        __typename?: 'Household';
        id: string;
        shortId: string;
        householdClients: Array<{
          __typename?: 'HouseholdClient';
          id: string;
          relationshipToHoH: RelationshipToHoH;
          client: {
            __typename?: 'Client';
            id: string;
            veteranStatus: NoYesReasonsForMissingData;
            firstName?: string | null;
            middleName?: string | null;
            preferredName?: string | null;
            lastName?: string | null;
            nameSuffix?: string | null;
            dob?: string | null;
            age?: number | null;
            ssn?: string | null;
            access: {
              __typename?: 'ClientAccess';
              id: string;
              canViewFullSsn: boolean;
              canViewPartialSsn: boolean;
              canViewDob: boolean;
              canEditEnrollments: boolean;
              canDeleteEnrollments: boolean;
              canViewEnrollmentDetails: boolean;
              canManageAnyClientFiles: boolean;
              canManageOwnClientFiles: boolean;
              canViewAnyConfidentialClientFiles: boolean;
              canViewAnyNonconfidentialClientFiles: boolean;
            };
          };
          enrollment: {
            __typename?: 'Enrollment';
            id: string;
            entryDate: string;
            exitDate?: string | null;
            inProgress: boolean;
          };
        }>;
      };
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      client: { __typename?: 'Client'; id: string };
    }> | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type GetServiceQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetServiceQuery = {
  __typename?: 'Query';
  service?: {
    __typename?: 'Service';
    id: string;
    dateProvided: string;
    movingOnOtherType?: string | null;
    recordType?: RecordType | null;
    referralOutcome?: PathReferralOutcome | null;
    subTypeProvided?: ServiceSubTypeProvided | null;
    typeProvided?: ServiceTypeProvided | null;
    otherTypeProvided?: string | null;
    FAAmount?: number | null;
    dateCreated: string;
    dateUpdated: string;
    dateDeleted?: string | null;
  } | null;
};

export type AddServiceToEnrollmentMutationVariables = Exact<{
  input: CreateServiceInput;
}>;

export type AddServiceToEnrollmentMutation = {
  __typename?: 'Mutation';
  createService?: {
    __typename?: 'CreateServicePayload';
    clientMutationId?: string | null;
    service?: {
      __typename?: 'Service';
      id: string;
      dateProvided: string;
      movingOnOtherType?: string | null;
      recordType?: RecordType | null;
      referralOutcome?: PathReferralOutcome | null;
      subTypeProvided?: ServiceSubTypeProvided | null;
      typeProvided?: ServiceTypeProvided | null;
      otherTypeProvided?: string | null;
      FAAmount?: number | null;
      dateCreated: string;
      dateUpdated: string;
      dateDeleted?: string | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteServiceMutationVariables = Exact<{
  input: DeleteServiceInput;
}>;

export type DeleteServiceMutation = {
  __typename?: 'Mutation';
  deleteService?: {
    __typename?: 'DeleteServicePayload';
    clientMutationId?: string | null;
    service?: {
      __typename?: 'Service';
      id: string;
      dateProvided: string;
      movingOnOtherType?: string | null;
      recordType?: RecordType | null;
      referralOutcome?: PathReferralOutcome | null;
      subTypeProvided?: ServiceSubTypeProvided | null;
      typeProvided?: ServiceTypeProvided | null;
      otherTypeProvided?: string | null;
      FAAmount?: number | null;
      dateCreated: string;
      dateUpdated: string;
      dateDeleted?: string | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type GetEnrollmentQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEnrollmentQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
    relationshipToHoH: RelationshipToHoH;
    householdSize: number;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
    household: { __typename?: 'Household'; id: string; shortId: string };
    client: { __typename?: 'Client'; id: string };
  } | null;
};

export type GetEnrollmentWithHouseholdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEnrollmentWithHouseholdQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
    relationshipToHoH: RelationshipToHoH;
    householdSize: number;
    household: {
      __typename?: 'Household';
      id: string;
      shortId: string;
      householdClients: Array<{
        __typename?: 'HouseholdClient';
        id: string;
        relationshipToHoH: RelationshipToHoH;
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          entryDate: string;
          exitDate?: string | null;
          inProgress: boolean;
          intakeAssessment?: {
            __typename?: 'Assessment';
            id: string;
            inProgress: boolean;
            assessmentDate: string;
          } | null;
          exitAssessment?: {
            __typename?: 'Assessment';
            id: string;
            inProgress: boolean;
            assessmentDate: string;
          } | null;
        };
        client: {
          __typename?: 'Client';
          id: string;
          veteranStatus: NoYesReasonsForMissingData;
          firstName?: string | null;
          middleName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
          dob?: string | null;
          age?: number | null;
          ssn?: string | null;
          access: {
            __typename?: 'ClientAccess';
            id: string;
            canViewFullSsn: boolean;
            canViewPartialSsn: boolean;
            canViewDob: boolean;
            canEditEnrollments: boolean;
            canDeleteEnrollments: boolean;
            canViewEnrollmentDetails: boolean;
            canManageAnyClientFiles: boolean;
            canManageOwnClientFiles: boolean;
            canViewAnyConfidentialClientFiles: boolean;
            canViewAnyNonconfidentialClientFiles: boolean;
          };
        };
      }>;
    };
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
    client: { __typename?: 'Client'; id: string };
  } | null;
};

export type GetEnrollmentEventsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetEnrollmentEventsQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    events: {
      __typename?: 'EventsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Event';
        id: string;
        event: EventType;
        eventDate: string;
        locationCrisisOrPhHousing?: string | null;
        probSolDivRrResult?: NoYesMissing | null;
        referralCaseManageAfter?: NoYesMissing | null;
        referralResult?: ReferralResult | null;
        resultDate?: string | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
      }>;
    };
  } | null;
};

export type GetEnrollmentServicesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetEnrollmentServicesQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    services: {
      __typename?: 'ServicesPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Service';
        id: string;
        dateProvided: string;
        movingOnOtherType?: string | null;
        recordType?: RecordType | null;
        referralOutcome?: PathReferralOutcome | null;
        subTypeProvided?: ServiceSubTypeProvided | null;
        typeProvided?: ServiceTypeProvided | null;
        otherTypeProvided?: string | null;
        FAAmount?: number | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
      }>;
    };
  } | null;
};

export type GetClientHouseholdMemberCandidatesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientHouseholdMemberCandidatesQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        project: { __typename?: 'Project'; id: string; projectName: string };
        household: {
          __typename?: 'Household';
          id: string;
          householdClients: Array<{
            __typename?: 'HouseholdClient';
            id: string;
            relationshipToHoH: RelationshipToHoH;
            client: {
              __typename?: 'Client';
              id: string;
              veteranStatus: NoYesReasonsForMissingData;
              firstName?: string | null;
              middleName?: string | null;
              preferredName?: string | null;
              lastName?: string | null;
              nameSuffix?: string | null;
              dob?: string | null;
              age?: number | null;
              ssn?: string | null;
              access: {
                __typename?: 'ClientAccess';
                id: string;
                canViewFullSsn: boolean;
                canViewPartialSsn: boolean;
                canViewDob: boolean;
                canEditEnrollments: boolean;
                canDeleteEnrollments: boolean;
                canViewEnrollmentDetails: boolean;
                canManageAnyClientFiles: boolean;
                canManageOwnClientFiles: boolean;
                canViewAnyConfidentialClientFiles: boolean;
                canViewAnyNonconfidentialClientFiles: boolean;
              };
            };
            enrollment: {
              __typename?: 'Enrollment';
              id: string;
              entryDate: string;
              exitDate?: string | null;
              inProgress: boolean;
            };
          }>;
        };
      }>;
    };
  } | null;
};

export type GetRecentIncomeBenefitsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetRecentIncomeBenefitsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    incomeBenefits: {
      __typename?: 'IncomeBenefitsPaginated';
      nodesCount: number;
      nodes: Array<{
        __typename: 'IncomeBenefit';
        adap?: NoYesReasonsForMissingData | null;
        alimony?: NoYesMissing | null;
        alimonyAmount?: number | null;
        benefitsFromAnySource?: NoYesReasonsForMissingData | null;
        childSupport?: NoYesMissing | null;
        childSupportAmount?: number | null;
        cobra?: NoYesMissing | null;
        connectionWithSoar?: NoYesReasonsForMissingData | null;
        dataCollectionStage: DataCollectionStage;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        earned?: NoYesMissing | null;
        earnedAmount?: number | null;
        employerProvided?: NoYesMissing | null;
        ga?: NoYesMissing | null;
        gaAmount?: number | null;
        hivaidsAssistance?: NoYesReasonsForMissingData | null;
        id: string;
        incomeFromAnySource?: NoYesReasonsForMissingData | null;
        indianHealthServices?: NoYesMissing | null;
        informationDate: string;
        insuranceFromAnySource?: NoYesReasonsForMissingData | null;
        medicaid?: NoYesMissing | null;
        medicare?: NoYesMissing | null;
        noAdapReason?: NoAssistanceReason | null;
        noCobraReason?: ReasonNotInsured | null;
        noEmployerProvidedReason?: ReasonNotInsured | null;
        noHivaidsAssistanceReason?: NoAssistanceReason | null;
        noIndianHealthServicesReason?: ReasonNotInsured | null;
        noMedicaidReason?: ReasonNotInsured | null;
        noMedicareReason?: ReasonNotInsured | null;
        noPrivatePayReason?: ReasonNotInsured | null;
        noRyanWhiteReason?: NoAssistanceReason | null;
        noSchipReason?: ReasonNotInsured | null;
        noStateHealthInsReason?: ReasonNotInsured | null;
        noVaMedReason?: ReasonNotInsured | null;
        otherBenefitsSource?: NoYesMissing | null;
        otherBenefitsSourceIdentify?: string | null;
        otherIncomeAmount?: number | null;
        otherIncomeSource?: NoYesMissing | null;
        otherIncomeSourceIdentify?: string | null;
        otherInsurance?: NoYesMissing | null;
        otherInsuranceIdentify?: string | null;
        otherTanf?: NoYesMissing | null;
        pension?: NoYesMissing | null;
        pensionAmount?: number | null;
        privateDisability?: NoYesMissing | null;
        privateDisabilityAmount?: number | null;
        privatePay?: NoYesMissing | null;
        ryanWhiteMedDent?: NoYesReasonsForMissingData | null;
        schip?: NoYesMissing | null;
        snap?: NoYesMissing | null;
        socSecRetirement?: NoYesMissing | null;
        socSecRetirementAmount?: number | null;
        ssdi?: NoYesMissing | null;
        ssdiAmount?: number | null;
        ssi?: NoYesMissing | null;
        ssiAmount?: number | null;
        stateHealthIns?: NoYesMissing | null;
        tanf?: NoYesMissing | null;
        tanfAmount?: number | null;
        tanfChildCare?: NoYesMissing | null;
        tanfTransportation?: NoYesMissing | null;
        totalMonthlyIncome?: string | null;
        unemployment?: NoYesMissing | null;
        unemploymentAmount?: number | null;
        vaDisabilityNonService?: NoYesMissing | null;
        vaDisabilityNonServiceAmount?: number | null;
        vaDisabilityService?: NoYesMissing | null;
        vaDisabilityServiceAmount?: number | null;
        vaMedicalServices?: NoYesMissing | null;
        wic?: NoYesMissing | null;
        workersComp?: NoYesMissing | null;
        workersCompAmount?: number | null;
        user?: { __typename: 'User'; id: string; name: string } | null;
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          project: {
            __typename?: 'Project';
            id: string;
            projectName: string;
            projectType?: ProjectType | null;
          };
        };
      }>;
    };
  } | null;
};

export type GetRecentDisabilitiesQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetRecentDisabilitiesQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    disabilityGroups: Array<{
      __typename: 'DisabilityGroup';
      id: string;
      dataCollectionStage: DataCollectionStage;
      informationDate: string;
      disablingCondition: NoYesReasonsForMissingData;
      chronicHealthCondition?: NoYesReasonsForMissingData | null;
      chronicHealthConditionIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      developmentalDisability?: NoYesReasonsForMissingData | null;
      hivAids?: NoYesReasonsForMissingData | null;
      mentalHealthDisorder?: NoYesReasonsForMissingData | null;
      mentalHealthDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      physicalDisability?: NoYesReasonsForMissingData | null;
      physicalDisabilityIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      substanceUseDisorder?: DisabilityResponse | null;
      substanceUseDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      dateCreated?: string | null;
      dateUpdated?: string | null;
      enrollment: {
        __typename?: 'Enrollment';
        id: string;
        project: {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        };
      };
      user?: { __typename: 'User'; id: string; name: string } | null;
    }>;
  } | null;
};

export type GetRecentHealthAndDvsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetRecentHealthAndDvsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    healthAndDvs: {
      __typename?: 'HealthAndDvsPaginated';
      nodesCount: number;
      nodes: Array<{
        __typename: 'HealthAndDv';
        bounceBack?: WellbeingAgreement | null;
        currentlyFleeing?: NoYesReasonsForMissingData | null;
        dataCollectionStage: DataCollectionStage;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        dentalHealthStatus?: HealthStatus | null;
        domesticViolenceVictim?: NoYesReasonsForMissingData | null;
        dueDate?: string | null;
        feelingFrequency?: FeelingFrequency | null;
        generalHealthStatus?: HealthStatus | null;
        id: string;
        informationDate: string;
        lifeValue?: WellbeingAgreement | null;
        mentalHealthStatus?: HealthStatus | null;
        pregnancyStatus?: NoYesReasonsForMissingData | null;
        supportFromOthers?: WellbeingAgreement | null;
        whenOccurred?: WhenDvOccurred | null;
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          project: {
            __typename?: 'Project';
            id: string;
            projectName: string;
            projectType?: ProjectType | null;
          };
        };
        user?: { __typename: 'User'; id: string; name: string } | null;
      }>;
    };
  } | null;
};

export type GetFileQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetFileQuery = {
  __typename?: 'Query';
  file?: {
    __typename?: 'File';
    confidential?: boolean | null;
    contentType: string;
    createdAt: string;
    effectiveDate?: string | null;
    expirationDate?: string | null;
    id: string;
    name: string;
    fileBlobId: string;
    updatedAt: string;
    url: string;
    tags: Array<string>;
    ownFile: boolean;
    enrollmentId?: string | null;
    enrollment?: { __typename?: 'Enrollment'; id: string } | null;
    updatedBy?: {
      __typename?: 'ApplicationUser';
      id: string;
      name: string;
    } | null;
  } | null;
};

export type GetClientFilesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientFilesQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    files: {
      __typename?: 'FilesPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'File';
        confidential?: boolean | null;
        contentType: string;
        createdAt: string;
        effectiveDate?: string | null;
        expirationDate?: string | null;
        id: string;
        name: string;
        fileBlobId: string;
        updatedAt: string;
        url: string;
        tags: Array<string>;
        ownFile: boolean;
        enrollmentId?: string | null;
        enrollment?: { __typename?: 'Enrollment'; id: string } | null;
        updatedBy?: {
          __typename?: 'ApplicationUser';
          id: string;
          name: string;
        } | null;
      }>;
    };
  } | null;
};

export type OmniSearchClientsQueryVariables = Exact<{
  textSearch: Scalars['String'];
}>;

export type OmniSearchClientsQuery = {
  __typename?: 'Query';
  clientOmniSearch: {
    __typename?: 'ClientsPaginated';
    limit: number;
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Client';
      id: string;
      dob?: string | null;
      age?: number | null;
      gender: Array<Gender>;
      personalId: string;
      firstName?: string | null;
      middleName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
    }>;
  };
};

export type OmniSearchProjectsQueryVariables = Exact<{
  searchTerm: Scalars['String'];
}>;

export type OmniSearchProjectsQuery = {
  __typename?: 'Query';
  projects: {
    __typename?: 'ProjectsPaginated';
    limit: number;
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    }>;
  };
};

export type GetRecentItemsQueryVariables = Exact<{ [key: string]: never }>;

export type GetRecentItemsQuery = {
  __typename?: 'Query';
  currentUser?: {
    __typename?: 'ApplicationUser';
    id: string;
    recentItems: Array<
      | {
          __typename?: 'Client';
          id: string;
          dob?: string | null;
          age?: number | null;
          gender: Array<Gender>;
          personalId: string;
          firstName?: string | null;
          middleName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
        }
      | {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        }
    >;
  } | null;
};

export type AddRecentItemMutationVariables = Exact<{
  itemId: Scalars['ID'];
  itemType: RecentItemType;
}>;

export type AddRecentItemMutation = {
  __typename?: 'Mutation';
  addRecentItem?: {
    __typename?: 'ApplicationUser';
    id: string;
    recentItems: Array<
      | {
          __typename?: 'Client';
          id: string;
          dob?: string | null;
          age?: number | null;
          gender: Array<Gender>;
          personalId: string;
          firstName?: string | null;
          middleName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
        }
      | {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        }
    >;
  } | null;
};

export type ClearRecentItemsMutationVariables = Exact<{ [key: string]: never }>;

export type ClearRecentItemsMutation = {
  __typename?: 'Mutation';
  clearRecentItems?: {
    __typename?: 'ApplicationUser';
    id: string;
    recentItems: Array<
      | {
          __typename?: 'Client';
          id: string;
          dob?: string | null;
          age?: number | null;
          gender: Array<Gender>;
          personalId: string;
          firstName?: string | null;
          middleName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
        }
      | {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        }
    >;
  } | null;
};

export type RootPermissionsFragmentFragment = {
  __typename?: 'QueryAccess';
  id: string;
  canAdministerHmis: boolean;
  canEditClients: boolean;
  canViewClients: boolean;
  canAuditClients: boolean;
  canEditOrganization: boolean;
  canDeleteOrganization: boolean;
  canViewDob: boolean;
  canViewFullSsn: boolean;
  canDeleteProject: boolean;
  canDeleteAssignedProjectData: boolean;
  canViewPartialSsn: boolean;
  canEditEnrollments: boolean;
  canViewEnrollmentDetails: boolean;
  canDeleteEnrollments: boolean;
  canEditProjectDetails: boolean;
  canManageAnyClientFiles: boolean;
  canManageOwnClientFiles: boolean;
  canViewAnyConfidentialClientFiles: boolean;
  canViewAnyNonconfidentialClientFiles: boolean;
};

export type GetRootPermissionsQueryVariables = Exact<{ [key: string]: never }>;

export type GetRootPermissionsQuery = {
  __typename?: 'Query';
  access: {
    __typename?: 'QueryAccess';
    id: string;
    canAdministerHmis: boolean;
    canEditClients: boolean;
    canViewClients: boolean;
    canAuditClients: boolean;
    canEditOrganization: boolean;
    canDeleteOrganization: boolean;
    canViewDob: boolean;
    canViewFullSsn: boolean;
    canDeleteProject: boolean;
    canDeleteAssignedProjectData: boolean;
    canViewPartialSsn: boolean;
    canEditEnrollments: boolean;
    canViewEnrollmentDetails: boolean;
    canDeleteEnrollments: boolean;
    canEditProjectDetails: boolean;
    canManageAnyClientFiles: boolean;
    canManageOwnClientFiles: boolean;
    canViewAnyConfidentialClientFiles: boolean;
    canViewAnyNonconfidentialClientFiles: boolean;
  };
};

export type ProjectFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType?: ProjectType | null;
  organization: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  };
};

export type ProjectOmniSearchFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType?: ProjectType | null;
};

export type ProjectPermissionsFieldsFragment = {
  __typename?: 'Project';
  id: string;
  access: {
    __typename?: 'ProjectAccess';
    id: string;
    canViewDob: boolean;
    canViewFullSsn: boolean;
    canDeleteProject: boolean;
    canViewPartialSsn: boolean;
    canEditEnrollments: boolean;
    canViewEnrollmentDetails: boolean;
    canDeleteEnrollments: boolean;
    canEditProjectDetails: boolean;
  };
};

export type OrganizationFieldsFragment = {
  __typename?: 'Organization';
  id: string;
  organizationName: string;
};

export type OrganizationDetailFieldsFragment = {
  __typename?: 'Organization';
  description?: string | null;
  contactInformation?: string | null;
  victimServiceProvider: NoYesMissing;
};

export type OrganizationAllFieldsFragment = {
  __typename?: 'Organization';
  id: string;
  organizationName: string;
  description?: string | null;
  contactInformation?: string | null;
  victimServiceProvider: NoYesMissing;
};

export type OrganizationPermissionsFieldsFragment = {
  __typename?: 'Organization';
  id: string;
  access: {
    __typename?: 'OrganizationAccess';
    id: string;
    canEditOrganization: boolean;
    canDeleteOrganization: boolean;
  };
};

export type ProjectAllFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType?: ProjectType | null;
  HMISParticipatingProject?: NoYesMissing | null;
  HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
  contactInformation?: string | null;
  continuumProject?: NoYesMissing | null;
  description?: string | null;
  housingType?: HousingType | null;
  operatingEndDate?: string | null;
  operatingStartDate: string;
  residentialAffiliation?: NoYesMissing | null;
  targetPopulation?: TargetPopulation | null;
  trackingMethod?: TrackingMethod | null;
  organization: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  };
};

export type InventoryFieldsFragment = {
  __typename?: 'Inventory';
  availability?: Availability | null;
  bedInventory: number;
  cocCode: string;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  esBedType?: BedType | null;
  householdType: HouseholdType;
  id: string;
  inventoryEndDate?: string | null;
  inventoryStartDate: string;
  unitInventory: number;
  beds: { __typename?: 'BedsPaginated'; nodesCount: number };
  units: { __typename?: 'UnitsPaginated'; nodesCount: number };
};

export type UnitFieldsFragment = {
  __typename?: 'Unit';
  id: string;
  name?: string | null;
  bedCount: number;
  startDate: string;
  endDate?: string | null;
};

export type BedFieldsFragment = {
  __typename?: 'Bed';
  id: string;
  bedType: InventoryBedType;
  name?: string | null;
  gender?: string | null;
  startDate: string;
  endDate?: string | null;
  unit: { __typename?: 'Unit'; id: string; name?: string | null };
};

export type ProjectCocFieldsFragment = {
  __typename?: 'ProjectCoc';
  address1?: string | null;
  address2?: string | null;
  city?: string | null;
  cocCode: string;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  geocode: string;
  geographyType?: GeographyType | null;
  id: string;
  state?: string | null;
  zip?: string | null;
};

export type FunderFieldsFragment = {
  __typename?: 'Funder';
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  endDate?: string | null;
  funder: FundingSource;
  grantId: string;
  id: string;
  otherFunder?: string | null;
  startDate: string;
};

export type GetAllOrganizationsQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllOrganizationsQuery = {
  __typename?: 'Query';
  organizations: {
    __typename?: 'OrganizationsPaginated';
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Organization';
      id: string;
      organizationName: string;
      projects: { __typename?: 'ProjectsPaginated'; nodesCount: number };
    }>;
  };
};

export type GetOrganizationPermissionsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOrganizationPermissionsQuery = {
  __typename?: 'Query';
  organization?: {
    __typename?: 'Organization';
    id: string;
    access: {
      __typename?: 'OrganizationAccess';
      id: string;
      canEditOrganization: boolean;
      canDeleteOrganization: boolean;
    };
  } | null;
};

export type GetProjectQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetProjectQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
    HMISParticipatingProject?: NoYesMissing | null;
    HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
    contactInformation?: string | null;
    continuumProject?: NoYesMissing | null;
    description?: string | null;
    housingType?: HousingType | null;
    operatingEndDate?: string | null;
    operatingStartDate: string;
    residentialAffiliation?: NoYesMissing | null;
    targetPopulation?: TargetPopulation | null;
    trackingMethod?: TrackingMethod | null;
    organization: {
      __typename?: 'Organization';
      id: string;
      organizationName: string;
    };
  } | null;
};

export type GetProjectPermissionsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetProjectPermissionsQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    access: {
      __typename?: 'ProjectAccess';
      id: string;
      canViewDob: boolean;
      canViewFullSsn: boolean;
      canDeleteProject: boolean;
      canViewPartialSsn: boolean;
      canEditEnrollments: boolean;
      canViewEnrollmentDetails: boolean;
      canDeleteEnrollments: boolean;
      canEditProjectDetails: boolean;
    };
  } | null;
};

export type GetProjectEnrollmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  searchTerm?: InputMaybe<Scalars['String']>;
  openOnDate?: InputMaybe<Scalars['ISO8601Date']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetProjectEnrollmentsQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        id: string;
        entryDate: string;
        exitDate?: string | null;
        inProgress: boolean;
        relationshipToHoH: RelationshipToHoH;
        householdSize: number;
        client: {
          __typename?: 'Client';
          id: string;
          firstName?: string | null;
          middleName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
          dob?: string | null;
          age?: number | null;
          ssn?: string | null;
          access: {
            __typename?: 'ClientAccess';
            id: string;
            canViewFullSsn: boolean;
            canViewPartialSsn: boolean;
          };
        };
        project: {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        };
        household: { __typename?: 'Household'; id: string; shortId: string };
      }>;
    };
  } | null;
};

export type DeleteProjectMutationVariables = Exact<{
  input: DeleteProjectInput;
}>;

export type DeleteProjectMutation = {
  __typename?: 'Mutation';
  deleteProject?: {
    __typename?: 'DeleteProjectPayload';
    clientMutationId?: string | null;
    project?: { __typename?: 'Project'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type GetFunderQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetFunderQuery = {
  __typename?: 'Query';
  funder?: {
    __typename?: 'Funder';
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    endDate?: string | null;
    funder: FundingSource;
    grantId: string;
    id: string;
    otherFunder?: string | null;
    startDate: string;
  } | null;
};

export type GetInventoryQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryQuery = {
  __typename?: 'Query';
  inventory?: {
    __typename?: 'Inventory';
    availability?: Availability | null;
    bedInventory: number;
    cocCode: string;
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    esBedType?: BedType | null;
    householdType: HouseholdType;
    id: string;
    inventoryEndDate?: string | null;
    inventoryStartDate: string;
    unitInventory: number;
    beds: { __typename?: 'BedsPaginated'; nodesCount: number };
    units: { __typename?: 'UnitsPaginated'; nodesCount: number };
  } | null;
};

export type GetUnitsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  active?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetUnitsQuery = {
  __typename?: 'Query';
  inventory?: {
    __typename?: 'Inventory';
    id: string;
    units: {
      __typename?: 'UnitsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Unit';
        id: string;
        name?: string | null;
        bedCount: number;
        startDate: string;
        endDate?: string | null;
      }>;
    };
  } | null;
};

export type GetBedsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  bedType?: InputMaybe<InventoryBedType>;
  active?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetBedsQuery = {
  __typename?: 'Query';
  inventory?: {
    __typename?: 'Inventory';
    id: string;
    beds: {
      __typename?: 'BedsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Bed';
        id: string;
        bedType: InventoryBedType;
        name?: string | null;
        gender?: string | null;
        startDate: string;
        endDate?: string | null;
        unit: { __typename?: 'Unit'; id: string; name?: string | null };
      }>;
    };
  } | null;
};

export type GetProjectCocQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetProjectCocQuery = {
  __typename?: 'Query';
  projectCoc?: {
    __typename?: 'ProjectCoc';
    address1?: string | null;
    address2?: string | null;
    city?: string | null;
    cocCode: string;
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    geocode: string;
    geographyType?: GeographyType | null;
    id: string;
    state?: string | null;
    zip?: string | null;
  } | null;
};

export type GetOrganizationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOrganizationQuery = {
  __typename?: 'Query';
  organization?: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
    description?: string | null;
    contactInformation?: string | null;
    victimServiceProvider: NoYesMissing;
  } | null;
};

export type DeleteOrganizationMutationVariables = Exact<{
  input: DeleteOrganizationInput;
}>;

export type DeleteOrganizationMutation = {
  __typename?: 'Mutation';
  deleteOrganization?: {
    __typename?: 'DeleteOrganizationPayload';
    clientMutationId?: string | null;
    organization?: { __typename?: 'Organization'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type GetOrganizationWithPaginatedProjectsQueryVariables = Exact<{
  id: Scalars['ID'];
  searchTerm?: InputMaybe<Scalars['String']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetOrganizationWithPaginatedProjectsQuery = {
  __typename?: 'Query';
  organization?: {
    __typename?: 'Organization';
    id: string;
    projects: {
      __typename?: 'ProjectsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
        HMISParticipatingProject?: NoYesMissing | null;
        HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
        contactInformation?: string | null;
        continuumProject?: NoYesMissing | null;
        description?: string | null;
        housingType?: HousingType | null;
        operatingEndDate?: string | null;
        operatingStartDate: string;
        residentialAffiliation?: NoYesMissing | null;
        targetPopulation?: TargetPopulation | null;
        trackingMethod?: TrackingMethod | null;
        organization: {
          __typename?: 'Organization';
          id: string;
          organizationName: string;
        };
      }>;
    };
  } | null;
};

export type GetProjectInventoriesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetProjectInventoriesQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    inventories: {
      __typename?: 'InventoriesPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Inventory';
        availability?: Availability | null;
        bedInventory: number;
        cocCode: string;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        esBedType?: BedType | null;
        householdType: HouseholdType;
        id: string;
        inventoryEndDate?: string | null;
        inventoryStartDate: string;
        unitInventory: number;
        beds: { __typename?: 'BedsPaginated'; nodesCount: number };
        units: { __typename?: 'UnitsPaginated'; nodesCount: number };
      }>;
    };
  } | null;
};

export type GetProjectProjectCocsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetProjectProjectCocsQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    projectCocs: {
      __typename?: 'ProjectCocsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'ProjectCoc';
        address1?: string | null;
        address2?: string | null;
        city?: string | null;
        cocCode: string;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        geocode: string;
        geographyType?: GeographyType | null;
        id: string;
        state?: string | null;
        zip?: string | null;
      }>;
    };
  } | null;
};

export type GetProjectFundersQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetProjectFundersQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    funders: {
      __typename?: 'FundersPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Funder';
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        endDate?: string | null;
        funder: FundingSource;
        grantId: string;
        id: string;
        otherFunder?: string | null;
        startDate: string;
      }>;
    };
  } | null;
};

export type DeleteInventoryMutationVariables = Exact<{
  input: DeleteInventoryInput;
}>;

export type DeleteInventoryMutation = {
  __typename?: 'Mutation';
  deleteInventory?: {
    __typename?: 'DeleteInventoryPayload';
    clientMutationId?: string | null;
    inventory?: { __typename?: 'Inventory'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteFunderMutationVariables = Exact<{
  input: DeleteFunderInput;
}>;

export type DeleteFunderMutation = {
  __typename?: 'Mutation';
  deleteFunder?: {
    __typename?: 'DeleteFunderPayload';
    clientMutationId?: string | null;
    funder?: { __typename?: 'Funder'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteProjectCocMutationVariables = Exact<{
  input: DeleteProjectCocInput;
}>;

export type DeleteProjectCocMutation = {
  __typename?: 'Mutation';
  deleteProjectCoc?: {
    __typename?: 'DeleteProjectCocPayload';
    clientMutationId?: string | null;
    projectCoc?: { __typename?: 'ProjectCoc'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type CreateBedsMutationVariables = Exact<{
  input: CreateBedsInput;
}>;

export type CreateBedsMutation = {
  __typename?: 'Mutation';
  createBeds?: {
    __typename?: 'CreateBedsPayload';
    clientMutationId?: string | null;
    inventory?: {
      __typename?: 'Inventory';
      availability?: Availability | null;
      bedInventory: number;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      esBedType?: BedType | null;
      householdType: HouseholdType;
      id: string;
      inventoryEndDate?: string | null;
      inventoryStartDate: string;
      unitInventory: number;
      beds: { __typename?: 'BedsPaginated'; nodesCount: number };
      units: { __typename?: 'UnitsPaginated'; nodesCount: number };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type CreateUnitsMutationVariables = Exact<{
  input: CreateUnitsInput;
}>;

export type CreateUnitsMutation = {
  __typename?: 'Mutation';
  createUnits?: {
    __typename?: 'CreateUnitsPayload';
    clientMutationId?: string | null;
    inventory?: {
      __typename?: 'Inventory';
      availability?: Availability | null;
      bedInventory: number;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      esBedType?: BedType | null;
      householdType: HouseholdType;
      id: string;
      inventoryEndDate?: string | null;
      inventoryStartDate: string;
      unitInventory: number;
      beds: { __typename?: 'BedsPaginated'; nodesCount: number };
      units: { __typename?: 'UnitsPaginated'; nodesCount: number };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteUnitsMutationVariables = Exact<{
  input: DeleteUnitsInput;
}>;

export type DeleteUnitsMutation = {
  __typename?: 'Mutation';
  deleteUnits?: {
    __typename?: 'DeleteUnitsPayload';
    clientMutationId?: string | null;
    inventory?: {
      __typename?: 'Inventory';
      availability?: Availability | null;
      bedInventory: number;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      esBedType?: BedType | null;
      householdType: HouseholdType;
      id: string;
      inventoryEndDate?: string | null;
      inventoryStartDate: string;
      unitInventory: number;
      beds: { __typename?: 'BedsPaginated'; nodesCount: number };
      units: { __typename?: 'UnitsPaginated'; nodesCount: number };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type DeleteBedsMutationVariables = Exact<{
  input: DeleteBedsInput;
}>;

export type DeleteBedsMutation = {
  __typename?: 'Mutation';
  deleteBeds?: {
    __typename?: 'DeleteBedsPayload';
    clientMutationId?: string | null;
    inventory?: {
      __typename?: 'Inventory';
      availability?: Availability | null;
      bedInventory: number;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      esBedType?: BedType | null;
      householdType: HouseholdType;
      id: string;
      inventoryEndDate?: string | null;
      inventoryStartDate: string;
      unitInventory: number;
      beds: { __typename?: 'BedsPaginated'; nodesCount: number };
      units: { __typename?: 'UnitsPaginated'; nodesCount: number };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type UpdateUnitsMutationVariables = Exact<{
  input: UpdateUnitsInput;
}>;

export type UpdateUnitsMutation = {
  __typename?: 'Mutation';
  updateUnits?: {
    __typename?: 'UpdateUnitsPayload';
    clientMutationId?: string | null;
    units: Array<{
      __typename?: 'Unit';
      id: string;
      name?: string | null;
      bedCount: number;
      startDate: string;
      endDate?: string | null;
    }>;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type UpdateBedsMutationVariables = Exact<{
  input: UpdateBedsInput;
}>;

export type UpdateBedsMutation = {
  __typename?: 'Mutation';
  updateBeds?: {
    __typename?: 'UpdateBedsPayload';
    clientMutationId?: string | null;
    beds: Array<{
      __typename?: 'Bed';
      id: string;
      bedType: InventoryBedType;
      name?: string | null;
      gender?: string | null;
      startDate: string;
      endDate?: string | null;
      unit: { __typename?: 'Unit'; id: string; name?: string | null };
    }>;
    errors: Array<{
      __typename?: 'ValidationError';
      type: ValidationType;
      attribute: string;
      readableAttribute?: string | null;
      message: string;
      fullMessage: string;
      severity: ValidationSeverity;
      id?: string | null;
      recordId?: string | null;
      linkId?: string | null;
      section?: string | null;
    }>;
  } | null;
};

export type CreateDirectUploadMutationMutationVariables = Exact<{
  input: DirectUploadInput;
}>;

export type CreateDirectUploadMutationMutation = {
  __typename?: 'Mutation';
  createDirectUpload?: {
    __typename?: 'DirectUpload';
    filename: string;
    headers: string;
    url: string;
    blobId: string;
    signedBlobId: string;
  } | null;
};

export const UserFieldsFragmentDoc = gql`
  fragment UserFields on User {
    __typename
    id
    name
  }
`;
export const CustomFormFieldsFragmentDoc = gql`
  fragment CustomFormFields on CustomForm {
    id
  }
`;
export const FormDefinitionFieldsFragmentDoc = gql`
  fragment FormDefinitionFields on FormDefinition {
    id
    version
    role
    status
    identifier
  }
`;
export const AssessmentFieldsFragmentDoc = gql`
  fragment AssessmentFields on Assessment {
    id
    inProgress
    assessmentDate
    dataCollectionStage
    dateCreated
    dateUpdated
    dateDeleted
    user {
      ...UserFields
    }
    customForm {
      ...CustomFormFields
      definition {
        ...FormDefinitionFields
      }
    }
  }
  ${UserFieldsFragmentDoc}
  ${CustomFormFieldsFragmentDoc}
  ${FormDefinitionFieldsFragmentDoc}
`;
export const PickListOptionFieldsFragmentDoc = gql`
  fragment PickListOptionFields on PickListOption {
    code
    label
    secondaryLabel
    groupLabel
    groupCode
    initialSelected
  }
`;
export const EnableWhenFieldsFragmentDoc = gql`
  fragment EnableWhenFields on EnableWhen {
    question
    operator
    answerCode
    answerCodes
    answerNumber
    answerBoolean
    answerGroupCode
    compareQuestion
  }
`;
export const ItemFieldsFragmentDoc = gql`
  fragment ItemFields on FormItem {
    __typename
    linkId
    type
    component
    prefix
    text
    briefText
    helperText
    required
    warnIfEmpty
    hidden
    readOnly
    repeats
    fieldName
    recordType
    pickListReference
    serviceDetailType
    size
    assessmentDate
    prefill
    bounds {
      id
      severity
      type
      question
      valueNumber
      valueDate
    }
    pickListOptions {
      ...PickListOptionFields
    }
    initial {
      valueCode
      valueBoolean
      valueNumber
      valueLocalConstant
      initialBehavior
    }
    dataCollectedAbout
    disabledDisplay
    enableBehavior
    enableWhen {
      ...EnableWhenFields
    }
    autofillValues {
      valueCode
      valueBoolean
      valueNumber
      sumQuestions
      autofillBehavior
      autofillWhen {
        ...EnableWhenFields
      }
    }
  }
  ${PickListOptionFieldsFragmentDoc}
  ${EnableWhenFieldsFragmentDoc}
`;
export const FormDefinitionWithJsonFragmentDoc = gql`
  fragment FormDefinitionWithJson on FormDefinition {
    ...FormDefinitionFields
    definition {
      __typename
      item {
        ...ItemFields
        item {
          ...ItemFields
          item {
            ...ItemFields
            item {
              ...ItemFields
              item {
                ...ItemFields
              }
            }
          }
        }
      }
    }
  }
  ${FormDefinitionFieldsFragmentDoc}
  ${ItemFieldsFragmentDoc}
`;
export const AssessmentWithDefinitionAndValuesFragmentDoc = gql`
  fragment AssessmentWithDefinitionAndValues on Assessment {
    ...AssessmentFields
    customForm {
      ...CustomFormFields
      values
      definition {
        ...FormDefinitionWithJson
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
  ${CustomFormFieldsFragmentDoc}
  ${FormDefinitionWithJsonFragmentDoc}
`;
export const EnrollmentFieldsFragmentDoc = gql`
  fragment EnrollmentFields on Enrollment {
    id
    entryDate
    exitDate
    project {
      id
      projectName
      projectType
    }
    inProgress
    relationshipToHoH
    household {
      id
      shortId
    }
    householdSize
    client {
      id
    }
  }
`;
export const AssessmentWithValuesFragmentDoc = gql`
  fragment AssessmentWithValues on Assessment {
    ...AssessmentFields
    customForm {
      ...CustomFormFields
      values
    }
    enrollment {
      id
      ...EnrollmentFields
    }
  }
  ${AssessmentFieldsFragmentDoc}
  ${CustomFormFieldsFragmentDoc}
  ${EnrollmentFieldsFragmentDoc}
`;
export const ValidationErrorFieldsFragmentDoc = gql`
  fragment ValidationErrorFields on ValidationError {
    type
    attribute
    readableAttribute
    message
    fullMessage
    severity
    id
    recordId
    linkId
    section
  }
`;
export const ClientIdentificationFieldsFragmentDoc = gql`
  fragment ClientIdentificationFields on Client {
    id
    dob
    age
    ssn
    access {
      id
      canViewFullSsn
      canViewPartialSsn
    }
  }
`;
export const ClientNameFragmentDoc = gql`
  fragment ClientName on Client {
    firstName
    middleName
    preferredName
    lastName
    nameSuffix
  }
`;
export const ClientImageFieldsFragmentDoc = gql`
  fragment ClientImageFields on ClientImage {
    id
    contentType
    base64
  }
`;
export const ClientImageFragmentDoc = gql`
  fragment ClientImage on Client {
    id
    image {
      ...ClientImageFields
    }
  }
  ${ClientImageFieldsFragmentDoc}
`;
export const ClientFieldsFragmentDoc = gql`
  fragment ClientFields on Client {
    ...ClientIdentificationFields
    dobDataQuality
    ethnicity
    gender
    pronouns
    nameDataQuality
    personalId
    race
    ssnDataQuality
    veteranStatus
    dateCreated
    dateDeleted
    dateUpdated
    ...ClientName
    ...ClientImage
    warehouseUrl
    user {
      ...UserFields
    }
  }
  ${ClientIdentificationFieldsFragmentDoc}
  ${ClientNameFragmentDoc}
  ${ClientImageFragmentDoc}
  ${UserFieldsFragmentDoc}
`;
export const ClientOmniSearchFieldsFragmentDoc = gql`
  fragment ClientOmniSearchFields on Client {
    id
    dob
    age
    gender
    personalId
    ...ClientName
  }
  ${ClientNameFragmentDoc}
`;
export const ClientAccessFieldsFragmentDoc = gql`
  fragment ClientAccessFields on ClientAccess {
    id
    canViewDob
    canViewFullSsn
    canViewPartialSsn
    canEditEnrollments
    canDeleteEnrollments
    canViewEnrollmentDetails
    canManageAnyClientFiles
    canManageOwnClientFiles
    canViewAnyConfidentialClientFiles
    canViewAnyNonconfidentialClientFiles
  }
`;
export const ClientPermissionsFragmentDoc = gql`
  fragment ClientPermissions on Client {
    id
    access {
      ...ClientAccessFields
    }
  }
  ${ClientAccessFieldsFragmentDoc}
`;
export const HouseholdClientFieldsFragmentDoc = gql`
  fragment HouseholdClientFields on HouseholdClient {
    id
    relationshipToHoH
    client {
      id
      ...ClientName
      ...ClientIdentificationFields
      ...ClientPermissions
      veteranStatus
    }
    enrollment {
      id
      entryDate
      exitDate
      inProgress
    }
  }
  ${ClientNameFragmentDoc}
  ${ClientIdentificationFieldsFragmentDoc}
  ${ClientPermissionsFragmentDoc}
`;
export const HouseholdClientFieldsWithAssessmentsFragmentDoc = gql`
  fragment HouseholdClientFieldsWithAssessments on HouseholdClient {
    ...HouseholdClientFields
    enrollment {
      id
      entryDate
      exitDate
      inProgress
      intakeAssessment {
        id
        inProgress
        assessmentDate
      }
      exitAssessment {
        id
        inProgress
        assessmentDate
      }
    }
  }
  ${HouseholdClientFieldsFragmentDoc}
`;
export const EnrollmentFieldsFromAssessmentFragmentDoc = gql`
  fragment EnrollmentFieldsFromAssessment on Enrollment {
    id
    entryDate
    exitDate
    livingSituation
    lengthOfStay
    previousStreetEssh
    dateToStreetEssh
    timesHomelessPastThreeYears
    monthsHomelessPastThreeYears
    intakeAssessment {
      user {
        name
      }
    }
    project {
      id
      projectName
      projectType
    }
    user {
      ...UserFields
    }
  }
  ${UserFieldsFragmentDoc}
`;
export const EnrollmentWithHouseholdFragmentFragmentDoc = gql`
  fragment EnrollmentWithHouseholdFragment on Enrollment {
    ...EnrollmentFields
    household {
      id
      shortId
      householdClients {
        ...HouseholdClientFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${HouseholdClientFieldsFragmentDoc}
`;
export const EventFieldsFragmentDoc = gql`
  fragment EventFields on Event {
    id
    event
    eventDate
    locationCrisisOrPhHousing
    probSolDivRrResult
    referralCaseManageAfter
    referralResult
    resultDate
    dateCreated
    dateUpdated
    dateDeleted
  }
`;
export const ServiceFieldsFragmentDoc = gql`
  fragment ServiceFields on Service {
    id
    dateProvided
    movingOnOtherType
    recordType
    referralOutcome
    subTypeProvided
    typeProvided
    otherTypeProvided
    FAAmount
    dateCreated
    dateUpdated
    dateDeleted
  }
`;
export const IncomeBenefitFieldsFragmentDoc = gql`
  fragment IncomeBenefitFields on IncomeBenefit {
    __typename
    user {
      ...UserFields
    }
    enrollment {
      id
      project {
        id
        projectName
        projectType
      }
    }
    adap
    alimony
    alimonyAmount
    benefitsFromAnySource
    childSupport
    childSupportAmount
    cobra
    connectionWithSoar
    dataCollectionStage
    dateCreated
    dateDeleted
    dateUpdated
    earned
    earnedAmount
    employerProvided
    ga
    gaAmount
    hivaidsAssistance
    id
    incomeFromAnySource
    indianHealthServices
    informationDate
    insuranceFromAnySource
    medicaid
    medicare
    noAdapReason
    noCobraReason
    noEmployerProvidedReason
    noHivaidsAssistanceReason
    noIndianHealthServicesReason
    noMedicaidReason
    noMedicareReason
    noPrivatePayReason
    noRyanWhiteReason
    noSchipReason
    noStateHealthInsReason
    noVaMedReason
    otherBenefitsSource
    otherBenefitsSourceIdentify
    otherIncomeAmount
    otherIncomeSource
    otherIncomeSourceIdentify
    otherInsurance
    otherInsuranceIdentify
    otherTanf
    pension
    pensionAmount
    privateDisability
    privateDisabilityAmount
    privatePay
    ryanWhiteMedDent
    schip
    snap
    socSecRetirement
    socSecRetirementAmount
    ssdi
    ssdiAmount
    ssi
    ssiAmount
    stateHealthIns
    tanf
    tanfAmount
    tanfChildCare
    tanfTransportation
    totalMonthlyIncome
    unemployment
    unemploymentAmount
    vaDisabilityNonService
    vaDisabilityNonServiceAmount
    vaDisabilityService
    vaDisabilityServiceAmount
    vaMedicalServices
    wic
    workersComp
    workersCompAmount
  }
  ${UserFieldsFragmentDoc}
`;
export const DisabilityGroupFieldsFragmentDoc = gql`
  fragment DisabilityGroupFields on DisabilityGroup {
    __typename
    id
    dataCollectionStage
    informationDate
    enrollment {
      id
      project {
        id
        projectName
        projectType
      }
    }
    user {
      ...UserFields
    }
    disablingCondition
    chronicHealthCondition
    chronicHealthConditionIndefiniteAndImpairs
    developmentalDisability
    hivAids
    mentalHealthDisorder
    mentalHealthDisorderIndefiniteAndImpairs
    physicalDisability
    physicalDisabilityIndefiniteAndImpairs
    substanceUseDisorder
    substanceUseDisorderIndefiniteAndImpairs
    dateCreated
    dateUpdated
  }
  ${UserFieldsFragmentDoc}
`;
export const HealthAndDvFieldsFragmentDoc = gql`
  fragment HealthAndDvFields on HealthAndDv {
    __typename
    bounceBack
    currentlyFleeing
    dataCollectionStage
    dateCreated
    dateDeleted
    dateUpdated
    dentalHealthStatus
    domesticViolenceVictim
    dueDate
    enrollment {
      id
      project {
        id
        projectName
        projectType
      }
    }
    feelingFrequency
    generalHealthStatus
    id
    informationDate
    lifeValue
    mentalHealthStatus
    pregnancyStatus
    supportFromOthers
    user {
      ...UserFields
    }
    whenOccurred
  }
  ${UserFieldsFragmentDoc}
`;
export const FileFieldsFragmentDoc = gql`
  fragment FileFields on File {
    confidential
    contentType
    createdAt
    effectiveDate
    expirationDate
    id
    name
    fileBlobId
    updatedAt
    url
    tags
    ownFile
    enrollmentId
    enrollment {
      id
    }
    updatedBy {
      id
      name
    }
  }
`;
export const ClientAuditEventFieldsFragmentDoc = gql`
  fragment ClientAuditEventFields on ClientAuditEvent {
    id
    createdAt
    event
    objectChanges
    item {
      id
    }
    user {
      id
      name
    }
  }
`;
export const RootPermissionsFragmentFragmentDoc = gql`
  fragment RootPermissionsFragment on QueryAccess {
    id
    canAdministerHmis
    canEditClients
    canViewClients
    canAuditClients
    canEditOrganization
    canDeleteOrganization
    canViewDob
    canViewFullSsn
    canDeleteProject
    canDeleteAssignedProjectData
    canViewPartialSsn
    canEditEnrollments
    canViewEnrollmentDetails
    canDeleteEnrollments
    canEditProjectDetails
    canManageAnyClientFiles
    canManageOwnClientFiles
    canViewAnyConfidentialClientFiles
    canViewAnyNonconfidentialClientFiles
  }
`;
export const ProjectFieldsFragmentDoc = gql`
  fragment ProjectFields on Project {
    id
    projectName
    projectType
    organization {
      id
      organizationName
    }
  }
`;
export const ProjectOmniSearchFieldsFragmentDoc = gql`
  fragment ProjectOmniSearchFields on Project {
    id
    projectName
    projectType
  }
`;
export const ProjectPermissionsFieldsFragmentDoc = gql`
  fragment ProjectPermissionsFields on Project {
    id
    access {
      id
      canViewDob
      canViewFullSsn
      canDeleteProject
      canViewPartialSsn
      canEditEnrollments
      canViewEnrollmentDetails
      canDeleteEnrollments
      canEditProjectDetails
    }
  }
`;
export const OrganizationFieldsFragmentDoc = gql`
  fragment OrganizationFields on Organization {
    id
    organizationName
  }
`;
export const OrganizationDetailFieldsFragmentDoc = gql`
  fragment OrganizationDetailFields on Organization {
    description
    contactInformation
    victimServiceProvider
  }
`;
export const OrganizationAllFieldsFragmentDoc = gql`
  fragment OrganizationAllFields on Organization {
    ...OrganizationFields
    ...OrganizationDetailFields
  }
  ${OrganizationFieldsFragmentDoc}
  ${OrganizationDetailFieldsFragmentDoc}
`;
export const OrganizationPermissionsFieldsFragmentDoc = gql`
  fragment OrganizationPermissionsFields on Organization {
    id
    access {
      id
      canEditOrganization
      canDeleteOrganization
    }
  }
`;
export const ProjectAllFieldsFragmentDoc = gql`
  fragment ProjectAllFields on Project {
    id
    projectName
    projectType
    HMISParticipatingProject
    HOPWAMedAssistedLivingFac
    contactInformation
    continuumProject
    description
    housingType
    operatingEndDate
    operatingStartDate
    residentialAffiliation
    targetPopulation
    trackingMethod
    organization {
      id
      organizationName
    }
  }
`;
export const InventoryFieldsFragmentDoc = gql`
  fragment InventoryFields on Inventory {
    availability
    bedInventory
    cocCode
    dateCreated
    dateDeleted
    dateUpdated
    esBedType
    householdType
    id
    inventoryEndDate
    inventoryStartDate
    beds {
      nodesCount
    }
    units {
      nodesCount
    }
    unitInventory
  }
`;
export const UnitFieldsFragmentDoc = gql`
  fragment UnitFields on Unit {
    id
    name
    bedCount
    startDate
    endDate
  }
`;
export const BedFieldsFragmentDoc = gql`
  fragment BedFields on Bed {
    id
    bedType
    name
    gender
    startDate
    endDate
    unit {
      id
      name
    }
  }
`;
export const ProjectCocFieldsFragmentDoc = gql`
  fragment ProjectCocFields on ProjectCoc {
    address1
    address2
    city
    cocCode
    dateCreated
    dateDeleted
    dateUpdated
    geocode
    geographyType
    id
    state
    zip
  }
`;
export const FunderFieldsFragmentDoc = gql`
  fragment FunderFields on Funder {
    dateCreated
    dateDeleted
    dateUpdated
    endDate
    funder
    grantId
    id
    otherFunder
    startDate
  }
`;
export const GetAssessmentDocument = gql`
  query GetAssessment($id: ID!) {
    assessment(id: $id) {
      ...AssessmentWithDefinitionAndValues
    }
  }
  ${AssessmentWithDefinitionAndValuesFragmentDoc}
`;

/**
 * __useGetAssessmentQuery__
 *
 * To run a query within a React component, call `useGetAssessmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAssessmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAssessmentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAssessmentQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAssessmentQuery,
    GetAssessmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetAssessmentQuery, GetAssessmentQueryVariables>(
    GetAssessmentDocument,
    options
  );
}
export function useGetAssessmentLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAssessmentQuery,
    GetAssessmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetAssessmentQuery, GetAssessmentQueryVariables>(
    GetAssessmentDocument,
    options
  );
}
export type GetAssessmentQueryHookResult = ReturnType<
  typeof useGetAssessmentQuery
>;
export type GetAssessmentLazyQueryHookResult = ReturnType<
  typeof useGetAssessmentLazyQuery
>;
export type GetAssessmentQueryResult = Apollo.QueryResult<
  GetAssessmentQuery,
  GetAssessmentQueryVariables
>;
export const GetPickListDocument = gql`
  query GetPickList($pickListType: PickListType!, $relationId: ID) {
    pickList(pickListType: $pickListType, relationId: $relationId) {
      ...PickListOptionFields
    }
  }
  ${PickListOptionFieldsFragmentDoc}
`;

/**
 * __useGetPickListQuery__
 *
 * To run a query within a React component, call `useGetPickListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPickListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPickListQuery({
 *   variables: {
 *      pickListType: // value for 'pickListType'
 *      relationId: // value for 'relationId'
 *   },
 * });
 */
export function useGetPickListQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetPickListQuery,
    GetPickListQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetPickListQuery, GetPickListQueryVariables>(
    GetPickListDocument,
    options
  );
}
export function useGetPickListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPickListQuery,
    GetPickListQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetPickListQuery, GetPickListQueryVariables>(
    GetPickListDocument,
    options
  );
}
export type GetPickListQueryHookResult = ReturnType<typeof useGetPickListQuery>;
export type GetPickListLazyQueryHookResult = ReturnType<
  typeof useGetPickListLazyQuery
>;
export type GetPickListQueryResult = Apollo.QueryResult<
  GetPickListQuery,
  GetPickListQueryVariables
>;
export const GetEnrollmentAssessmentsDocument = gql`
  query GetEnrollmentAssessments(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
    $roles: [FormRole!]
    $inProgress: Boolean
  ) {
    enrollment(id: $id) {
      id
      assessments(
        limit: $limit
        offset: $offset
        roles: $roles
        inProgress: $inProgress
        sortOrder: ASSESSMENT_DATE
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...AssessmentFields
        }
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentAssessmentsQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentAssessmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentAssessmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentAssessmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      roles: // value for 'roles'
 *      inProgress: // value for 'inProgress'
 *   },
 * });
 */
export function useGetEnrollmentAssessmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >(GetEnrollmentAssessmentsDocument, options);
}
export function useGetEnrollmentAssessmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >(GetEnrollmentAssessmentsDocument, options);
}
export type GetEnrollmentAssessmentsQueryHookResult = ReturnType<
  typeof useGetEnrollmentAssessmentsQuery
>;
export type GetEnrollmentAssessmentsLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentAssessmentsLazyQuery
>;
export type GetEnrollmentAssessmentsQueryResult = Apollo.QueryResult<
  GetEnrollmentAssessmentsQuery,
  GetEnrollmentAssessmentsQueryVariables
>;
export const GetFormDefinitionDocument = gql`
  query GetFormDefinition($role: FormRole!, $enrollmentId: ID, $projectId: ID) {
    getFormDefinition(
      role: $role
      enrollmentId: $enrollmentId
      projectId: $projectId
    ) {
      ...FormDefinitionWithJson
    }
  }
  ${FormDefinitionWithJsonFragmentDoc}
`;

/**
 * __useGetFormDefinitionQuery__
 *
 * To run a query within a React component, call `useGetFormDefinitionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFormDefinitionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFormDefinitionQuery({
 *   variables: {
 *      role: // value for 'role'
 *      enrollmentId: // value for 'enrollmentId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetFormDefinitionQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >(GetFormDefinitionDocument, options);
}
export function useGetFormDefinitionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >(GetFormDefinitionDocument, options);
}
export type GetFormDefinitionQueryHookResult = ReturnType<
  typeof useGetFormDefinitionQuery
>;
export type GetFormDefinitionLazyQueryHookResult = ReturnType<
  typeof useGetFormDefinitionLazyQuery
>;
export type GetFormDefinitionQueryResult = Apollo.QueryResult<
  GetFormDefinitionQuery,
  GetFormDefinitionQueryVariables
>;
export const SaveAssessmentDocument = gql`
  mutation SaveAssessment($input: SaveAssessmentInput!) {
    saveAssessment(input: $input) {
      assessment {
        ...AssessmentWithDefinitionAndValues
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${AssessmentWithDefinitionAndValuesFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SaveAssessmentMutationFn = Apollo.MutationFunction<
  SaveAssessmentMutation,
  SaveAssessmentMutationVariables
>;

/**
 * __useSaveAssessmentMutation__
 *
 * To run a mutation, you first call `useSaveAssessmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveAssessmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveAssessmentMutation, { data, loading, error }] = useSaveAssessmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSaveAssessmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SaveAssessmentMutation,
    SaveAssessmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    SaveAssessmentMutation,
    SaveAssessmentMutationVariables
  >(SaveAssessmentDocument, options);
}
export type SaveAssessmentMutationHookResult = ReturnType<
  typeof useSaveAssessmentMutation
>;
export type SaveAssessmentMutationResult =
  Apollo.MutationResult<SaveAssessmentMutation>;
export type SaveAssessmentMutationOptions = Apollo.BaseMutationOptions<
  SaveAssessmentMutation,
  SaveAssessmentMutationVariables
>;
export const SubmitAssessmentDocument = gql`
  mutation SubmitAssessment($input: SubmitAssessmentInput!) {
    submitAssessment(input: $input) {
      assessment {
        ...AssessmentWithDefinitionAndValues
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${AssessmentWithDefinitionAndValuesFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SubmitAssessmentMutationFn = Apollo.MutationFunction<
  SubmitAssessmentMutation,
  SubmitAssessmentMutationVariables
>;

/**
 * __useSubmitAssessmentMutation__
 *
 * To run a mutation, you first call `useSubmitAssessmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitAssessmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitAssessmentMutation, { data, loading, error }] = useSubmitAssessmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSubmitAssessmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SubmitAssessmentMutation,
    SubmitAssessmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    SubmitAssessmentMutation,
    SubmitAssessmentMutationVariables
  >(SubmitAssessmentDocument, options);
}
export type SubmitAssessmentMutationHookResult = ReturnType<
  typeof useSubmitAssessmentMutation
>;
export type SubmitAssessmentMutationResult =
  Apollo.MutationResult<SubmitAssessmentMutation>;
export type SubmitAssessmentMutationOptions = Apollo.BaseMutationOptions<
  SubmitAssessmentMutation,
  SubmitAssessmentMutationVariables
>;
export const SubmitHouseholdAssessmentsDocument = gql`
  mutation SubmitHouseholdAssessments(
    $input: SubmitHouseholdAssessmentsInput!
  ) {
    submitHouseholdAssessments(input: $input) {
      assessments {
        id
        inProgress
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SubmitHouseholdAssessmentsMutationFn = Apollo.MutationFunction<
  SubmitHouseholdAssessmentsMutation,
  SubmitHouseholdAssessmentsMutationVariables
>;

/**
 * __useSubmitHouseholdAssessmentsMutation__
 *
 * To run a mutation, you first call `useSubmitHouseholdAssessmentsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitHouseholdAssessmentsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitHouseholdAssessmentsMutation, { data, loading, error }] = useSubmitHouseholdAssessmentsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSubmitHouseholdAssessmentsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SubmitHouseholdAssessmentsMutation,
    SubmitHouseholdAssessmentsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    SubmitHouseholdAssessmentsMutation,
    SubmitHouseholdAssessmentsMutationVariables
  >(SubmitHouseholdAssessmentsDocument, options);
}
export type SubmitHouseholdAssessmentsMutationHookResult = ReturnType<
  typeof useSubmitHouseholdAssessmentsMutation
>;
export type SubmitHouseholdAssessmentsMutationResult =
  Apollo.MutationResult<SubmitHouseholdAssessmentsMutation>;
export type SubmitHouseholdAssessmentsMutationOptions =
  Apollo.BaseMutationOptions<
    SubmitHouseholdAssessmentsMutation,
    SubmitHouseholdAssessmentsMutationVariables
  >;
export const GetAssessmentsForPopulationDocument = gql`
  query GetAssessmentsForPopulation(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
    $roles: [FormRole!]
    $inProgress: Boolean
  ) {
    client(id: $id) {
      id
      assessments(
        limit: $limit
        offset: $offset
        roles: $roles
        inProgress: $inProgress
        sortOrder: ASSESSMENT_DATE
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...AssessmentWithValues
        }
      }
    }
  }
  ${AssessmentWithValuesFragmentDoc}
`;

/**
 * __useGetAssessmentsForPopulationQuery__
 *
 * To run a query within a React component, call `useGetAssessmentsForPopulationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAssessmentsForPopulationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAssessmentsForPopulationQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      roles: // value for 'roles'
 *      inProgress: // value for 'inProgress'
 *   },
 * });
 */
export function useGetAssessmentsForPopulationQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAssessmentsForPopulationQuery,
    GetAssessmentsForPopulationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAssessmentsForPopulationQuery,
    GetAssessmentsForPopulationQueryVariables
  >(GetAssessmentsForPopulationDocument, options);
}
export function useGetAssessmentsForPopulationLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAssessmentsForPopulationQuery,
    GetAssessmentsForPopulationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAssessmentsForPopulationQuery,
    GetAssessmentsForPopulationQueryVariables
  >(GetAssessmentsForPopulationDocument, options);
}
export type GetAssessmentsForPopulationQueryHookResult = ReturnType<
  typeof useGetAssessmentsForPopulationQuery
>;
export type GetAssessmentsForPopulationLazyQueryHookResult = ReturnType<
  typeof useGetAssessmentsForPopulationLazyQuery
>;
export type GetAssessmentsForPopulationQueryResult = Apollo.QueryResult<
  GetAssessmentsForPopulationQuery,
  GetAssessmentsForPopulationQueryVariables
>;
export const DeleteAssessmentDocument = gql`
  mutation DeleteAssessment($id: ID!) {
    deleteAssessment(input: { id: $id }) {
      clientMutationId
      assessment {
        ...AssessmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteAssessmentMutationFn = Apollo.MutationFunction<
  DeleteAssessmentMutation,
  DeleteAssessmentMutationVariables
>;

/**
 * __useDeleteAssessmentMutation__
 *
 * To run a mutation, you first call `useDeleteAssessmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAssessmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAssessmentMutation, { data, loading, error }] = useDeleteAssessmentMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteAssessmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteAssessmentMutation,
    DeleteAssessmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteAssessmentMutation,
    DeleteAssessmentMutationVariables
  >(DeleteAssessmentDocument, options);
}
export type DeleteAssessmentMutationHookResult = ReturnType<
  typeof useDeleteAssessmentMutation
>;
export type DeleteAssessmentMutationResult =
  Apollo.MutationResult<DeleteAssessmentMutation>;
export type DeleteAssessmentMutationOptions = Apollo.BaseMutationOptions<
  DeleteAssessmentMutation,
  DeleteAssessmentMutationVariables
>;
export const SubmitFormDocument = gql`
  mutation SubmitForm($input: SubmitFormInput!) {
    submitForm(input: $input) {
      clientMutationId
      record {
        ... on Client {
          ...ClientFields
        }
        ... on Organization {
          ...OrganizationAllFields
        }
        ... on Project {
          ...ProjectAllFields
        }
        ... on Funder {
          ...FunderFields
        }
        ... on ProjectCoc {
          ...ProjectCocFields
        }
        ... on Inventory {
          ...InventoryFields
        }
        ... on Service {
          ...ServiceFields
        }
        ... on File {
          ...FileFields
        }
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
  ${OrganizationAllFieldsFragmentDoc}
  ${ProjectAllFieldsFragmentDoc}
  ${FunderFieldsFragmentDoc}
  ${ProjectCocFieldsFragmentDoc}
  ${InventoryFieldsFragmentDoc}
  ${ServiceFieldsFragmentDoc}
  ${FileFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SubmitFormMutationFn = Apollo.MutationFunction<
  SubmitFormMutation,
  SubmitFormMutationVariables
>;

/**
 * __useSubmitFormMutation__
 *
 * To run a mutation, you first call `useSubmitFormMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitFormMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitFormMutation, { data, loading, error }] = useSubmitFormMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSubmitFormMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SubmitFormMutation,
    SubmitFormMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SubmitFormMutation, SubmitFormMutationVariables>(
    SubmitFormDocument,
    options
  );
}
export type SubmitFormMutationHookResult = ReturnType<
  typeof useSubmitFormMutation
>;
export type SubmitFormMutationResult =
  Apollo.MutationResult<SubmitFormMutation>;
export type SubmitFormMutationOptions = Apollo.BaseMutationOptions<
  SubmitFormMutation,
  SubmitFormMutationVariables
>;
export const SearchClientsDocument = gql`
  query SearchClients(
    $input: ClientSearchInput!
    $limit: Int
    $offset: Int
    $sortOrder: ClientSortOption = LAST_NAME_A_TO_Z
  ) {
    clientSearch(
      input: $input
      limit: $limit
      offset: $offset
      sortOrder: $sortOrder
    ) {
      offset
      limit
      nodesCount
      nodes {
        ...ClientFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useSearchClientsQuery__
 *
 * To run a query within a React component, call `useSearchClientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchClientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchClientsQuery({
 *   variables: {
 *      input: // value for 'input'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sortOrder: // value for 'sortOrder'
 *   },
 * });
 */
export function useSearchClientsQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export function useSearchClientsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export type SearchClientsQueryHookResult = ReturnType<
  typeof useSearchClientsQuery
>;
export type SearchClientsLazyQueryHookResult = ReturnType<
  typeof useSearchClientsLazyQuery
>;
export type SearchClientsQueryResult = Apollo.QueryResult<
  SearchClientsQuery,
  SearchClientsQueryVariables
>;
export const GetClientDocument = gql`
  query GetClient($id: ID!) {
    client(id: $id) {
      ...ClientFields
      ...ClientPermissions
    }
  }
  ${ClientFieldsFragmentDoc}
  ${ClientPermissionsFragmentDoc}
`;

/**
 * __useGetClientQuery__
 *
 * To run a query within a React component, call `useGetClientQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClientQuery(
  baseOptions: Apollo.QueryHookOptions<GetClientQuery, GetClientQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export function useGetClientLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientQuery,
    GetClientQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export type GetClientQueryHookResult = ReturnType<typeof useGetClientQuery>;
export type GetClientLazyQueryHookResult = ReturnType<
  typeof useGetClientLazyQuery
>;
export type GetClientQueryResult = Apollo.QueryResult<
  GetClientQuery,
  GetClientQueryVariables
>;
export const GetClientNameDocument = gql`
  query GetClientName($id: ID!) {
    client(id: $id) {
      id
      ...ClientName
    }
  }
  ${ClientNameFragmentDoc}
`;

/**
 * __useGetClientNameQuery__
 *
 * To run a query within a React component, call `useGetClientNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientNameQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClientNameQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientNameQuery,
    GetClientNameQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetClientNameQuery, GetClientNameQueryVariables>(
    GetClientNameDocument,
    options
  );
}
export function useGetClientNameLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientNameQuery,
    GetClientNameQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetClientNameQuery, GetClientNameQueryVariables>(
    GetClientNameDocument,
    options
  );
}
export type GetClientNameQueryHookResult = ReturnType<
  typeof useGetClientNameQuery
>;
export type GetClientNameLazyQueryHookResult = ReturnType<
  typeof useGetClientNameLazyQuery
>;
export type GetClientNameQueryResult = Apollo.QueryResult<
  GetClientNameQuery,
  GetClientNameQueryVariables
>;
export const GetClientPermissionsDocument = gql`
  query GetClientPermissions($id: ID!) {
    client(id: $id) {
      ...ClientPermissions
    }
  }
  ${ClientPermissionsFragmentDoc}
`;

/**
 * __useGetClientPermissionsQuery__
 *
 * To run a query within a React component, call `useGetClientPermissionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientPermissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientPermissionsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClientPermissionsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientPermissionsQuery,
    GetClientPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientPermissionsQuery,
    GetClientPermissionsQueryVariables
  >(GetClientPermissionsDocument, options);
}
export function useGetClientPermissionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientPermissionsQuery,
    GetClientPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientPermissionsQuery,
    GetClientPermissionsQueryVariables
  >(GetClientPermissionsDocument, options);
}
export type GetClientPermissionsQueryHookResult = ReturnType<
  typeof useGetClientPermissionsQuery
>;
export type GetClientPermissionsLazyQueryHookResult = ReturnType<
  typeof useGetClientPermissionsLazyQuery
>;
export type GetClientPermissionsQueryResult = Apollo.QueryResult<
  GetClientPermissionsQuery,
  GetClientPermissionsQueryVariables
>;
export const GetClientImageDocument = gql`
  query GetClientImage($id: ID!) {
    client(id: $id) {
      ...ClientImage
    }
  }
  ${ClientImageFragmentDoc}
`;

/**
 * __useGetClientImageQuery__
 *
 * To run a query within a React component, call `useGetClientImageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientImageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientImageQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClientImageQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientImageQuery,
    GetClientImageQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetClientImageQuery, GetClientImageQueryVariables>(
    GetClientImageDocument,
    options
  );
}
export function useGetClientImageLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientImageQuery,
    GetClientImageQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetClientImageQuery, GetClientImageQueryVariables>(
    GetClientImageDocument,
    options
  );
}
export type GetClientImageQueryHookResult = ReturnType<
  typeof useGetClientImageQuery
>;
export type GetClientImageLazyQueryHookResult = ReturnType<
  typeof useGetClientImageLazyQuery
>;
export type GetClientImageQueryResult = Apollo.QueryResult<
  GetClientImageQuery,
  GetClientImageQueryVariables
>;
export const GetClientEnrollmentsDocument = gql`
  query GetClientEnrollments($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      enrollments(
        limit: $limit
        offset: $offset
        sortOrder: MOST_RECENT
        includeInProgress: true
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...EnrollmentFields
        }
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetClientEnrollmentsQuery__
 *
 * To run a query within a React component, call `useGetClientEnrollmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientEnrollmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientEnrollmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientEnrollmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >(GetClientEnrollmentsDocument, options);
}
export function useGetClientEnrollmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >(GetClientEnrollmentsDocument, options);
}
export type GetClientEnrollmentsQueryHookResult = ReturnType<
  typeof useGetClientEnrollmentsQuery
>;
export type GetClientEnrollmentsLazyQueryHookResult = ReturnType<
  typeof useGetClientEnrollmentsLazyQuery
>;
export type GetClientEnrollmentsQueryResult = Apollo.QueryResult<
  GetClientEnrollmentsQuery,
  GetClientEnrollmentsQueryVariables
>;
export const GetClientAuditEventsDocument = gql`
  query GetClientAuditEvents($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      auditHistory(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ClientAuditEventFields
        }
      }
    }
  }
  ${ClientAuditEventFieldsFragmentDoc}
`;

/**
 * __useGetClientAuditEventsQuery__
 *
 * To run a query within a React component, call `useGetClientAuditEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientAuditEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientAuditEventsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientAuditEventsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientAuditEventsQuery,
    GetClientAuditEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientAuditEventsQuery,
    GetClientAuditEventsQueryVariables
  >(GetClientAuditEventsDocument, options);
}
export function useGetClientAuditEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientAuditEventsQuery,
    GetClientAuditEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientAuditEventsQuery,
    GetClientAuditEventsQueryVariables
  >(GetClientAuditEventsDocument, options);
}
export type GetClientAuditEventsQueryHookResult = ReturnType<
  typeof useGetClientAuditEventsQuery
>;
export type GetClientAuditEventsLazyQueryHookResult = ReturnType<
  typeof useGetClientAuditEventsLazyQuery
>;
export type GetClientAuditEventsQueryResult = Apollo.QueryResult<
  GetClientAuditEventsQuery,
  GetClientAuditEventsQueryVariables
>;
export const GetClientAssessmentsDocument = gql`
  query GetClientAssessments($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      assessments(limit: $limit, offset: $offset, sortOrder: ASSESSMENT_DATE) {
        offset
        limit
        nodesCount
        nodes {
          ...AssessmentFields
          enrollment {
            id
            ...EnrollmentFields
          }
        }
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetClientAssessmentsQuery__
 *
 * To run a query within a React component, call `useGetClientAssessmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientAssessmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientAssessmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientAssessmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientAssessmentsQuery,
    GetClientAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientAssessmentsQuery,
    GetClientAssessmentsQueryVariables
  >(GetClientAssessmentsDocument, options);
}
export function useGetClientAssessmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientAssessmentsQuery,
    GetClientAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientAssessmentsQuery,
    GetClientAssessmentsQueryVariables
  >(GetClientAssessmentsDocument, options);
}
export type GetClientAssessmentsQueryHookResult = ReturnType<
  typeof useGetClientAssessmentsQuery
>;
export type GetClientAssessmentsLazyQueryHookResult = ReturnType<
  typeof useGetClientAssessmentsLazyQuery
>;
export type GetClientAssessmentsQueryResult = Apollo.QueryResult<
  GetClientAssessmentsQuery,
  GetClientAssessmentsQueryVariables
>;
export const GetRecentEnrollmentsDocument = gql`
  query GetRecentEnrollments($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      enrollments(
        limit: $limit
        offset: $offset
        sortOrder: MOST_RECENT
        includeInProgress: false
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...EnrollmentFieldsFromAssessment
        }
      }
    }
  }
  ${EnrollmentFieldsFromAssessmentFragmentDoc}
`;

/**
 * __useGetRecentEnrollmentsQuery__
 *
 * To run a query within a React component, call `useGetRecentEnrollmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentEnrollmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentEnrollmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetRecentEnrollmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >(GetRecentEnrollmentsDocument, options);
}
export function useGetRecentEnrollmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >(GetRecentEnrollmentsDocument, options);
}
export type GetRecentEnrollmentsQueryHookResult = ReturnType<
  typeof useGetRecentEnrollmentsQuery
>;
export type GetRecentEnrollmentsLazyQueryHookResult = ReturnType<
  typeof useGetRecentEnrollmentsLazyQuery
>;
export type GetRecentEnrollmentsQueryResult = Apollo.QueryResult<
  GetRecentEnrollmentsQuery,
  GetRecentEnrollmentsQueryVariables
>;
export const UpdateClientImageDocument = gql`
  mutation UpdateClientImage($clientId: ID!, $imageBlobId: ID!) {
    updateClientImage(
      input: { clientId: $clientId, imageBlobId: $imageBlobId }
    ) {
      clientMutationId
      client {
        ...ClientImage
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ClientImageFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateClientImageMutationFn = Apollo.MutationFunction<
  UpdateClientImageMutation,
  UpdateClientImageMutationVariables
>;

/**
 * __useUpdateClientImageMutation__
 *
 * To run a mutation, you first call `useUpdateClientImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClientImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClientImageMutation, { data, loading, error }] = useUpdateClientImageMutation({
 *   variables: {
 *      clientId: // value for 'clientId'
 *      imageBlobId: // value for 'imageBlobId'
 *   },
 * });
 */
export function useUpdateClientImageMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateClientImageMutation,
    UpdateClientImageMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateClientImageMutation,
    UpdateClientImageMutationVariables
  >(UpdateClientImageDocument, options);
}
export type UpdateClientImageMutationHookResult = ReturnType<
  typeof useUpdateClientImageMutation
>;
export type UpdateClientImageMutationResult =
  Apollo.MutationResult<UpdateClientImageMutation>;
export type UpdateClientImageMutationOptions = Apollo.BaseMutationOptions<
  UpdateClientImageMutation,
  UpdateClientImageMutationVariables
>;
export const DeleteClientImageDocument = gql`
  mutation DeleteClientImage($clientId: ID!) {
    deleteClientImage(input: { clientId: $clientId }) {
      clientMutationId
      client {
        ...ClientImage
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ClientImageFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteClientImageMutationFn = Apollo.MutationFunction<
  DeleteClientImageMutation,
  DeleteClientImageMutationVariables
>;

/**
 * __useDeleteClientImageMutation__
 *
 * To run a mutation, you first call `useDeleteClientImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteClientImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteClientImageMutation, { data, loading, error }] = useDeleteClientImageMutation({
 *   variables: {
 *      clientId: // value for 'clientId'
 *   },
 * });
 */
export function useDeleteClientImageMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteClientImageMutation,
    DeleteClientImageMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteClientImageMutation,
    DeleteClientImageMutationVariables
  >(DeleteClientImageDocument, options);
}
export type DeleteClientImageMutationHookResult = ReturnType<
  typeof useDeleteClientImageMutation
>;
export type DeleteClientImageMutationResult =
  Apollo.MutationResult<DeleteClientImageMutation>;
export type DeleteClientImageMutationOptions = Apollo.BaseMutationOptions<
  DeleteClientImageMutation,
  DeleteClientImageMutationVariables
>;
export const CreateEnrollmentDocument = gql`
  mutation CreateEnrollment($input: CreateEnrollmentInput!) {
    createEnrollment(input: $input) {
      clientMutationId
      enrollments {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateEnrollmentMutationFn = Apollo.MutationFunction<
  CreateEnrollmentMutation,
  CreateEnrollmentMutationVariables
>;

/**
 * __useCreateEnrollmentMutation__
 *
 * To run a mutation, you first call `useCreateEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createEnrollmentMutation, { data, loading, error }] = useCreateEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateEnrollmentMutation,
    CreateEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateEnrollmentMutation,
    CreateEnrollmentMutationVariables
  >(CreateEnrollmentDocument, options);
}
export type CreateEnrollmentMutationHookResult = ReturnType<
  typeof useCreateEnrollmentMutation
>;
export type CreateEnrollmentMutationResult =
  Apollo.MutationResult<CreateEnrollmentMutation>;
export type CreateEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  CreateEnrollmentMutation,
  CreateEnrollmentMutationVariables
>;
export const UpdateEnrollmentDocument = gql`
  mutation UpdateEnrollment($input: UpdateEnrollmentInput!) {
    updateEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentWithHouseholdFragment
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentWithHouseholdFragmentFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateEnrollmentMutationFn = Apollo.MutationFunction<
  UpdateEnrollmentMutation,
  UpdateEnrollmentMutationVariables
>;

/**
 * __useUpdateEnrollmentMutation__
 *
 * To run a mutation, you first call `useUpdateEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateEnrollmentMutation, { data, loading, error }] = useUpdateEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateEnrollmentMutation,
    UpdateEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateEnrollmentMutation,
    UpdateEnrollmentMutationVariables
  >(UpdateEnrollmentDocument, options);
}
export type UpdateEnrollmentMutationHookResult = ReturnType<
  typeof useUpdateEnrollmentMutation
>;
export type UpdateEnrollmentMutationResult =
  Apollo.MutationResult<UpdateEnrollmentMutation>;
export type UpdateEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  UpdateEnrollmentMutation,
  UpdateEnrollmentMutationVariables
>;
export const SetHoHDocument = gql`
  mutation SetHoH($input: SetHoHForEnrollmentInput!) {
    setHoHForEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentWithHouseholdFragment
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentWithHouseholdFragmentFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SetHoHMutationFn = Apollo.MutationFunction<
  SetHoHMutation,
  SetHoHMutationVariables
>;

/**
 * __useSetHoHMutation__
 *
 * To run a mutation, you first call `useSetHoHMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetHoHMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setHoHMutation, { data, loading, error }] = useSetHoHMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSetHoHMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetHoHMutation,
    SetHoHMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SetHoHMutation, SetHoHMutationVariables>(
    SetHoHDocument,
    options
  );
}
export type SetHoHMutationHookResult = ReturnType<typeof useSetHoHMutation>;
export type SetHoHMutationResult = Apollo.MutationResult<SetHoHMutation>;
export type SetHoHMutationOptions = Apollo.BaseMutationOptions<
  SetHoHMutation,
  SetHoHMutationVariables
>;
export const DeleteEnrollmentDocument = gql`
  mutation DeleteEnrollment($input: DeleteEnrollmentInput!) {
    deleteEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteEnrollmentMutationFn = Apollo.MutationFunction<
  DeleteEnrollmentMutation,
  DeleteEnrollmentMutationVariables
>;

/**
 * __useDeleteEnrollmentMutation__
 *
 * To run a mutation, you first call `useDeleteEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteEnrollmentMutation, { data, loading, error }] = useDeleteEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteEnrollmentMutation,
    DeleteEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteEnrollmentMutation,
    DeleteEnrollmentMutationVariables
  >(DeleteEnrollmentDocument, options);
}
export type DeleteEnrollmentMutationHookResult = ReturnType<
  typeof useDeleteEnrollmentMutation
>;
export type DeleteEnrollmentMutationResult =
  Apollo.MutationResult<DeleteEnrollmentMutation>;
export type DeleteEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  DeleteEnrollmentMutation,
  DeleteEnrollmentMutationVariables
>;
export const DeleteClientFileDocument = gql`
  mutation DeleteClientFile($input: DeleteClientFileInput!) {
    deleteClientFile(input: $input) {
      clientMutationId
      file {
        ...FileFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${FileFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteClientFileMutationFn = Apollo.MutationFunction<
  DeleteClientFileMutation,
  DeleteClientFileMutationVariables
>;

/**
 * __useDeleteClientFileMutation__
 *
 * To run a mutation, you first call `useDeleteClientFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteClientFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteClientFileMutation, { data, loading, error }] = useDeleteClientFileMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteClientFileMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteClientFileMutation,
    DeleteClientFileMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteClientFileMutation,
    DeleteClientFileMutationVariables
  >(DeleteClientFileDocument, options);
}
export type DeleteClientFileMutationHookResult = ReturnType<
  typeof useDeleteClientFileMutation
>;
export type DeleteClientFileMutationResult =
  Apollo.MutationResult<DeleteClientFileMutation>;
export type DeleteClientFileMutationOptions = Apollo.BaseMutationOptions<
  DeleteClientFileMutation,
  DeleteClientFileMutationVariables
>;
export const AddHouseholdMembersDocument = gql`
  mutation AddHouseholdMembers($input: AddHouseholdMembersToEnrollmentInput!) {
    addHouseholdMembersToEnrollment(input: $input) {
      clientMutationId
      enrollments {
        ...EnrollmentWithHouseholdFragment
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentWithHouseholdFragmentFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type AddHouseholdMembersMutationFn = Apollo.MutationFunction<
  AddHouseholdMembersMutation,
  AddHouseholdMembersMutationVariables
>;

/**
 * __useAddHouseholdMembersMutation__
 *
 * To run a mutation, you first call `useAddHouseholdMembersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddHouseholdMembersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addHouseholdMembersMutation, { data, loading, error }] = useAddHouseholdMembersMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddHouseholdMembersMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddHouseholdMembersMutation,
    AddHouseholdMembersMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    AddHouseholdMembersMutation,
    AddHouseholdMembersMutationVariables
  >(AddHouseholdMembersDocument, options);
}
export type AddHouseholdMembersMutationHookResult = ReturnType<
  typeof useAddHouseholdMembersMutation
>;
export type AddHouseholdMembersMutationResult =
  Apollo.MutationResult<AddHouseholdMembersMutation>;
export type AddHouseholdMembersMutationOptions = Apollo.BaseMutationOptions<
  AddHouseholdMembersMutation,
  AddHouseholdMembersMutationVariables
>;
export const GetServiceDocument = gql`
  query GetService($id: ID!) {
    service(id: $id) {
      ...ServiceFields
    }
  }
  ${ServiceFieldsFragmentDoc}
`;

/**
 * __useGetServiceQuery__
 *
 * To run a query within a React component, call `useGetServiceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetServiceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetServiceQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetServiceQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetServiceQuery,
    GetServiceQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetServiceQuery, GetServiceQueryVariables>(
    GetServiceDocument,
    options
  );
}
export function useGetServiceLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetServiceQuery,
    GetServiceQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetServiceQuery, GetServiceQueryVariables>(
    GetServiceDocument,
    options
  );
}
export type GetServiceQueryHookResult = ReturnType<typeof useGetServiceQuery>;
export type GetServiceLazyQueryHookResult = ReturnType<
  typeof useGetServiceLazyQuery
>;
export type GetServiceQueryResult = Apollo.QueryResult<
  GetServiceQuery,
  GetServiceQueryVariables
>;
export const AddServiceToEnrollmentDocument = gql`
  mutation AddServiceToEnrollment($input: CreateServiceInput!) {
    createService(input: $input) {
      clientMutationId
      service {
        ...ServiceFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ServiceFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type AddServiceToEnrollmentMutationFn = Apollo.MutationFunction<
  AddServiceToEnrollmentMutation,
  AddServiceToEnrollmentMutationVariables
>;

/**
 * __useAddServiceToEnrollmentMutation__
 *
 * To run a mutation, you first call `useAddServiceToEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddServiceToEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addServiceToEnrollmentMutation, { data, loading, error }] = useAddServiceToEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddServiceToEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddServiceToEnrollmentMutation,
    AddServiceToEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    AddServiceToEnrollmentMutation,
    AddServiceToEnrollmentMutationVariables
  >(AddServiceToEnrollmentDocument, options);
}
export type AddServiceToEnrollmentMutationHookResult = ReturnType<
  typeof useAddServiceToEnrollmentMutation
>;
export type AddServiceToEnrollmentMutationResult =
  Apollo.MutationResult<AddServiceToEnrollmentMutation>;
export type AddServiceToEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  AddServiceToEnrollmentMutation,
  AddServiceToEnrollmentMutationVariables
>;
export const DeleteServiceDocument = gql`
  mutation DeleteService($input: DeleteServiceInput!) {
    deleteService(input: $input) {
      clientMutationId
      service {
        ...ServiceFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ServiceFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteServiceMutationFn = Apollo.MutationFunction<
  DeleteServiceMutation,
  DeleteServiceMutationVariables
>;

/**
 * __useDeleteServiceMutation__
 *
 * To run a mutation, you first call `useDeleteServiceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteServiceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteServiceMutation, { data, loading, error }] = useDeleteServiceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteServiceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteServiceMutation,
    DeleteServiceMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteServiceMutation,
    DeleteServiceMutationVariables
  >(DeleteServiceDocument, options);
}
export type DeleteServiceMutationHookResult = ReturnType<
  typeof useDeleteServiceMutation
>;
export type DeleteServiceMutationResult =
  Apollo.MutationResult<DeleteServiceMutation>;
export type DeleteServiceMutationOptions = Apollo.BaseMutationOptions<
  DeleteServiceMutation,
  DeleteServiceMutationVariables
>;
export const GetEnrollmentDocument = gql`
  query GetEnrollment($id: ID!) {
    enrollment(id: $id) {
      ...EnrollmentFields
    }
  }
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEnrollmentQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentQuery,
    GetEnrollmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetEnrollmentQuery, GetEnrollmentQueryVariables>(
    GetEnrollmentDocument,
    options
  );
}
export function useGetEnrollmentLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentQuery,
    GetEnrollmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetEnrollmentQuery, GetEnrollmentQueryVariables>(
    GetEnrollmentDocument,
    options
  );
}
export type GetEnrollmentQueryHookResult = ReturnType<
  typeof useGetEnrollmentQuery
>;
export type GetEnrollmentLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentLazyQuery
>;
export type GetEnrollmentQueryResult = Apollo.QueryResult<
  GetEnrollmentQuery,
  GetEnrollmentQueryVariables
>;
export const GetEnrollmentWithHouseholdDocument = gql`
  query GetEnrollmentWithHousehold($id: ID!) {
    enrollment(id: $id) {
      ...EnrollmentFields
      household {
        id
        shortId
        householdClients {
          ...HouseholdClientFieldsWithAssessments
        }
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${HouseholdClientFieldsWithAssessmentsFragmentDoc}
`;

/**
 * __useGetEnrollmentWithHouseholdQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentWithHouseholdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentWithHouseholdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentWithHouseholdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEnrollmentWithHouseholdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentWithHouseholdQuery,
    GetEnrollmentWithHouseholdQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentWithHouseholdQuery,
    GetEnrollmentWithHouseholdQueryVariables
  >(GetEnrollmentWithHouseholdDocument, options);
}
export function useGetEnrollmentWithHouseholdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentWithHouseholdQuery,
    GetEnrollmentWithHouseholdQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentWithHouseholdQuery,
    GetEnrollmentWithHouseholdQueryVariables
  >(GetEnrollmentWithHouseholdDocument, options);
}
export type GetEnrollmentWithHouseholdQueryHookResult = ReturnType<
  typeof useGetEnrollmentWithHouseholdQuery
>;
export type GetEnrollmentWithHouseholdLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentWithHouseholdLazyQuery
>;
export type GetEnrollmentWithHouseholdQueryResult = Apollo.QueryResult<
  GetEnrollmentWithHouseholdQuery,
  GetEnrollmentWithHouseholdQueryVariables
>;
export const GetEnrollmentEventsDocument = gql`
  query GetEnrollmentEvents($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    enrollment(id: $id) {
      id
      events(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...EventFields
        }
      }
    }
  }
  ${EventFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentEventsQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentEventsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetEnrollmentEventsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >(GetEnrollmentEventsDocument, options);
}
export function useGetEnrollmentEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >(GetEnrollmentEventsDocument, options);
}
export type GetEnrollmentEventsQueryHookResult = ReturnType<
  typeof useGetEnrollmentEventsQuery
>;
export type GetEnrollmentEventsLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentEventsLazyQuery
>;
export type GetEnrollmentEventsQueryResult = Apollo.QueryResult<
  GetEnrollmentEventsQuery,
  GetEnrollmentEventsQueryVariables
>;
export const GetEnrollmentServicesDocument = gql`
  query GetEnrollmentServices($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    enrollment(id: $id) {
      id
      services(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ServiceFields
        }
      }
    }
  }
  ${ServiceFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentServicesQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentServicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentServicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentServicesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetEnrollmentServicesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >(GetEnrollmentServicesDocument, options);
}
export function useGetEnrollmentServicesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >(GetEnrollmentServicesDocument, options);
}
export type GetEnrollmentServicesQueryHookResult = ReturnType<
  typeof useGetEnrollmentServicesQuery
>;
export type GetEnrollmentServicesLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentServicesLazyQuery
>;
export type GetEnrollmentServicesQueryResult = Apollo.QueryResult<
  GetEnrollmentServicesQuery,
  GetEnrollmentServicesQueryVariables
>;
export const GetClientHouseholdMemberCandidatesDocument = gql`
  query GetClientHouseholdMemberCandidates(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
  ) {
    client(id: $id) {
      id
      enrollments(limit: $limit, offset: $offset, sortOrder: MOST_RECENT) {
        offset
        limit
        nodesCount
        nodes {
          project {
            id
            projectName
          }
          household {
            id
            householdClients {
              ...HouseholdClientFields
            }
          }
        }
      }
    }
  }
  ${HouseholdClientFieldsFragmentDoc}
`;

/**
 * __useGetClientHouseholdMemberCandidatesQuery__
 *
 * To run a query within a React component, call `useGetClientHouseholdMemberCandidatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientHouseholdMemberCandidatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientHouseholdMemberCandidatesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientHouseholdMemberCandidatesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >(GetClientHouseholdMemberCandidatesDocument, options);
}
export function useGetClientHouseholdMemberCandidatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >(GetClientHouseholdMemberCandidatesDocument, options);
}
export type GetClientHouseholdMemberCandidatesQueryHookResult = ReturnType<
  typeof useGetClientHouseholdMemberCandidatesQuery
>;
export type GetClientHouseholdMemberCandidatesLazyQueryHookResult = ReturnType<
  typeof useGetClientHouseholdMemberCandidatesLazyQuery
>;
export type GetClientHouseholdMemberCandidatesQueryResult = Apollo.QueryResult<
  GetClientHouseholdMemberCandidatesQuery,
  GetClientHouseholdMemberCandidatesQueryVariables
>;
export const GetRecentIncomeBenefitsDocument = gql`
  query GetRecentIncomeBenefits($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      incomeBenefits(offset: $offset, limit: $limit) {
        nodesCount
        nodes {
          ...IncomeBenefitFields
        }
      }
    }
  }
  ${IncomeBenefitFieldsFragmentDoc}
`;

/**
 * __useGetRecentIncomeBenefitsQuery__
 *
 * To run a query within a React component, call `useGetRecentIncomeBenefitsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentIncomeBenefitsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentIncomeBenefitsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetRecentIncomeBenefitsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >(GetRecentIncomeBenefitsDocument, options);
}
export function useGetRecentIncomeBenefitsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >(GetRecentIncomeBenefitsDocument, options);
}
export type GetRecentIncomeBenefitsQueryHookResult = ReturnType<
  typeof useGetRecentIncomeBenefitsQuery
>;
export type GetRecentIncomeBenefitsLazyQueryHookResult = ReturnType<
  typeof useGetRecentIncomeBenefitsLazyQuery
>;
export type GetRecentIncomeBenefitsQueryResult = Apollo.QueryResult<
  GetRecentIncomeBenefitsQuery,
  GetRecentIncomeBenefitsQueryVariables
>;
export const GetRecentDisabilitiesDocument = gql`
  query GetRecentDisabilities($id: ID!) {
    client(id: $id) {
      id
      disabilityGroups {
        ...DisabilityGroupFields
      }
    }
  }
  ${DisabilityGroupFieldsFragmentDoc}
`;

/**
 * __useGetRecentDisabilitiesQuery__
 *
 * To run a query within a React component, call `useGetRecentDisabilitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentDisabilitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentDisabilitiesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetRecentDisabilitiesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >(GetRecentDisabilitiesDocument, options);
}
export function useGetRecentDisabilitiesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >(GetRecentDisabilitiesDocument, options);
}
export type GetRecentDisabilitiesQueryHookResult = ReturnType<
  typeof useGetRecentDisabilitiesQuery
>;
export type GetRecentDisabilitiesLazyQueryHookResult = ReturnType<
  typeof useGetRecentDisabilitiesLazyQuery
>;
export type GetRecentDisabilitiesQueryResult = Apollo.QueryResult<
  GetRecentDisabilitiesQuery,
  GetRecentDisabilitiesQueryVariables
>;
export const GetRecentHealthAndDvsDocument = gql`
  query GetRecentHealthAndDvs($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      healthAndDvs(offset: $offset, limit: $limit) {
        nodesCount
        nodes {
          ...HealthAndDvFields
        }
      }
    }
  }
  ${HealthAndDvFieldsFragmentDoc}
`;

/**
 * __useGetRecentHealthAndDvsQuery__
 *
 * To run a query within a React component, call `useGetRecentHealthAndDvsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentHealthAndDvsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentHealthAndDvsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetRecentHealthAndDvsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >(GetRecentHealthAndDvsDocument, options);
}
export function useGetRecentHealthAndDvsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >(GetRecentHealthAndDvsDocument, options);
}
export type GetRecentHealthAndDvsQueryHookResult = ReturnType<
  typeof useGetRecentHealthAndDvsQuery
>;
export type GetRecentHealthAndDvsLazyQueryHookResult = ReturnType<
  typeof useGetRecentHealthAndDvsLazyQuery
>;
export type GetRecentHealthAndDvsQueryResult = Apollo.QueryResult<
  GetRecentHealthAndDvsQuery,
  GetRecentHealthAndDvsQueryVariables
>;
export const GetFileDocument = gql`
  query GetFile($id: ID!) {
    file(id: $id) {
      ...FileFields
    }
  }
  ${FileFieldsFragmentDoc}
`;

/**
 * __useGetFileQuery__
 *
 * To run a query within a React component, call `useGetFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFileQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFileQuery(
  baseOptions: Apollo.QueryHookOptions<GetFileQuery, GetFileQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetFileQuery, GetFileQueryVariables>(
    GetFileDocument,
    options
  );
}
export function useGetFileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetFileQuery, GetFileQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetFileQuery, GetFileQueryVariables>(
    GetFileDocument,
    options
  );
}
export type GetFileQueryHookResult = ReturnType<typeof useGetFileQuery>;
export type GetFileLazyQueryHookResult = ReturnType<typeof useGetFileLazyQuery>;
export type GetFileQueryResult = Apollo.QueryResult<
  GetFileQuery,
  GetFileQueryVariables
>;
export const GetClientFilesDocument = gql`
  query GetClientFiles($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      files(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...FileFields
        }
      }
    }
  }
  ${FileFieldsFragmentDoc}
`;

/**
 * __useGetClientFilesQuery__
 *
 * To run a query within a React component, call `useGetClientFilesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientFilesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientFilesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientFilesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientFilesQuery,
    GetClientFilesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetClientFilesQuery, GetClientFilesQueryVariables>(
    GetClientFilesDocument,
    options
  );
}
export function useGetClientFilesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientFilesQuery,
    GetClientFilesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetClientFilesQuery, GetClientFilesQueryVariables>(
    GetClientFilesDocument,
    options
  );
}
export type GetClientFilesQueryHookResult = ReturnType<
  typeof useGetClientFilesQuery
>;
export type GetClientFilesLazyQueryHookResult = ReturnType<
  typeof useGetClientFilesLazyQuery
>;
export type GetClientFilesQueryResult = Apollo.QueryResult<
  GetClientFilesQuery,
  GetClientFilesQueryVariables
>;
export const OmniSearchClientsDocument = gql`
  query OmniSearchClients($textSearch: String!) {
    clientOmniSearch(textSearch: $textSearch, limit: 5) {
      limit
      nodesCount
      nodes {
        ...ClientOmniSearchFields
      }
    }
  }
  ${ClientOmniSearchFieldsFragmentDoc}
`;

/**
 * __useOmniSearchClientsQuery__
 *
 * To run a query within a React component, call `useOmniSearchClientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useOmniSearchClientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOmniSearchClientsQuery({
 *   variables: {
 *      textSearch: // value for 'textSearch'
 *   },
 * });
 */
export function useOmniSearchClientsQuery(
  baseOptions: Apollo.QueryHookOptions<
    OmniSearchClientsQuery,
    OmniSearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    OmniSearchClientsQuery,
    OmniSearchClientsQueryVariables
  >(OmniSearchClientsDocument, options);
}
export function useOmniSearchClientsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OmniSearchClientsQuery,
    OmniSearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    OmniSearchClientsQuery,
    OmniSearchClientsQueryVariables
  >(OmniSearchClientsDocument, options);
}
export type OmniSearchClientsQueryHookResult = ReturnType<
  typeof useOmniSearchClientsQuery
>;
export type OmniSearchClientsLazyQueryHookResult = ReturnType<
  typeof useOmniSearchClientsLazyQuery
>;
export type OmniSearchClientsQueryResult = Apollo.QueryResult<
  OmniSearchClientsQuery,
  OmniSearchClientsQueryVariables
>;
export const OmniSearchProjectsDocument = gql`
  query OmniSearchProjects($searchTerm: String!) {
    projects(searchTerm: $searchTerm, limit: 5) {
      limit
      nodesCount
      nodes {
        ...ProjectOmniSearchFields
      }
    }
  }
  ${ProjectOmniSearchFieldsFragmentDoc}
`;

/**
 * __useOmniSearchProjectsQuery__
 *
 * To run a query within a React component, call `useOmniSearchProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useOmniSearchProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOmniSearchProjectsQuery({
 *   variables: {
 *      searchTerm: // value for 'searchTerm'
 *   },
 * });
 */
export function useOmniSearchProjectsQuery(
  baseOptions: Apollo.QueryHookOptions<
    OmniSearchProjectsQuery,
    OmniSearchProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    OmniSearchProjectsQuery,
    OmniSearchProjectsQueryVariables
  >(OmniSearchProjectsDocument, options);
}
export function useOmniSearchProjectsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OmniSearchProjectsQuery,
    OmniSearchProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    OmniSearchProjectsQuery,
    OmniSearchProjectsQueryVariables
  >(OmniSearchProjectsDocument, options);
}
export type OmniSearchProjectsQueryHookResult = ReturnType<
  typeof useOmniSearchProjectsQuery
>;
export type OmniSearchProjectsLazyQueryHookResult = ReturnType<
  typeof useOmniSearchProjectsLazyQuery
>;
export type OmniSearchProjectsQueryResult = Apollo.QueryResult<
  OmniSearchProjectsQuery,
  OmniSearchProjectsQueryVariables
>;
export const GetRecentItemsDocument = gql`
  query GetRecentItems {
    currentUser {
      id
      recentItems {
        ... on Client {
          ...ClientOmniSearchFields
        }
        ... on Project {
          ...ProjectOmniSearchFields
        }
      }
    }
  }
  ${ClientOmniSearchFieldsFragmentDoc}
  ${ProjectOmniSearchFieldsFragmentDoc}
`;

/**
 * __useGetRecentItemsQuery__
 *
 * To run a query within a React component, call `useGetRecentItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentItemsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetRecentItemsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetRecentItemsQuery,
    GetRecentItemsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetRecentItemsQuery, GetRecentItemsQueryVariables>(
    GetRecentItemsDocument,
    options
  );
}
export function useGetRecentItemsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentItemsQuery,
    GetRecentItemsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetRecentItemsQuery, GetRecentItemsQueryVariables>(
    GetRecentItemsDocument,
    options
  );
}
export type GetRecentItemsQueryHookResult = ReturnType<
  typeof useGetRecentItemsQuery
>;
export type GetRecentItemsLazyQueryHookResult = ReturnType<
  typeof useGetRecentItemsLazyQuery
>;
export type GetRecentItemsQueryResult = Apollo.QueryResult<
  GetRecentItemsQuery,
  GetRecentItemsQueryVariables
>;
export const AddRecentItemDocument = gql`
  mutation AddRecentItem($itemId: ID!, $itemType: RecentItemType!) {
    addRecentItem(input: { itemId: $itemId, itemType: $itemType }) {
      id
      recentItems {
        ... on Client {
          ...ClientOmniSearchFields
        }
        ... on Project {
          ...ProjectOmniSearchFields
        }
      }
    }
  }
  ${ClientOmniSearchFieldsFragmentDoc}
  ${ProjectOmniSearchFieldsFragmentDoc}
`;
export type AddRecentItemMutationFn = Apollo.MutationFunction<
  AddRecentItemMutation,
  AddRecentItemMutationVariables
>;

/**
 * __useAddRecentItemMutation__
 *
 * To run a mutation, you first call `useAddRecentItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddRecentItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addRecentItemMutation, { data, loading, error }] = useAddRecentItemMutation({
 *   variables: {
 *      itemId: // value for 'itemId'
 *      itemType: // value for 'itemType'
 *   },
 * });
 */
export function useAddRecentItemMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddRecentItemMutation,
    AddRecentItemMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    AddRecentItemMutation,
    AddRecentItemMutationVariables
  >(AddRecentItemDocument, options);
}
export type AddRecentItemMutationHookResult = ReturnType<
  typeof useAddRecentItemMutation
>;
export type AddRecentItemMutationResult =
  Apollo.MutationResult<AddRecentItemMutation>;
export type AddRecentItemMutationOptions = Apollo.BaseMutationOptions<
  AddRecentItemMutation,
  AddRecentItemMutationVariables
>;
export const ClearRecentItemsDocument = gql`
  mutation ClearRecentItems {
    clearRecentItems(input: {}) {
      id
      recentItems {
        ... on Client {
          ...ClientOmniSearchFields
        }
        ... on Project {
          ...ProjectOmniSearchFields
        }
      }
    }
  }
  ${ClientOmniSearchFieldsFragmentDoc}
  ${ProjectOmniSearchFieldsFragmentDoc}
`;
export type ClearRecentItemsMutationFn = Apollo.MutationFunction<
  ClearRecentItemsMutation,
  ClearRecentItemsMutationVariables
>;

/**
 * __useClearRecentItemsMutation__
 *
 * To run a mutation, you first call `useClearRecentItemsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useClearRecentItemsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [clearRecentItemsMutation, { data, loading, error }] = useClearRecentItemsMutation({
 *   variables: {
 *   },
 * });
 */
export function useClearRecentItemsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ClearRecentItemsMutation,
    ClearRecentItemsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    ClearRecentItemsMutation,
    ClearRecentItemsMutationVariables
  >(ClearRecentItemsDocument, options);
}
export type ClearRecentItemsMutationHookResult = ReturnType<
  typeof useClearRecentItemsMutation
>;
export type ClearRecentItemsMutationResult =
  Apollo.MutationResult<ClearRecentItemsMutation>;
export type ClearRecentItemsMutationOptions = Apollo.BaseMutationOptions<
  ClearRecentItemsMutation,
  ClearRecentItemsMutationVariables
>;
export const GetRootPermissionsDocument = gql`
  query GetRootPermissions {
    access {
      ...RootPermissionsFragment
    }
  }
  ${RootPermissionsFragmentFragmentDoc}
`;

/**
 * __useGetRootPermissionsQuery__
 *
 * To run a query within a React component, call `useGetRootPermissionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRootPermissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRootPermissionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetRootPermissionsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetRootPermissionsQuery,
    GetRootPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRootPermissionsQuery,
    GetRootPermissionsQueryVariables
  >(GetRootPermissionsDocument, options);
}
export function useGetRootPermissionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRootPermissionsQuery,
    GetRootPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRootPermissionsQuery,
    GetRootPermissionsQueryVariables
  >(GetRootPermissionsDocument, options);
}
export type GetRootPermissionsQueryHookResult = ReturnType<
  typeof useGetRootPermissionsQuery
>;
export type GetRootPermissionsLazyQueryHookResult = ReturnType<
  typeof useGetRootPermissionsLazyQuery
>;
export type GetRootPermissionsQueryResult = Apollo.QueryResult<
  GetRootPermissionsQuery,
  GetRootPermissionsQueryVariables
>;
export const GetAllOrganizationsDocument = gql`
  query GetAllOrganizations {
    organizations(limit: 500, sortOrder: NAME) {
      nodesCount
      nodes {
        ...OrganizationFields
        projects(limit: 1) {
          nodesCount
        }
      }
    }
  }
  ${OrganizationFieldsFragmentDoc}
`;

/**
 * __useGetAllOrganizationsQuery__
 *
 * To run a query within a React component, call `useGetAllOrganizationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllOrganizationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllOrganizationsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >(GetAllOrganizationsDocument, options);
}
export function useGetAllOrganizationsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >(GetAllOrganizationsDocument, options);
}
export type GetAllOrganizationsQueryHookResult = ReturnType<
  typeof useGetAllOrganizationsQuery
>;
export type GetAllOrganizationsLazyQueryHookResult = ReturnType<
  typeof useGetAllOrganizationsLazyQuery
>;
export type GetAllOrganizationsQueryResult = Apollo.QueryResult<
  GetAllOrganizationsQuery,
  GetAllOrganizationsQueryVariables
>;
export const GetOrganizationPermissionsDocument = gql`
  query GetOrganizationPermissions($id: ID!) {
    organization(id: $id) {
      ...OrganizationPermissionsFields
    }
  }
  ${OrganizationPermissionsFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationPermissionsQuery__
 *
 * To run a query within a React component, call `useGetOrganizationPermissionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationPermissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationPermissionsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOrganizationPermissionsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetOrganizationPermissionsQuery,
    GetOrganizationPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetOrganizationPermissionsQuery,
    GetOrganizationPermissionsQueryVariables
  >(GetOrganizationPermissionsDocument, options);
}
export function useGetOrganizationPermissionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationPermissionsQuery,
    GetOrganizationPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationPermissionsQuery,
    GetOrganizationPermissionsQueryVariables
  >(GetOrganizationPermissionsDocument, options);
}
export type GetOrganizationPermissionsQueryHookResult = ReturnType<
  typeof useGetOrganizationPermissionsQuery
>;
export type GetOrganizationPermissionsLazyQueryHookResult = ReturnType<
  typeof useGetOrganizationPermissionsLazyQuery
>;
export type GetOrganizationPermissionsQueryResult = Apollo.QueryResult<
  GetOrganizationPermissionsQuery,
  GetOrganizationPermissionsQueryVariables
>;
export const GetProjectDocument = gql`
  query GetProject($id: ID!) {
    project(id: $id) {
      ...ProjectAllFields
    }
  }
  ${ProjectAllFieldsFragmentDoc}
`;

/**
 * __useGetProjectQuery__
 *
 * To run a query within a React component, call `useGetProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProjectQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectQuery,
    GetProjectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProjectQuery, GetProjectQueryVariables>(
    GetProjectDocument,
    options
  );
}
export function useGetProjectLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectQuery,
    GetProjectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetProjectQuery, GetProjectQueryVariables>(
    GetProjectDocument,
    options
  );
}
export type GetProjectQueryHookResult = ReturnType<typeof useGetProjectQuery>;
export type GetProjectLazyQueryHookResult = ReturnType<
  typeof useGetProjectLazyQuery
>;
export type GetProjectQueryResult = Apollo.QueryResult<
  GetProjectQuery,
  GetProjectQueryVariables
>;
export const GetProjectPermissionsDocument = gql`
  query GetProjectPermissions($id: ID!) {
    project(id: $id) {
      ...ProjectPermissionsFields
    }
  }
  ${ProjectPermissionsFieldsFragmentDoc}
`;

/**
 * __useGetProjectPermissionsQuery__
 *
 * To run a query within a React component, call `useGetProjectPermissionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectPermissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectPermissionsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProjectPermissionsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectPermissionsQuery,
    GetProjectPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectPermissionsQuery,
    GetProjectPermissionsQueryVariables
  >(GetProjectPermissionsDocument, options);
}
export function useGetProjectPermissionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectPermissionsQuery,
    GetProjectPermissionsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectPermissionsQuery,
    GetProjectPermissionsQueryVariables
  >(GetProjectPermissionsDocument, options);
}
export type GetProjectPermissionsQueryHookResult = ReturnType<
  typeof useGetProjectPermissionsQuery
>;
export type GetProjectPermissionsLazyQueryHookResult = ReturnType<
  typeof useGetProjectPermissionsLazyQuery
>;
export type GetProjectPermissionsQueryResult = Apollo.QueryResult<
  GetProjectPermissionsQuery,
  GetProjectPermissionsQueryVariables
>;
export const GetProjectEnrollmentsDocument = gql`
  query GetProjectEnrollments(
    $id: ID!
    $searchTerm: String
    $openOnDate: ISO8601Date
    $limit: Int = 10
    $offset: Int = 0
  ) {
    project(id: $id) {
      id
      enrollments(
        limit: $limit
        offset: $offset
        sortOrder: MOST_RECENT
        includeInProgress: true
        openOnDate: $openOnDate
        searchTerm: $searchTerm
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...EnrollmentFields
          client {
            id
            ...ClientName
            ...ClientIdentificationFields
          }
        }
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ClientNameFragmentDoc}
  ${ClientIdentificationFieldsFragmentDoc}
`;

/**
 * __useGetProjectEnrollmentsQuery__
 *
 * To run a query within a React component, call `useGetProjectEnrollmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectEnrollmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectEnrollmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      searchTerm: // value for 'searchTerm'
 *      openOnDate: // value for 'openOnDate'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectEnrollmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectEnrollmentsQuery,
    GetProjectEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectEnrollmentsQuery,
    GetProjectEnrollmentsQueryVariables
  >(GetProjectEnrollmentsDocument, options);
}
export function useGetProjectEnrollmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectEnrollmentsQuery,
    GetProjectEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectEnrollmentsQuery,
    GetProjectEnrollmentsQueryVariables
  >(GetProjectEnrollmentsDocument, options);
}
export type GetProjectEnrollmentsQueryHookResult = ReturnType<
  typeof useGetProjectEnrollmentsQuery
>;
export type GetProjectEnrollmentsLazyQueryHookResult = ReturnType<
  typeof useGetProjectEnrollmentsLazyQuery
>;
export type GetProjectEnrollmentsQueryResult = Apollo.QueryResult<
  GetProjectEnrollmentsQuery,
  GetProjectEnrollmentsQueryVariables
>;
export const DeleteProjectDocument = gql`
  mutation DeleteProject($input: DeleteProjectInput!) {
    deleteProject(input: $input) {
      clientMutationId
      project {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteProjectMutationFn = Apollo.MutationFunction<
  DeleteProjectMutation,
  DeleteProjectMutationVariables
>;

/**
 * __useDeleteProjectMutation__
 *
 * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteProjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteProjectMutation,
    DeleteProjectMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteProjectMutation,
    DeleteProjectMutationVariables
  >(DeleteProjectDocument, options);
}
export type DeleteProjectMutationHookResult = ReturnType<
  typeof useDeleteProjectMutation
>;
export type DeleteProjectMutationResult =
  Apollo.MutationResult<DeleteProjectMutation>;
export type DeleteProjectMutationOptions = Apollo.BaseMutationOptions<
  DeleteProjectMutation,
  DeleteProjectMutationVariables
>;
export const GetFunderDocument = gql`
  query GetFunder($id: ID!) {
    funder(id: $id) {
      ...FunderFields
    }
  }
  ${FunderFieldsFragmentDoc}
`;

/**
 * __useGetFunderQuery__
 *
 * To run a query within a React component, call `useGetFunderQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFunderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFunderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFunderQuery(
  baseOptions: Apollo.QueryHookOptions<GetFunderQuery, GetFunderQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetFunderQuery, GetFunderQueryVariables>(
    GetFunderDocument,
    options
  );
}
export function useGetFunderLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFunderQuery,
    GetFunderQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetFunderQuery, GetFunderQueryVariables>(
    GetFunderDocument,
    options
  );
}
export type GetFunderQueryHookResult = ReturnType<typeof useGetFunderQuery>;
export type GetFunderLazyQueryHookResult = ReturnType<
  typeof useGetFunderLazyQuery
>;
export type GetFunderQueryResult = Apollo.QueryResult<
  GetFunderQuery,
  GetFunderQueryVariables
>;
export const GetInventoryDocument = gql`
  query GetInventory($id: ID!) {
    inventory(id: $id) {
      ...InventoryFields
    }
  }
  ${InventoryFieldsFragmentDoc}
`;

/**
 * __useGetInventoryQuery__
 *
 * To run a query within a React component, call `useGetInventoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInventoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInventoryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetInventoryQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetInventoryQuery,
    GetInventoryQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetInventoryQuery, GetInventoryQueryVariables>(
    GetInventoryDocument,
    options
  );
}
export function useGetInventoryLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetInventoryQuery,
    GetInventoryQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetInventoryQuery, GetInventoryQueryVariables>(
    GetInventoryDocument,
    options
  );
}
export type GetInventoryQueryHookResult = ReturnType<
  typeof useGetInventoryQuery
>;
export type GetInventoryLazyQueryHookResult = ReturnType<
  typeof useGetInventoryLazyQuery
>;
export type GetInventoryQueryResult = Apollo.QueryResult<
  GetInventoryQuery,
  GetInventoryQueryVariables
>;
export const GetUnitsDocument = gql`
  query GetUnits(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
    $active: Boolean
  ) {
    inventory(id: $id) {
      id
      units(limit: $limit, offset: $offset, active: $active) {
        offset
        limit
        nodesCount
        nodes {
          ...UnitFields
        }
      }
    }
  }
  ${UnitFieldsFragmentDoc}
`;

/**
 * __useGetUnitsQuery__
 *
 * To run a query within a React component, call `useGetUnitsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUnitsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUnitsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      active: // value for 'active'
 *   },
 * });
 */
export function useGetUnitsQuery(
  baseOptions: Apollo.QueryHookOptions<GetUnitsQuery, GetUnitsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetUnitsQuery, GetUnitsQueryVariables>(
    GetUnitsDocument,
    options
  );
}
export function useGetUnitsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetUnitsQuery,
    GetUnitsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetUnitsQuery, GetUnitsQueryVariables>(
    GetUnitsDocument,
    options
  );
}
export type GetUnitsQueryHookResult = ReturnType<typeof useGetUnitsQuery>;
export type GetUnitsLazyQueryHookResult = ReturnType<
  typeof useGetUnitsLazyQuery
>;
export type GetUnitsQueryResult = Apollo.QueryResult<
  GetUnitsQuery,
  GetUnitsQueryVariables
>;
export const GetBedsDocument = gql`
  query GetBeds(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
    $bedType: InventoryBedType
    $active: Boolean
  ) {
    inventory(id: $id) {
      id
      beds(limit: $limit, offset: $offset, bedType: $bedType, active: $active) {
        offset
        limit
        nodesCount
        nodes {
          ...BedFields
        }
      }
    }
  }
  ${BedFieldsFragmentDoc}
`;

/**
 * __useGetBedsQuery__
 *
 * To run a query within a React component, call `useGetBedsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBedsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBedsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      bedType: // value for 'bedType'
 *      active: // value for 'active'
 *   },
 * });
 */
export function useGetBedsQuery(
  baseOptions: Apollo.QueryHookOptions<GetBedsQuery, GetBedsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetBedsQuery, GetBedsQueryVariables>(
    GetBedsDocument,
    options
  );
}
export function useGetBedsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBedsQuery, GetBedsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetBedsQuery, GetBedsQueryVariables>(
    GetBedsDocument,
    options
  );
}
export type GetBedsQueryHookResult = ReturnType<typeof useGetBedsQuery>;
export type GetBedsLazyQueryHookResult = ReturnType<typeof useGetBedsLazyQuery>;
export type GetBedsQueryResult = Apollo.QueryResult<
  GetBedsQuery,
  GetBedsQueryVariables
>;
export const GetProjectCocDocument = gql`
  query GetProjectCoc($id: ID!) {
    projectCoc(id: $id) {
      ...ProjectCocFields
    }
  }
  ${ProjectCocFieldsFragmentDoc}
`;

/**
 * __useGetProjectCocQuery__
 *
 * To run a query within a React component, call `useGetProjectCocQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectCocQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectCocQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProjectCocQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectCocQuery,
    GetProjectCocQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProjectCocQuery, GetProjectCocQueryVariables>(
    GetProjectCocDocument,
    options
  );
}
export function useGetProjectCocLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectCocQuery,
    GetProjectCocQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetProjectCocQuery, GetProjectCocQueryVariables>(
    GetProjectCocDocument,
    options
  );
}
export type GetProjectCocQueryHookResult = ReturnType<
  typeof useGetProjectCocQuery
>;
export type GetProjectCocLazyQueryHookResult = ReturnType<
  typeof useGetProjectCocLazyQuery
>;
export type GetProjectCocQueryResult = Apollo.QueryResult<
  GetProjectCocQuery,
  GetProjectCocQueryVariables
>;
export const GetOrganizationDocument = gql`
  query GetOrganization($id: ID!) {
    organization(id: $id) {
      ...OrganizationAllFields
    }
  }
  ${OrganizationAllFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationQuery__
 *
 * To run a query within a React component, call `useGetOrganizationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOrganizationQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetOrganizationQuery, GetOrganizationQueryVariables>(
    GetOrganizationDocument,
    options
  );
}
export function useGetOrganizationLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >(GetOrganizationDocument, options);
}
export type GetOrganizationQueryHookResult = ReturnType<
  typeof useGetOrganizationQuery
>;
export type GetOrganizationLazyQueryHookResult = ReturnType<
  typeof useGetOrganizationLazyQuery
>;
export type GetOrganizationQueryResult = Apollo.QueryResult<
  GetOrganizationQuery,
  GetOrganizationQueryVariables
>;
export const DeleteOrganizationDocument = gql`
  mutation DeleteOrganization($input: DeleteOrganizationInput!) {
    deleteOrganization(input: $input) {
      clientMutationId
      organization {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteOrganizationMutationFn = Apollo.MutationFunction<
  DeleteOrganizationMutation,
  DeleteOrganizationMutationVariables
>;

/**
 * __useDeleteOrganizationMutation__
 *
 * To run a mutation, you first call `useDeleteOrganizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteOrganizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteOrganizationMutation, { data, loading, error }] = useDeleteOrganizationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteOrganizationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteOrganizationMutation,
    DeleteOrganizationMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteOrganizationMutation,
    DeleteOrganizationMutationVariables
  >(DeleteOrganizationDocument, options);
}
export type DeleteOrganizationMutationHookResult = ReturnType<
  typeof useDeleteOrganizationMutation
>;
export type DeleteOrganizationMutationResult =
  Apollo.MutationResult<DeleteOrganizationMutation>;
export type DeleteOrganizationMutationOptions = Apollo.BaseMutationOptions<
  DeleteOrganizationMutation,
  DeleteOrganizationMutationVariables
>;
export const GetOrganizationWithPaginatedProjectsDocument = gql`
  query GetOrganizationWithPaginatedProjects(
    $id: ID!
    $searchTerm: String
    $limit: Int = 10
    $offset: Int = 0
  ) {
    organization(id: $id) {
      id
      projects(searchTerm: $searchTerm, limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ProjectAllFields
        }
      }
    }
  }
  ${ProjectAllFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationWithPaginatedProjectsQuery__
 *
 * To run a query within a React component, call `useGetOrganizationWithPaginatedProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationWithPaginatedProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationWithPaginatedProjectsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      searchTerm: // value for 'searchTerm'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetOrganizationWithPaginatedProjectsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >(GetOrganizationWithPaginatedProjectsDocument, options);
}
export function useGetOrganizationWithPaginatedProjectsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >(GetOrganizationWithPaginatedProjectsDocument, options);
}
export type GetOrganizationWithPaginatedProjectsQueryHookResult = ReturnType<
  typeof useGetOrganizationWithPaginatedProjectsQuery
>;
export type GetOrganizationWithPaginatedProjectsLazyQueryHookResult =
  ReturnType<typeof useGetOrganizationWithPaginatedProjectsLazyQuery>;
export type GetOrganizationWithPaginatedProjectsQueryResult =
  Apollo.QueryResult<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >;
export const GetProjectInventoriesDocument = gql`
  query GetProjectInventories($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    project(id: $id) {
      id
      inventories(limit: $limit, offset: $offset, sortOrder: START_DATE) {
        offset
        limit
        nodesCount
        nodes {
          ...InventoryFields
        }
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
`;

/**
 * __useGetProjectInventoriesQuery__
 *
 * To run a query within a React component, call `useGetProjectInventoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectInventoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectInventoriesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectInventoriesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >(GetProjectInventoriesDocument, options);
}
export function useGetProjectInventoriesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >(GetProjectInventoriesDocument, options);
}
export type GetProjectInventoriesQueryHookResult = ReturnType<
  typeof useGetProjectInventoriesQuery
>;
export type GetProjectInventoriesLazyQueryHookResult = ReturnType<
  typeof useGetProjectInventoriesLazyQuery
>;
export type GetProjectInventoriesQueryResult = Apollo.QueryResult<
  GetProjectInventoriesQuery,
  GetProjectInventoriesQueryVariables
>;
export const GetProjectProjectCocsDocument = gql`
  query GetProjectProjectCocs($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    project(id: $id) {
      id
      projectCocs(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ProjectCocFields
        }
      }
    }
  }
  ${ProjectCocFieldsFragmentDoc}
`;

/**
 * __useGetProjectProjectCocsQuery__
 *
 * To run a query within a React component, call `useGetProjectProjectCocsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectProjectCocsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectProjectCocsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectProjectCocsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >(GetProjectProjectCocsDocument, options);
}
export function useGetProjectProjectCocsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >(GetProjectProjectCocsDocument, options);
}
export type GetProjectProjectCocsQueryHookResult = ReturnType<
  typeof useGetProjectProjectCocsQuery
>;
export type GetProjectProjectCocsLazyQueryHookResult = ReturnType<
  typeof useGetProjectProjectCocsLazyQuery
>;
export type GetProjectProjectCocsQueryResult = Apollo.QueryResult<
  GetProjectProjectCocsQuery,
  GetProjectProjectCocsQueryVariables
>;
export const GetProjectFundersDocument = gql`
  query GetProjectFunders($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    project(id: $id) {
      id
      funders(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...FunderFields
        }
      }
    }
  }
  ${FunderFieldsFragmentDoc}
`;

/**
 * __useGetProjectFundersQuery__
 *
 * To run a query within a React component, call `useGetProjectFundersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectFundersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectFundersQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectFundersQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >(GetProjectFundersDocument, options);
}
export function useGetProjectFundersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >(GetProjectFundersDocument, options);
}
export type GetProjectFundersQueryHookResult = ReturnType<
  typeof useGetProjectFundersQuery
>;
export type GetProjectFundersLazyQueryHookResult = ReturnType<
  typeof useGetProjectFundersLazyQuery
>;
export type GetProjectFundersQueryResult = Apollo.QueryResult<
  GetProjectFundersQuery,
  GetProjectFundersQueryVariables
>;
export const DeleteInventoryDocument = gql`
  mutation DeleteInventory($input: DeleteInventoryInput!) {
    deleteInventory(input: $input) {
      clientMutationId
      inventory {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteInventoryMutationFn = Apollo.MutationFunction<
  DeleteInventoryMutation,
  DeleteInventoryMutationVariables
>;

/**
 * __useDeleteInventoryMutation__
 *
 * To run a mutation, you first call `useDeleteInventoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteInventoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteInventoryMutation, { data, loading, error }] = useDeleteInventoryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteInventoryMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteInventoryMutation,
    DeleteInventoryMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteInventoryMutation,
    DeleteInventoryMutationVariables
  >(DeleteInventoryDocument, options);
}
export type DeleteInventoryMutationHookResult = ReturnType<
  typeof useDeleteInventoryMutation
>;
export type DeleteInventoryMutationResult =
  Apollo.MutationResult<DeleteInventoryMutation>;
export type DeleteInventoryMutationOptions = Apollo.BaseMutationOptions<
  DeleteInventoryMutation,
  DeleteInventoryMutationVariables
>;
export const DeleteFunderDocument = gql`
  mutation DeleteFunder($input: DeleteFunderInput!) {
    deleteFunder(input: $input) {
      clientMutationId
      funder {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteFunderMutationFn = Apollo.MutationFunction<
  DeleteFunderMutation,
  DeleteFunderMutationVariables
>;

/**
 * __useDeleteFunderMutation__
 *
 * To run a mutation, you first call `useDeleteFunderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFunderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFunderMutation, { data, loading, error }] = useDeleteFunderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteFunderMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteFunderMutation,
    DeleteFunderMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteFunderMutation,
    DeleteFunderMutationVariables
  >(DeleteFunderDocument, options);
}
export type DeleteFunderMutationHookResult = ReturnType<
  typeof useDeleteFunderMutation
>;
export type DeleteFunderMutationResult =
  Apollo.MutationResult<DeleteFunderMutation>;
export type DeleteFunderMutationOptions = Apollo.BaseMutationOptions<
  DeleteFunderMutation,
  DeleteFunderMutationVariables
>;
export const DeleteProjectCocDocument = gql`
  mutation DeleteProjectCoc($input: DeleteProjectCocInput!) {
    deleteProjectCoc(input: $input) {
      clientMutationId
      projectCoc {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteProjectCocMutationFn = Apollo.MutationFunction<
  DeleteProjectCocMutation,
  DeleteProjectCocMutationVariables
>;

/**
 * __useDeleteProjectCocMutation__
 *
 * To run a mutation, you first call `useDeleteProjectCocMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteProjectCocMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteProjectCocMutation, { data, loading, error }] = useDeleteProjectCocMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteProjectCocMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteProjectCocMutation,
    DeleteProjectCocMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteProjectCocMutation,
    DeleteProjectCocMutationVariables
  >(DeleteProjectCocDocument, options);
}
export type DeleteProjectCocMutationHookResult = ReturnType<
  typeof useDeleteProjectCocMutation
>;
export type DeleteProjectCocMutationResult =
  Apollo.MutationResult<DeleteProjectCocMutation>;
export type DeleteProjectCocMutationOptions = Apollo.BaseMutationOptions<
  DeleteProjectCocMutation,
  DeleteProjectCocMutationVariables
>;
export const CreateBedsDocument = gql`
  mutation CreateBeds($input: CreateBedsInput!) {
    createBeds(input: $input) {
      clientMutationId
      inventory {
        ...InventoryFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateBedsMutationFn = Apollo.MutationFunction<
  CreateBedsMutation,
  CreateBedsMutationVariables
>;

/**
 * __useCreateBedsMutation__
 *
 * To run a mutation, you first call `useCreateBedsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBedsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBedsMutation, { data, loading, error }] = useCreateBedsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateBedsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateBedsMutation,
    CreateBedsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateBedsMutation, CreateBedsMutationVariables>(
    CreateBedsDocument,
    options
  );
}
export type CreateBedsMutationHookResult = ReturnType<
  typeof useCreateBedsMutation
>;
export type CreateBedsMutationResult =
  Apollo.MutationResult<CreateBedsMutation>;
export type CreateBedsMutationOptions = Apollo.BaseMutationOptions<
  CreateBedsMutation,
  CreateBedsMutationVariables
>;
export const CreateUnitsDocument = gql`
  mutation CreateUnits($input: CreateUnitsInput!) {
    createUnits(input: $input) {
      clientMutationId
      inventory {
        ...InventoryFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateUnitsMutationFn = Apollo.MutationFunction<
  CreateUnitsMutation,
  CreateUnitsMutationVariables
>;

/**
 * __useCreateUnitsMutation__
 *
 * To run a mutation, you first call `useCreateUnitsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUnitsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUnitsMutation, { data, loading, error }] = useCreateUnitsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUnitsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateUnitsMutation,
    CreateUnitsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateUnitsMutation, CreateUnitsMutationVariables>(
    CreateUnitsDocument,
    options
  );
}
export type CreateUnitsMutationHookResult = ReturnType<
  typeof useCreateUnitsMutation
>;
export type CreateUnitsMutationResult =
  Apollo.MutationResult<CreateUnitsMutation>;
export type CreateUnitsMutationOptions = Apollo.BaseMutationOptions<
  CreateUnitsMutation,
  CreateUnitsMutationVariables
>;
export const DeleteUnitsDocument = gql`
  mutation DeleteUnits($input: DeleteUnitsInput!) {
    deleteUnits(input: $input) {
      clientMutationId
      inventory {
        ...InventoryFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteUnitsMutationFn = Apollo.MutationFunction<
  DeleteUnitsMutation,
  DeleteUnitsMutationVariables
>;

/**
 * __useDeleteUnitsMutation__
 *
 * To run a mutation, you first call `useDeleteUnitsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUnitsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUnitsMutation, { data, loading, error }] = useDeleteUnitsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteUnitsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteUnitsMutation,
    DeleteUnitsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<DeleteUnitsMutation, DeleteUnitsMutationVariables>(
    DeleteUnitsDocument,
    options
  );
}
export type DeleteUnitsMutationHookResult = ReturnType<
  typeof useDeleteUnitsMutation
>;
export type DeleteUnitsMutationResult =
  Apollo.MutationResult<DeleteUnitsMutation>;
export type DeleteUnitsMutationOptions = Apollo.BaseMutationOptions<
  DeleteUnitsMutation,
  DeleteUnitsMutationVariables
>;
export const DeleteBedsDocument = gql`
  mutation DeleteBeds($input: DeleteBedsInput!) {
    deleteBeds(input: $input) {
      clientMutationId
      inventory {
        ...InventoryFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteBedsMutationFn = Apollo.MutationFunction<
  DeleteBedsMutation,
  DeleteBedsMutationVariables
>;

/**
 * __useDeleteBedsMutation__
 *
 * To run a mutation, you first call `useDeleteBedsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteBedsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteBedsMutation, { data, loading, error }] = useDeleteBedsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteBedsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteBedsMutation,
    DeleteBedsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<DeleteBedsMutation, DeleteBedsMutationVariables>(
    DeleteBedsDocument,
    options
  );
}
export type DeleteBedsMutationHookResult = ReturnType<
  typeof useDeleteBedsMutation
>;
export type DeleteBedsMutationResult =
  Apollo.MutationResult<DeleteBedsMutation>;
export type DeleteBedsMutationOptions = Apollo.BaseMutationOptions<
  DeleteBedsMutation,
  DeleteBedsMutationVariables
>;
export const UpdateUnitsDocument = gql`
  mutation UpdateUnits($input: UpdateUnitsInput!) {
    updateUnits(input: $input) {
      clientMutationId
      units {
        ...UnitFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${UnitFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateUnitsMutationFn = Apollo.MutationFunction<
  UpdateUnitsMutation,
  UpdateUnitsMutationVariables
>;

/**
 * __useUpdateUnitsMutation__
 *
 * To run a mutation, you first call `useUpdateUnitsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUnitsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUnitsMutation, { data, loading, error }] = useUpdateUnitsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateUnitsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateUnitsMutation,
    UpdateUnitsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<UpdateUnitsMutation, UpdateUnitsMutationVariables>(
    UpdateUnitsDocument,
    options
  );
}
export type UpdateUnitsMutationHookResult = ReturnType<
  typeof useUpdateUnitsMutation
>;
export type UpdateUnitsMutationResult =
  Apollo.MutationResult<UpdateUnitsMutation>;
export type UpdateUnitsMutationOptions = Apollo.BaseMutationOptions<
  UpdateUnitsMutation,
  UpdateUnitsMutationVariables
>;
export const UpdateBedsDocument = gql`
  mutation UpdateBeds($input: UpdateBedsInput!) {
    updateBeds(input: $input) {
      clientMutationId
      beds {
        ...BedFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${BedFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateBedsMutationFn = Apollo.MutationFunction<
  UpdateBedsMutation,
  UpdateBedsMutationVariables
>;

/**
 * __useUpdateBedsMutation__
 *
 * To run a mutation, you first call `useUpdateBedsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBedsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBedsMutation, { data, loading, error }] = useUpdateBedsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateBedsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateBedsMutation,
    UpdateBedsMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<UpdateBedsMutation, UpdateBedsMutationVariables>(
    UpdateBedsDocument,
    options
  );
}
export type UpdateBedsMutationHookResult = ReturnType<
  typeof useUpdateBedsMutation
>;
export type UpdateBedsMutationResult =
  Apollo.MutationResult<UpdateBedsMutation>;
export type UpdateBedsMutationOptions = Apollo.BaseMutationOptions<
  UpdateBedsMutation,
  UpdateBedsMutationVariables
>;
export const CreateDirectUploadMutationDocument = gql`
  mutation CreateDirectUploadMutation($input: DirectUploadInput!) {
    createDirectUpload(input: { input: $input }) {
      filename
      headers
      url
      blobId
      signedBlobId
    }
  }
`;
export type CreateDirectUploadMutationMutationFn = Apollo.MutationFunction<
  CreateDirectUploadMutationMutation,
  CreateDirectUploadMutationMutationVariables
>;

/**
 * __useCreateDirectUploadMutationMutation__
 *
 * To run a mutation, you first call `useCreateDirectUploadMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDirectUploadMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDirectUploadMutationMutation, { data, loading, error }] = useCreateDirectUploadMutationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateDirectUploadMutationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateDirectUploadMutationMutation,
    CreateDirectUploadMutationMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateDirectUploadMutationMutation,
    CreateDirectUploadMutationMutationVariables
  >(CreateDirectUploadMutationDocument, options);
}
export type CreateDirectUploadMutationMutationHookResult = ReturnType<
  typeof useCreateDirectUploadMutationMutation
>;
export type CreateDirectUploadMutationMutationResult =
  Apollo.MutationResult<CreateDirectUploadMutationMutation>;
export type CreateDirectUploadMutationMutationOptions =
  Apollo.BaseMutationOptions<
    CreateDirectUploadMutationMutation,
    CreateDirectUploadMutationMutationVariables
  >;
