import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: string;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
  /** Arbitrary JSON Type */
  JsonObject: any;
};

/** Autogenerated input type of AddHouseholdMembersToEnrollment */
export type AddHouseholdMembersToEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  householdId: Scalars['ID'];
  householdMembers: Array<EnrollmentHouseholdMemberInput>;
  /** Start date with format yyyy-mm-dd */
  startDate: Scalars['String'];
};

/** Autogenerated return type of AddHouseholdMembersToEnrollment */
export type AddHouseholdMembersToEnrollmentPayload = {
  __typename?: 'AddHouseholdMembersToEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollments?: Maybe<Array<Enrollment>>;
  errors: Array<ValidationError>;
};

/** HUD Assessment */
export type Assessment = {
  __typename?: 'Assessment';
  assessmentDate: Scalars['ISO8601DateTime'];
  assessmentLevel: AssessmentLevel;
  assessmentLocation: Scalars['String'];
  assessmentType: AssessmentType;
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  id: Scalars['ID'];
  prioritizationStatus: PrioritizationStatus;
};

/** HUD AssessmentLevel (4.19.4) */
export enum AssessmentLevel {
  /** (1) Crisis Needs Assessment */
  CrisisNeedsAssessment = 'CRISIS_NEEDS_ASSESSMENT',
  /** (2) Housing Needs Assessment */
  HousingNeedsAssessment = 'HOUSING_NEEDS_ASSESSMENT',
}

/** HUD AssessmentType (4.19.3) */
export enum AssessmentType {
  /** (3) In Person */
  InPerson = 'IN_PERSON',
  /** (1) Phone */
  Phone = 'PHONE',
  /** (2) Virtual */
  Virtual = 'VIRTUAL',
}

export type AssessmentsPaginated = {
  __typename?: 'AssessmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Assessment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** HUD Client */
export type Client = {
  __typename?: 'Client';
  dateUpdated: Scalars['ISO8601DateTime'];
  /** Date of birth as format yyyy-mm-dd */
  dob?: Maybe<Scalars['ISO8601Date']>;
  enrollments: EnrollmentsPaginated;
  firstName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName?: Maybe<Scalars['String']>;
  nameSuffix?: Maybe<Scalars['String']>;
  personalId: Scalars['String'];
  preferredName?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  ssnSerial?: Maybe<Scalars['String']>;
};

/** HUD Client */
export type ClientEnrollmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<EnrollmentSortOption>;
};

/** HMIS Client input */
export type ClientInput = {
  dob?: InputMaybe<Scalars['String']>;
  dobDataQuality?: InputMaybe<DobDataQuality>;
  ethnicity?: InputMaybe<Ethnicity>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Array<Gender>>;
  lastName?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  nameDataQuality?: InputMaybe<NameDataQuality>;
  nameSuffix?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  race?: InputMaybe<Array<Race>>;
  ssn?: InputMaybe<Scalars['String']>;
  ssnDataQuality?: InputMaybe<SsnDataQuality>;
  veteranStatus?: InputMaybe<VeteranStatus>;
};

/** HMIS Client search input */
export type ClientSearchInput = {
  /** Date of birth as format yyyy-mm-dd */
  dob?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  /** Client primary key */
  id?: InputMaybe<Scalars['ID']>;
  lastName?: InputMaybe<Scalars['String']>;
  organizations?: InputMaybe<Array<Scalars['ID']>>;
  personalId?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<Array<Scalars['ID']>>;
  /** Last 4 digits of SSN */
  ssnSerial?: InputMaybe<Scalars['String']>;
  /** Omnisearch string */
  textSearch?: InputMaybe<Scalars['String']>;
  warehouseId?: InputMaybe<Scalars['String']>;
};

/** HUD Client Sorting Options */
export enum ClientSortOption {
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
}

export type ClientsPaginated = {
  __typename?: 'ClientsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Client>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of CreateClient */
export type CreateClientInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ClientInput;
};

/** Autogenerated return type of CreateClient */
export type CreateClientPayload = {
  __typename?: 'CreateClientPayload';
  client?: Maybe<Client>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of CreateEnrollment */
export type CreateEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  householdMembers: Array<EnrollmentHouseholdMemberInput>;
  inProgress?: InputMaybe<Scalars['Boolean']>;
  projectId: Scalars['ID'];
  /** Start date with format yyyy-mm-dd */
  startDate: Scalars['String'];
};

/** Autogenerated return type of CreateEnrollment */
export type CreateEnrollmentPayload = {
  __typename?: 'CreateEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollments?: Maybe<Array<Enrollment>>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of CreateOrganization */
export type CreateOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: OrganizationInput;
};

/** Autogenerated return type of CreateOrganization */
export type CreateOrganizationPayload = {
  __typename?: 'CreateOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ProjectInput;
};

/** Autogenerated return type of CreateProject */
export type CreateProjectPayload = {
  __typename?: 'CreateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  project?: Maybe<Project>;
};

/** HUD DOB Data Quality (3.03.2) */
export enum DobDataQuality {
  /** (2) Approximate or partial DOB reported */
  DobApproximateOrPartialDobReported = 'DOB_APPROXIMATE_OR_PARTIAL_DOB_REPORTED',
  /** (8) Client doesn't know */
  DobClientDoesnTKnow = 'DOB_CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  DobClientRefused = 'DOB_CLIENT_REFUSED',
  /** (99) Data not collected */
  DobDataNotCollected = 'DOB_DATA_NOT_COLLECTED',
  /** (1) Full DOB reported */
  DobFullDobReported = 'DOB_FULL_DOB_REPORTED',
}

/** Autogenerated input type of DeleteEnrollment */
export type DeleteEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteEnrollment */
export type DeleteEnrollmentPayload = {
  __typename?: 'DeleteEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** HUD Enrollment */
export type Enrollment = {
  __typename?: 'Enrollment';
  assessments: AssessmentsPaginated;
  client: Client;
  entryDate?: Maybe<Scalars['ISO8601Date']>;
  events: EventsPaginated;
  exitDate?: Maybe<Scalars['ISO8601Date']>;
  household: Household;
  id: Scalars['ID'];
  inProgress: Scalars['Boolean'];
  project: Project;
  relationshipToHoH: RelationshipToHoH;
  services: ServicesPaginated;
};

/** HUD Enrollment */
export type EnrollmentAssessmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Enrollment */
export type EnrollmentEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Enrollment */
export type EnrollmentServicesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HMIS Enrollment household member input */
export type EnrollmentHouseholdMemberInput = {
  id: Scalars['ID'];
  relationshipToHoH: RelationshipToHoH;
};

/** HUD Enrollment Sorting Options */
export enum EnrollmentSortOption {
  MostRecent = 'MOST_RECENT',
}

export type EnrollmentsPaginated = {
  __typename?: 'EnrollmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Enrollment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** HUD Ethnicity (3.05.1) */
export enum Ethnicity {
  /** (1) Hispanic/Latin(a)(o)(x) */
  EthnicityHispanicLatinAOX = 'ETHNICITY_HISPANIC_LATIN_A_O_X_',
  /** (0) Non-Hispanic/Non-Latin(a)(o)(x) */
  EthnicityNonHispanicNonLatinAOX = 'ETHNICITY_NON_HISPANIC_NON_LATIN_A_O_X_',
  /** (99) Data not collected */
  EthnicityNotCollected = 'ETHNICITY_NOT_COLLECTED',
  /** (9) Client refused */
  EthnicityRefused = 'ETHNICITY_REFUSED',
  /** (8) Client doesn't know */
  EthnicityUnknown = 'ETHNICITY_UNKNOWN',
}

/** HUD Event */
export type Event = {
  __typename?: 'Event';
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  event: EventType;
  eventDate: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  locationCrisisOrPhHousing?: Maybe<Scalars['String']>;
  probSolDivRrResult?: Maybe<ProbSolDivRrResult>;
  referralCaseManageAfter?: Maybe<ReferralCaseManageAfter>;
  referralResult?: Maybe<ReferralResult>;
  resultDate?: Maybe<Scalars['ISO8601DateTime']>;
};

/** HUD EventType (4.20.2) */
export enum EventType {
  /** (2) Problem Solving/Diversion/Rapid Resolution intervention or service */
  ProblemSolvingDiversionRapidResolutionInterventionOrService = 'PROBLEM_SOLVING_DIVERSION_RAPID_RESOLUTION_INTERVENTION_OR_SERVICE',
  /** (18) Referral to a Housing Stability Voucher */
  ReferralToAHousingStabilityVoucher = 'REFERRAL_TO_A_HOUSING_STABILITY_VOUCHER',
  /** (16) Referral to emergency assistance/flex fund/furniture assistance */
  ReferralToEmergencyAssistanceFlexFundFurnitureAssistance = 'REFERRAL_TO_EMERGENCY_ASSISTANCE_FLEX_FUND_FURNITURE_ASSISTANCE',
  /** (17) Referral to Emergency Housing Voucher (EHV) */
  ReferralToEmergencyHousingVoucherEhv = 'REFERRAL_TO_EMERGENCY_HOUSING_VOUCHER_EHV_',
  /** (10) Referral to Emergency Shelter bed opening */
  ReferralToEmergencyShelterBedOpening = 'REFERRAL_TO_EMERGENCY_SHELTER_BED_OPENING',
  /** (7) Referral to Housing Navigation project or services */
  ReferralToHousingNavigationProjectOrServices = 'REFERRAL_TO_HOUSING_NAVIGATION_PROJECT_OR_SERVICES',
  /** (12) Referral to Joint TH-RRH project/unit/resource opening */
  ReferralToJointThRrhProjectUnitResourceOpening = 'REFERRAL_TO_JOINT_TH_RRH_PROJECT_UNIT_RESOURCE_OPENING',
  /** (8) Referral to Non-continuum services: Ineligible for continuum services */
  ReferralToNonContinuumServicesIneligibleForContinuumServices = 'REFERRAL_TO_NON_CONTINUUM_SERVICES_INELIGIBLE_FOR_CONTINUUM_SERVICES',
  /** (9) Referral to Non-continuum services: No availability in continuum services */
  ReferralToNonContinuumServicesNoAvailabilityInContinuumServices = 'REFERRAL_TO_NON_CONTINUUM_SERVICES_NO_AVAILABILITY_IN_CONTINUUM_SERVICES',
  /** (15) Referral to Other PH project/unit/resource opening */
  ReferralToOtherPhProjectUnitResourceOpening = 'REFERRAL_TO_OTHER_PH_PROJECT_UNIT_RESOURCE_OPENING',
  /** (5) Referral to Post-placement/ follow-up case management */
  ReferralToPostPlacementFollowUpCaseManagement = 'REFERRAL_TO_POST_PLACEMENT_FOLLOW_UP_CASE_MANAGEMENT',
  /** (1) Referral to Prevention Assistance project */
  ReferralToPreventionAssistanceProject = 'REFERRAL_TO_PREVENTION_ASSISTANCE_PROJECT',
  /** (14) Referral to PSH project resource opening */
  ReferralToPshProjectResourceOpening = 'REFERRAL_TO_PSH_PROJECT_RESOURCE_OPENING',
  /** (13) Referral to RRH project resource opening */
  ReferralToRrhProjectResourceOpening = 'REFERRAL_TO_RRH_PROJECT_RESOURCE_OPENING',
  /** (3) Referral to scheduled Coordinated Entry Crisis Needs Assessment */
  ReferralToScheduledCoordinatedEntryCrisisNeedsAssessment = 'REFERRAL_TO_SCHEDULED_COORDINATED_ENTRY_CRISIS_NEEDS_ASSESSMENT',
  /** (4) Referral to scheduled Coordinated Entry Housing Needs Assessment */
  ReferralToScheduledCoordinatedEntryHousingNeedsAssessment = 'REFERRAL_TO_SCHEDULED_COORDINATED_ENTRY_HOUSING_NEEDS_ASSESSMENT',
  /** (6) Referral to Street Outreach project or services */
  ReferralToStreetOutreachProjectOrServices = 'REFERRAL_TO_STREET_OUTREACH_PROJECT_OR_SERVICES',
  /** (11) Referral to Transitional Housing bed/unit opening */
  ReferralToTransitionalHousingBedUnitOpening = 'REFERRAL_TO_TRANSITIONAL_HOUSING_BED_UNIT_OPENING',
}

export type EventsPaginated = {
  __typename?: 'EventsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Event>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** HUD Gender (1.7) */
export enum Gender {
  /** (8) Client doesn't know */
  GenderClientDoesnTKnow = 'GENDER_CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  GenderClientRefused = 'GENDER_CLIENT_REFUSED',
  /** (99) Data not collected */
  GenderDataNotCollected = 'GENDER_DATA_NOT_COLLECTED',
  /** (0) Female */
  GenderFemale = 'GENDER_FEMALE',
  /** (1) Male */
  GenderMale = 'GENDER_MALE',
  /** (4) A gender other than singularly female or male (e.g., non-binary, genderfluid, agender, culturally specific gender) */
  GenderNoSingleGender = 'GENDER_NO_SINGLE_GENDER',
  /** (6) Questioning */
  GenderQuestioning = 'GENDER_QUESTIONING',
  /** (5) Transgender */
  GenderTransgender = 'GENDER_TRANSGENDER',
}

/** HUD HOPWAMedAssistedLivingFac (2.02.9) */
export enum HopwaMedAssistedLivingFac {
  /** (0) No */
  No = 'NO',
  /** (2) Non-HOPWA Funded Project */
  NonHopwaFundedProject = 'NON_HOPWA_FUNDED_PROJECT',
  /** (1) Yes */
  Yes = 'YES',
}

/** HUD Household */
export type Household = {
  __typename?: 'Household';
  householdClients: Array<HouseholdClient>;
  id: Scalars['ID'];
};

/** HUD Client within a Household */
export type HouseholdClient = {
  __typename?: 'HouseholdClient';
  client: Client;
  enrollment: Enrollment;
  id: Scalars['ID'];
  relationshipToHoH: RelationshipToHoH;
};

/** HUD HousingType (2.02.D) */
export enum HousingType {
  /** (2) Site-based - clustered / multiple sites */
  SiteBasedClusteredMultipleSites = 'SITE_BASED_CLUSTERED_MULTIPLE_SITES',
  /** (1) Site-based - single site */
  SiteBasedSingleSite = 'SITE_BASED_SINGLE_SITE',
  /** (3) Tenant-based - scattered site */
  TenantBasedScatteredSite = 'TENANT_BASED_SCATTERED_SITE',
}

export type Mutation = {
  __typename?: 'Mutation';
  addHouseholdMembersToEnrollment?: Maybe<AddHouseholdMembersToEnrollmentPayload>;
  createClient?: Maybe<CreateClientPayload>;
  createEnrollment?: Maybe<CreateEnrollmentPayload>;
  createOrganization?: Maybe<CreateOrganizationPayload>;
  createProject?: Maybe<CreateProjectPayload>;
  deleteEnrollment?: Maybe<DeleteEnrollmentPayload>;
  setHoHForEnrollment?: Maybe<SetHoHForEnrollmentPayload>;
  updateEnrollment?: Maybe<UpdateEnrollmentPayload>;
  updateOrganization?: Maybe<UpdateOrganizationPayload>;
  updateProject?: Maybe<UpdateProjectPayload>;
};

export type MutationAddHouseholdMembersToEnrollmentArgs = {
  input: AddHouseholdMembersToEnrollmentInput;
};

export type MutationCreateClientArgs = {
  input: CreateClientInput;
};

export type MutationCreateEnrollmentArgs = {
  input: CreateEnrollmentInput;
};

export type MutationCreateOrganizationArgs = {
  input: CreateOrganizationInput;
};

export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};

export type MutationDeleteEnrollmentArgs = {
  input: DeleteEnrollmentInput;
};

export type MutationSetHoHForEnrollmentArgs = {
  input: SetHoHForEnrollmentInput;
};

export type MutationUpdateEnrollmentArgs = {
  input: UpdateEnrollmentInput;
};

export type MutationUpdateOrganizationArgs = {
  input: UpdateOrganizationInput;
};

export type MutationUpdateProjectArgs = {
  input: UpdateProjectInput;
};

/** HUD NameDataQuality (3.01.5) */
export enum NameDataQuality {
  /** (8) Client doesn't know */
  NameClientDoesnTKnow = 'NAME_CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  NameClientRefused = 'NAME_CLIENT_REFUSED',
  /** (99) Data not collected */
  NameDataNotCollected = 'NAME_DATA_NOT_COLLECTED',
  /** (1) Full name reported */
  NameFullNameReported = 'NAME_FULL_NAME_REPORTED',
  /** (2) Partial, street name, or code name reported */
  NamePartialStreetNameOrCodeNameReported = 'NAME_PARTIAL_STREET_NAME_OR_CODE_NAME_REPORTED',
}

/** HUD Organization */
export type Organization = {
  __typename?: 'Organization';
  contactInformation?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  organizationName: Scalars['String'];
  /** Get a list of projects for this organization */
  projects: Array<Project>;
  victimServiceProvider?: Maybe<Scalars['Boolean']>;
};

/** HUD Organization */
export type OrganizationProjectsArgs = {
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HMIS Organization input */
export type OrganizationInput = {
  contactInformation?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  victimServiceProvider?: InputMaybe<Scalars['Boolean']>;
};

/** HUD Organization Sorting Options */
export enum OrganizationSortOption {
  Name = 'NAME',
}

/** HUD PATHReferralOutcome (P2.A) */
export enum PathReferralOutcome {
  /** (1) Attained */
  Attained = 'ATTAINED',
  /** (2) Not attained */
  NotAttained = 'NOT_ATTAINED',
  /** (3) Unknown */
  Unknown = 'UNKNOWN',
}

/** HUD PrioritizationStatus (4.19.7) */
export enum PrioritizationStatus {
  /** (2) Not placed on prioritization list */
  NotPlacedOnPrioritizationList = 'NOT_PLACED_ON_PRIORITIZATION_LIST',
  /** (1) Placed on prioritization list */
  PlacedOnPrioritizationList = 'PLACED_ON_PRIORITIZATION_LIST',
}

/** HUD ProbSolDivRRResult (1.7) */
export enum ProbSolDivRrResult {
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (0) No */
  No = 'NO',
  /** (1) Yes */
  Yes = 'YES',
}

/** HUD Project */
export type Project = {
  __typename?: 'Project';
  HMISParticipatingProject?: Maybe<Scalars['Boolean']>;
  HOPWAMedAssistedLivingFac?: Maybe<HopwaMedAssistedLivingFac>;
  contactInformation?: Maybe<Scalars['String']>;
  continuumProject?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  housingType?: Maybe<HousingType>;
  id: Scalars['ID'];
  operatingEndDate?: Maybe<Scalars['ISO8601Date']>;
  operatingStartDate: Scalars['ISO8601Date'];
  organization: Organization;
  projectName: Scalars['String'];
  projectType?: Maybe<ProjectType>;
  residentialAffiliation?: Maybe<Scalars['Boolean']>;
  targetPopulation?: Maybe<TargetPopulation>;
  trackingMethod?: Maybe<TrackingMethod>;
};

/** HMIS Project input */
export type ProjectInput = {
  HMISParticipatingProject?: InputMaybe<Scalars['Boolean']>;
  HOPWAMedAssistedLivingFac?: InputMaybe<HopwaMedAssistedLivingFac>;
  contactInformation?: InputMaybe<Scalars['String']>;
  continuumProject?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Scalars['String']>;
  housingType?: InputMaybe<HousingType>;
  /** Date with format yyyy-mm-dd */
  operatingEndDate?: InputMaybe<Scalars['String']>;
  /** Date with format yyyy-mm-dd */
  operatingStartDate?: InputMaybe<Scalars['String']>;
  organizationId?: InputMaybe<Scalars['ID']>;
  projectName?: InputMaybe<Scalars['String']>;
  projectType?: InputMaybe<ProjectType>;
  residentialAffiliation?: InputMaybe<Scalars['Boolean']>;
  targetPopulation?: InputMaybe<TargetPopulation>;
  trackingMethod?: InputMaybe<TrackingMethod>;
};

/** HUD Project Sorting Options */
export enum ProjectSortOption {
  Name = 'NAME',
  OrganizationAndName = 'ORGANIZATION_AND_NAME',
}

/** HUD Project Types */
export enum ProjectType {
  /** Coordinated Entry */
  Ce = 'CE',
  /** Day Shelter */
  DayShelter = 'DAY_SHELTER',
  /** Emergency Shelter */
  Es = 'ES',
  /** Permanent Housing Only */
  Oph = 'OPH',
  /** Other */
  Other = 'OTHER',
  /** Permanent Housing */
  Ph = 'PH',
  /** Homelessness Prevention */
  Prevention = 'PREVENTION',
  /** Permanent Supportive Housing */
  Psh = 'PSH',
  /** Rapid Re-Housing */
  Rrh = 'RRH',
  /** Services Only */
  ServicesOnly = 'SERVICES_ONLY',
  /** Safe Haven */
  Sh = 'SH',
  /** Street Outreach */
  So = 'SO',
  /** Transitional Housing */
  Th = 'TH',
}

export type Query = {
  __typename?: 'Query';
  /** Client lookup */
  client?: Maybe<Client>;
  /** Search for clients */
  clientSearch: ClientsPaginated;
  /** Enrollment lookup */
  enrollment?: Maybe<Enrollment>;
  /** Organization lookup */
  organization?: Maybe<Organization>;
  /** Get a list of organizations */
  organizations: Array<Organization>;
  /** Project lookup */
  project?: Maybe<Project>;
  /** Get a list of projects */
  projects: Array<Project>;
};

export type QueryClientArgs = {
  id: Scalars['ID'];
};

export type QueryClientSearchArgs = {
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ClientSortOption>;
};

export type QueryEnrollmentArgs = {
  id: Scalars['ID'];
};

export type QueryOrganizationArgs = {
  id: Scalars['ID'];
};

export type QueryOrganizationsArgs = {
  sortOrder?: InputMaybe<OrganizationSortOption>;
};

export type QueryProjectArgs = {
  id: Scalars['ID'];
};

export type QueryProjectsArgs = {
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HUD Race (1.7) */
export enum Race {
  /** (AmIndAKNative) American Indian, Alaska Native, or Indigenous */
  RaceAmIndAkNative = 'RACE_AM_IND_AK_NATIVE',
  /** (Asian) Asian or Asian American */
  RaceAsian = 'RACE_ASIAN',
  /** (BlackAfAmerican) Black, African American, or African */
  RaceBlackAfAmerican = 'RACE_BLACK_AF_AMERICAN',
  /** (NativeHIPacific) Native Hawaiian or Pacific Islander */
  RaceNativeHiPacific = 'RACE_NATIVE_HI_PACIFIC',
  /** (99) Data not collected */
  RaceNotCollected = 'RACE_NOT_COLLECTED',
  /** (9) Client refused */
  RaceRefused = 'RACE_REFUSED',
  /** (8) Client doesn't know */
  RaceUnknown = 'RACE_UNKNOWN',
  /** (White) White */
  RaceWhite = 'RACE_WHITE',
}

/** HUD RecordType (1.4) */
export enum RecordType {
  /** (200) Bed night */
  BedNight = 'BED_NIGHT',
  /** (300) C2 Moving On Assistance Provided */
  C2MovingOnAssistanceProvided = 'C2_MOVING_ON_ASSISTANCE_PROVIDED',
  /** (151) HOPWA financial assistance */
  HopwaFinancialAssistance = 'HOPWA_FINANCIAL_ASSISTANCE',
  /** (143) HOPWA service */
  HopwaService = 'HOPWA_SERVICE',
  /** (210) HUD-VASH OTH voucher tracking */
  HudVashOthVoucherTracking = 'HUD_VASH_OTH_VOUCHER_TRACKING',
  /** (161) PATH referral */
  PathReferral = 'PATH_REFERRAL',
  /** (141) PATH service */
  PathService = 'PATH_SERVICE',
  /** (162) RHY referral */
  RhyReferral = 'RHY_REFERRAL',
  /** (142) RHY service connections */
  RhyServiceConnections = 'RHY_SERVICE_CONNECTIONS',
  /** (152) SSVF financial assistance */
  SsvfFinancialAssistance = 'SSVF_FINANCIAL_ASSISTANCE',
  /** (144) SSVF service */
  SsvfService = 'SSVF_SERVICE',
}

/** HUD ReferralCaseManageAfter (1.7) */
export enum ReferralCaseManageAfter {
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (0) No */
  No = 'NO',
  /** (1) Yes */
  Yes = 'YES',
}

/** HUD ReferralResult (4.20.D) */
export enum ReferralResult {
  /** (1) Successful referral: client accepted */
  SuccessfulReferralClientAccepted = 'SUCCESSFUL_REFERRAL_CLIENT_ACCEPTED',
  /** (2) Unsuccessful referral: client rejected */
  UnsuccessfulReferralClientRejected = 'UNSUCCESSFUL_REFERRAL_CLIENT_REJECTED',
  /** (3) Unsuccessful referral: provider rejected */
  UnsuccessfulReferralProviderRejected = 'UNSUCCESSFUL_REFERRAL_PROVIDER_REJECTED',
}

/** HUD RelationshipToHoH (3.15.1) */
export enum RelationshipToHoH {
  /** (2) Child */
  Child = 'CHILD',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Other relative */
  OtherRelative = 'OTHER_RELATIVE',
  /** (1) Self (head of household) */
  SelfHeadOfHousehold = 'SELF_HEAD_OF_HOUSEHOLD_',
  /** (3) Spouse or partner */
  SpouseOrPartner = 'SPOUSE_OR_PARTNER',
  /** (5) Unrelated household member */
  UnrelatedHouseholdMember = 'UNRELATED_HOUSEHOLD_MEMBER',
}

/** HUD SSN Data Quality (3.02.2) */
export enum SsnDataQuality {
  /** (2) Approximate or partial SSN reported */
  SsnApproximateOrPartialSsnReported = 'SSN_APPROXIMATE_OR_PARTIAL_SSN_REPORTED',
  /** (8) Client doesn't know */
  SsnClientDoesnTKnow = 'SSN_CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  SsnClientRefused = 'SSN_CLIENT_REFUSED',
  /** (99) Data not collected */
  SsnDataNotCollected = 'SSN_DATA_NOT_COLLECTED',
  /** (1) Full SSN reported */
  SsnFullSsnReported = 'SSN_FULL_SSN_REPORTED',
}

/** HUD Service */
export type Service = {
  __typename?: 'Service';
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateProvided: Scalars['ISO8601Date'];
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  faaAmount?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  movingOnOtherType?: Maybe<Scalars['String']>;
  otherTypeProvided?: Maybe<Scalars['String']>;
  recordType: RecordType;
  referralOutcome?: Maybe<PathReferralOutcome>;
  subTypeProvided?: Maybe<ServiceSubTypeProvided>;
  typeProvided: ServiceTypeProvided;
};

/** HUD Service TypeProvided:SubTypeProvided aggregate (V2.A, V2.B, V2.C) */
export enum ServiceSubTypeProvided {
  /** (12) Child care */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsChildCare = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__CHILD_CARE',
  /** (2) Daily living services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsDailyLivingServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__DAILY_LIVING_SERVICES',
  /** (6) Fiduciary and representative payee services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsFiduciaryAndRepresentativePayeeServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__FIDUCIARY_AND_REPRESENTATIVE_PAYEE_SERVICES',
  /** (1) Health care services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsHealthCareServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__HEALTH_CARE_SERVICES',
  /** (13) Housing counseling */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsHousingCounseling = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__HOUSING_COUNSELING',
  /** (5) Income support services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsIncomeSupportServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__INCOME_SUPPORT_SERVICES',
  /** (7) Legal services - child support */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesChildSupport = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_CHILD_SUPPORT',
  /** (8) Legal services - eviction prevention */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesEvictionPrevention = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_EVICTION_PREVENTION',
  /** (11) Legal services - other */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesOther = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OTHER',
  /** (9) Legal services - outstanding fines and penalties */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesOutstandingFinesAndPenalties = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OUTSTANDING_FINES_AND_PENALTIES',
  /** (10) Legal services - restore / acquire driver's license */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesRestoreAcquireDriverSLicense = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_RESTORE_ACQUIRE_DRIVER_S_LICENSE',
  /** (3) Personal financial planning services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsPersonalFinancialPlanningServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__PERSONAL_FINANCIAL_PLANNING_SERVICES',
  /** (4) Transportation services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsTransportationServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__TRANSPORTATION_SERVICES',
  /** (3) Educational assistance */
  SsvfServiceAssistanceObtainingVaBenefitsEducationalAssistance = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__EDUCATIONAL_ASSISTANCE',
  /** (2) Employment and training services */
  SsvfServiceAssistanceObtainingVaBenefitsEmploymentAndTrainingServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (4) Health care services */
  SsvfServiceAssistanceObtainingVaBenefitsHealthCareServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__HEALTH_CARE_SERVICES',
  /** (1) VA vocational and rehabilitation counseling */
  SsvfServiceAssistanceObtainingVaBenefitsVaVocationalAndRehabilitationCounseling = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__VA_VOCATIONAL_AND_REHABILITATION_COUNSELING',
  /** (10) Child care */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsChildCare = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__CHILD_CARE',
  /** (4) Fiduciary and representative payee services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsFiduciaryAndRepresentativePayeeServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__FIDUCIARY_AND_REPRESENTATIVE_PAYEE_SERVICES',
  /** (11) Housing counseling */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsHousingCounseling = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__HOUSING_COUNSELING',
  /** (3) Income support services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsIncomeSupportServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__INCOME_SUPPORT_SERVICES',
  /** (5) Legal services - child support */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesChildSupport = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_CHILD_SUPPORT',
  /** (6) Legal services - eviction prevention */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesEvictionPrevention = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_EVICTION_PREVENTION',
  /** (9) Legal services - other */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesOther = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OTHER',
  /** (7) Legal services - outstanding fines and penalties */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesOutstandingFinesAndPenalties = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OUTSTANDING_FINES_AND_PENALTIES',
  /** (8) Legal services - restore / acquire driver's license */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesRestoreAcquireDriverSLicense = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_RESTORE_ACQUIRE_DRIVER_S_LICENSE',
  /** (1) Personal financial planning services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsPersonalFinancialPlanningServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__PERSONAL_FINANCIAL_PLANNING_SERVICES',
  /** (2) Transportation services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsTransportationServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__TRANSPORTATION_SERVICES',
}

/** HUD Service RecordType:TypeProvided aggregate (P1.2, R14.2, W1.2, V2.2, W2.3, V3.3, P2.2, 4.14, V8.1, C2.2) */
export enum ServiceTypeProvided {
  /** (200) BedNight */
  BedNightBedNight = 'BED_NIGHT__BED_NIGHT',
  /** (2) Financial assistance for Moving On (e.g., security deposit, moving expenses) */
  C2MovingOnAssistanceProvidedFinancialAssistanceForMovingOnEGSecurityDepositMovingExpenses = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__FINANCIAL_ASSISTANCE_FOR_MOVING_ON_E_G_SECURITY_DEPOSIT_MOVING_EXPENSES_',
  /** (4) Housing referral/placement */
  C2MovingOnAssistanceProvidedHousingReferralPlacement = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__HOUSING_REFERRAL_PLACEMENT',
  /** (3) Non-financial assistance for Moving On (e.g., housing navigation, transition support) */
  C2MovingOnAssistanceProvidedNonFinancialAssistanceForMovingOnEGHousingNavigationTransitionSupport = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__NON_FINANCIAL_ASSISTANCE_FOR_MOVING_ON_E_G_HOUSING_NAVIGATION_TRANSITION_SUPPORT_',
  /** (5) Other (please specify) */
  C2MovingOnAssistanceProvidedOtherPleaseSpecify = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__OTHER_PLEASE_SPECIFY_',
  /** (1) Subsidized housing application assistance */
  C2MovingOnAssistanceProvidedSubsidizedHousingApplicationAssistance = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__SUBSIDIZED_HOUSING_APPLICATION_ASSISTANCE',
  /** (7) Mortgage assistance */
  HopwaFinancialAssistanceMortgageAssistance = 'HOPWA_FINANCIAL_ASSISTANCE__MORTGAGE_ASSISTANCE',
  /** (1) Rental assistance */
  HopwaFinancialAssistanceRentalAssistance = 'HOPWA_FINANCIAL_ASSISTANCE__RENTAL_ASSISTANCE',
  /** (2) Security deposits */
  HopwaFinancialAssistanceSecurityDeposits = 'HOPWA_FINANCIAL_ASSISTANCE__SECURITY_DEPOSITS',
  /** (3) Utility deposits */
  HopwaFinancialAssistanceUtilityDeposits = 'HOPWA_FINANCIAL_ASSISTANCE__UTILITY_DEPOSITS',
  /** (4) Utility payments */
  HopwaFinancialAssistanceUtilityPayments = 'HOPWA_FINANCIAL_ASSISTANCE__UTILITY_PAYMENTS',
  /** (1) Adult day care and personal assistance */
  HopwaServiceAdultDayCareAndPersonalAssistance = 'HOPWA_SERVICE__ADULT_DAY_CARE_AND_PERSONAL_ASSISTANCE',
  /** (2) Case management */
  HopwaServiceCaseManagement = 'HOPWA_SERVICE__CASE_MANAGEMENT',
  /** (3) Child care */
  HopwaServiceChildCare = 'HOPWA_SERVICE__CHILD_CARE',
  /** (4) Criminal justice/legal services */
  HopwaServiceCriminalJusticeLegalServices = 'HOPWA_SERVICE__CRIMINAL_JUSTICE_LEGAL_SERVICES',
  /** (5) Education */
  HopwaServiceEducation = 'HOPWA_SERVICE__EDUCATION',
  /** (6) Employment and training services */
  HopwaServiceEmploymentAndTrainingServices = 'HOPWA_SERVICE__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (7) Food/meals/nutritional services */
  HopwaServiceFoodMealsNutritionalServices = 'HOPWA_SERVICE__FOOD_MEALS_NUTRITIONAL_SERVICES',
  /** (8) Health/medical care */
  HopwaServiceHealthMedicalCare = 'HOPWA_SERVICE__HEALTH_MEDICAL_CARE',
  /** (9) Life skills training */
  HopwaServiceLifeSkillsTraining = 'HOPWA_SERVICE__LIFE_SKILLS_TRAINING',
  /** (10) Mental health care/counseling */
  HopwaServiceMentalHealthCareCounseling = 'HOPWA_SERVICE__MENTAL_HEALTH_CARE_COUNSELING',
  /** (14) Other HOPWA funded service */
  HopwaServiceOtherHopwaFundedService = 'HOPWA_SERVICE__OTHER_HOPWA_FUNDED_SERVICE',
  /** (11) Outreach and/or engagement */
  HopwaServiceOutreachAndOrEngagement = 'HOPWA_SERVICE__OUTREACH_AND_OR_ENGAGEMENT',
  /** (12) Substance abuse services/treatment */
  HopwaServiceSubstanceAbuseServicesTreatment = 'HOPWA_SERVICE__SUBSTANCE_ABUSE_SERVICES_TREATMENT',
  /** (13) Transportation */
  HopwaServiceTransportation = 'HOPWA_SERVICE__TRANSPORTATION',
  /** (12) Other */
  HudVashOthVoucherTrackingOther = 'HUD_VASH_OTH_VOUCHER_TRACKING__OTHER',
  /** (1) Referral package forwarded to PHA */
  HudVashOthVoucherTrackingReferralPackageForwardedToPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__REFERRAL_PACKAGE_FORWARDED_TO_PHA',
  /** (10) Veteran exited - family maintained the voucher */
  HudVashOthVoucherTrackingVeteranExitedFamilyMaintainedTheVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_FAMILY_MAINTAINED_THE_VOUCHER',
  /** (11) Veteran exited - prior to ever receiving a voucher */
  HudVashOthVoucherTrackingVeteranExitedPriorToEverReceivingAVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_PRIOR_TO_EVER_RECEIVING_A_VOUCHER',
  /** (9) Veteran exited - voucher was returned */
  HudVashOthVoucherTrackingVeteranExitedVoucherWasReturned = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_VOUCHER_WAS_RETURNED',
  /** (2) Voucher denied by PHA */
  HudVashOthVoucherTrackingVoucherDeniedByPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_DENIED_BY_PHA',
  /** (5) Voucher in use - veteran moved into housing */
  HudVashOthVoucherTrackingVoucherInUseVeteranMovedIntoHousing = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_IN_USE_VETERAN_MOVED_INTO_HOUSING',
  /** (3) Voucher issued by PHA */
  HudVashOthVoucherTrackingVoucherIssuedByPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_ISSUED_BY_PHA',
  /** (4) Voucher revoked or expired */
  HudVashOthVoucherTrackingVoucherRevokedOrExpired = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_REVOKED_OR_EXPIRED',
  /** (7) Voucher was administratively absorbed by new PHA */
  HudVashOthVoucherTrackingVoucherWasAdministrativelyAbsorbedByNewPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_ADMINISTRATIVELY_ABSORBED_BY_NEW_PHA',
  /** (8) Voucher was converted to Housing Choice Voucher */
  HudVashOthVoucherTrackingVoucherWasConvertedToHousingChoiceVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_CONVERTED_TO_HOUSING_CHOICE_VOUCHER',
  /** (6) Voucher was ported locally */
  HudVashOthVoucherTrackingVoucherWasPortedLocally = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_PORTED_LOCALLY',
  /** (1) Community mental health */
  PathReferralCommunityMentalHealth = 'PATH_REFERRAL__COMMUNITY_MENTAL_HEALTH',
  /** (5) Educational services */
  PathReferralEducationalServices = 'PATH_REFERRAL__EDUCATIONAL_SERVICES',
  /** (9) Employment assistance */
  PathReferralEmploymentAssistance = 'PATH_REFERRAL__EMPLOYMENT_ASSISTANCE',
  /** (6) Housing services */
  PathReferralHousingServices = 'PATH_REFERRAL__HOUSING_SERVICES',
  /** (8) Income assistance */
  PathReferralIncomeAssistance = 'PATH_REFERRAL__INCOME_ASSISTANCE',
  /** (4) Job training */
  PathReferralJobTraining = 'PATH_REFERRAL__JOB_TRAINING',
  /** (10) Medical insurance */
  PathReferralMedicalInsurance = 'PATH_REFERRAL__MEDICAL_INSURANCE',
  /** (7) Permanent housing */
  PathReferralPermanentHousing = 'PATH_REFERRAL__PERMANENT_HOUSING',
  /** (3) Primary health/dental care */
  PathReferralPrimaryHealthDentalCare = 'PATH_REFERRAL__PRIMARY_HEALTH_DENTAL_CARE',
  /** (2) Substance use treatment */
  PathReferralSubstanceUseTreatment = 'PATH_REFERRAL__SUBSTANCE_USE_TREATMENT',
  /** (11) Temporary housing */
  PathReferralTemporaryHousing = 'PATH_REFERRAL__TEMPORARY_HOUSING',
  /** (6) Case management */
  PathServiceCaseManagement = 'PATH_SERVICE__CASE_MANAGEMENT',
  /** (14) Clinical assessment */
  PathServiceClinicalAssessment = 'PATH_SERVICE__CLINICAL_ASSESSMENT',
  /** (4) Community mental health */
  PathServiceCommunityMentalHealth = 'PATH_SERVICE__COMMUNITY_MENTAL_HEALTH',
  /** (3) Habilitation/rehabilitation */
  PathServiceHabilitationRehabilitation = 'PATH_SERVICE__HABILITATION_REHABILITATION',
  /** (10) Housing eligibility determination */
  PathServiceHousingEligibilityDetermination = 'PATH_SERVICE__HOUSING_ELIGIBILITY_DETERMINATION',
  /** (8) Housing minor renovation */
  PathServiceHousingMinorRenovation = 'PATH_SERVICE__HOUSING_MINOR_RENOVATION',
  /** (9) Housing moving assistance */
  PathServiceHousingMovingAssistance = 'PATH_SERVICE__HOUSING_MOVING_ASSISTANCE',
  /** (12) One-time rent for eviction prevention */
  PathServiceOneTimeRentForEvictionPrevention = 'PATH_SERVICE__ONE_TIME_RENT_FOR_EVICTION_PREVENTION',
  /** (7) Residential supportive services */
  PathServiceResidentialSupportiveServices = 'PATH_SERVICE__RESIDENTIAL_SUPPORTIVE_SERVICES',
  /** (1) Re-engagement */
  PathServiceReEngagement = 'PATH_SERVICE__RE_ENGAGEMENT',
  /** (2) Screening */
  PathServiceScreening = 'PATH_SERVICE__SCREENING',
  /** (11) Security deposits */
  PathServiceSecurityDeposits = 'PATH_SERVICE__SECURITY_DEPOSITS',
  /** (5) Substance use treatment */
  PathServiceSubstanceUseTreatment = 'PATH_SERVICE__SUBSTANCE_USE_TREATMENT',
  /** (2) Community service/service learning (CSL) */
  RhyServiceConnectionsCommunityServiceServiceLearningCsl = 'RHY_SERVICE_CONNECTIONS__COMMUNITY_SERVICE_SERVICE_LEARNING_CSL_',
  /** (7) Criminal justice /legal services */
  RhyServiceConnectionsCriminalJusticeLegalServices = 'RHY_SERVICE_CONNECTIONS__CRIMINAL_JUSTICE_LEGAL_SERVICES',
  /** (5) Education */
  RhyServiceConnectionsEducation = 'RHY_SERVICE_CONNECTIONS__EDUCATION',
  /** (6) Employment and training services */
  RhyServiceConnectionsEmploymentAndTrainingServices = 'RHY_SERVICE_CONNECTIONS__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (14) Health/medical care */
  RhyServiceConnectionsHealthMedicalCare = 'RHY_SERVICE_CONNECTIONS__HEALTH_MEDICAL_CARE',
  /** (26) Home-based Services */
  RhyServiceConnectionsHomeBasedServices = 'RHY_SERVICE_CONNECTIONS__HOME_BASED_SERVICES',
  /** (8) Life skills training */
  RhyServiceConnectionsLifeSkillsTraining = 'RHY_SERVICE_CONNECTIONS__LIFE_SKILLS_TRAINING',
  /** (10) Parenting education for youth with children */
  RhyServiceConnectionsParentingEducationForYouthWithChildren = 'RHY_SERVICE_CONNECTIONS__PARENTING_EDUCATION_FOR_YOUTH_WITH_CHILDREN',
  /** (12) Post-natal care */
  RhyServiceConnectionsPostNatalCare = 'RHY_SERVICE_CONNECTIONS__POST_NATAL_CARE',
  /** (27) Post-natal newborn care (wellness exams; immunizations) */
  RhyServiceConnectionsPostNatalNewbornCareWellnessExamsImmunizations = 'RHY_SERVICE_CONNECTIONS__POST_NATAL_NEWBORN_CARE_WELLNESS_EXAMS_IMMUNIZATIONS_',
  /** (13) Pre-natal care */
  RhyServiceConnectionsPreNatalCare = 'RHY_SERVICE_CONNECTIONS__PRE_NATAL_CARE',
  /** (28) STD Testing */
  RhyServiceConnectionsStdTesting = 'RHY_SERVICE_CONNECTIONS__STD_TESTING',
  /** (29) Street-based Services */
  RhyServiceConnectionsStreetBasedServices = 'RHY_SERVICE_CONNECTIONS__STREET_BASED_SERVICES',
  /** (18) Substance use disorder/Prevention Services */
  RhyServiceConnectionsSubstanceUseDisorderPreventionServices = 'RHY_SERVICE_CONNECTIONS__SUBSTANCE_USE_DISORDER_PREVENTION_SERVICES',
  /** (17) Substance use disorder treatment */
  RhyServiceConnectionsSubstanceUseDisorderTreatment = 'RHY_SERVICE_CONNECTIONS__SUBSTANCE_USE_DISORDER_TREATMENT',
  /** (10) Child care */
  SsvfFinancialAssistanceChildCare = 'SSVF_FINANCIAL_ASSISTANCE__CHILD_CARE',
  /** (14) Emergency housing assistance */
  SsvfFinancialAssistanceEmergencyHousingAssistance = 'SSVF_FINANCIAL_ASSISTANCE__EMERGENCY_HOUSING_ASSISTANCE',
  /** (15) Extended Shallow Subsidy - Rental Assistance */
  SsvfFinancialAssistanceExtendedShallowSubsidyRentalAssistance = 'SSVF_FINANCIAL_ASSISTANCE__EXTENDED_SHALLOW_SUBSIDY_RENTAL_ASSISTANCE',
  /** (16) Food Assistance */
  SsvfFinancialAssistanceFoodAssistance = 'SSVF_FINANCIAL_ASSISTANCE__FOOD_ASSISTANCE',
  /** (12) General housing stability assistance */
  SsvfFinancialAssistanceGeneralHousingStabilityAssistance = 'SSVF_FINANCIAL_ASSISTANCE__GENERAL_HOUSING_STABILITY_ASSISTANCE',
  /** (11) General housing stability assistance - emergency supplies */
  SsvfFinancialAssistanceGeneralHousingStabilityAssistanceEmergencySupplies = 'SSVF_FINANCIAL_ASSISTANCE__GENERAL_HOUSING_STABILITY_ASSISTANCE_EMERGENCY_SUPPLIES',
  /** (5) Moving costs */
  SsvfFinancialAssistanceMovingCosts = 'SSVF_FINANCIAL_ASSISTANCE__MOVING_COSTS',
  /** (1) Rental assistance */
  SsvfFinancialAssistanceRentalAssistance = 'SSVF_FINANCIAL_ASSISTANCE__RENTAL_ASSISTANCE',
  /** (2) Security deposit */
  SsvfFinancialAssistanceSecurityDeposit = 'SSVF_FINANCIAL_ASSISTANCE__SECURITY_DEPOSIT',
  /** (8) Transportation services: tokens/vouchers */
  SsvfFinancialAssistanceTransportationServicesTokensVouchers = 'SSVF_FINANCIAL_ASSISTANCE__TRANSPORTATION_SERVICES_TOKENS_VOUCHERS',
  /** (9) Transportation services: vehicle repair/maintenance */
  SsvfFinancialAssistanceTransportationServicesVehicleRepairMaintenance = 'SSVF_FINANCIAL_ASSISTANCE__TRANSPORTATION_SERVICES_VEHICLE_REPAIR_MAINTENANCE',
  /** (3) Utility deposit */
  SsvfFinancialAssistanceUtilityDeposit = 'SSVF_FINANCIAL_ASSISTANCE__UTILITY_DEPOSIT',
  /** (4) Utility fee payment assistance */
  SsvfFinancialAssistanceUtilityFeePaymentAssistance = 'SSVF_FINANCIAL_ASSISTANCE__UTILITY_FEE_PAYMENT_ASSISTANCE',
  /** (4) Assistance obtaining/coordinating other public benefits */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefits = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS',
  /** (3) Assistance obtaining VA benefits */
  SsvfServiceAssistanceObtainingVaBenefits = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS',
  /** (2) Case management services */
  SsvfServiceCaseManagementServices = 'SSVF_SERVICE__CASE_MANAGEMENT_SERVICES',
  /** (5) Direct provision of other public benefits */
  SsvfServiceDirectProvisionOfOtherPublicBenefits = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS',
  /** (6) Other (non-TFA) supportive service approved by VA */
  SsvfServiceOtherNonTfaSupportiveServiceApprovedByVa = 'SSVF_SERVICE__OTHER_NON_TFA_SUPPORTIVE_SERVICE_APPROVED_BY_VA',
  /** (1) Outreach services */
  SsvfServiceOutreachServices = 'SSVF_SERVICE__OUTREACH_SERVICES',
}

export type ServicesPaginated = {
  __typename?: 'ServicesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Service>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of SetHoHForEnrollment */
export type SetHoHForEnrollmentInput = {
  clientId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  householdId: Scalars['ID'];
};

/** Autogenerated return type of SetHoHForEnrollment */
export type SetHoHForEnrollmentPayload = {
  __typename?: 'SetHoHForEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** HUD TargetPopulation (2.02.8) */
export enum TargetPopulation {
  /** (1) Domestic violence victims */
  DomesticViolenceVictims = 'DOMESTIC_VIOLENCE_VICTIMS',
  /** (4) Not applicable */
  NotApplicable = 'NOT_APPLICABLE',
  /** (3) Persons with HIV/AIDS */
  PersonsWithHivAids = 'PERSONS_WITH_HIV_AIDS',
}

/** HUD TrackingMethod (2.02.C) */
export enum TrackingMethod {
  /** (0) Entry/Exit Date */
  EntryExitDate = 'ENTRY_EXIT_DATE',
  /** (3) Night-by-Night */
  NightByNight = 'NIGHT_BY_NIGHT',
}

/** Autogenerated input type of UpdateEnrollment */
export type UpdateEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Entry date with format yyyy-mm-dd */
  entryDate?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  relationshipToHoH?: InputMaybe<RelationshipToHoH>;
};

/** Autogenerated return type of UpdateEnrollment */
export type UpdateEnrollmentPayload = {
  __typename?: 'UpdateEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of UpdateOrganization */
export type UpdateOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: OrganizationInput;
};

/** Autogenerated return type of UpdateOrganization */
export type UpdateOrganizationPayload = {
  __typename?: 'UpdateOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of UpdateProject */
export type UpdateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: ProjectInput;
};

/** Autogenerated return type of UpdateProject */
export type UpdateProjectPayload = {
  __typename?: 'UpdateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  project?: Maybe<Project>;
};

export type ValidationError = {
  __typename?: 'ValidationError';
  attribute?: Maybe<Scalars['String']>;
  fullMessage?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  options?: Maybe<Scalars['JsonObject']>;
  type: Scalars['String'];
};

/** HUD Veteran Status (1.8) */
export enum VeteranStatus {
  /** (8) Client doesn't know */
  VeteranStatusClientDoesnTKnow = 'VETERAN_STATUS_CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  VeteranStatusClientRefused = 'VETERAN_STATUS_CLIENT_REFUSED',
  /** (99) Data not collected */
  VeteranStatusDataNotCollected = 'VETERAN_STATUS_DATA_NOT_COLLECTED',
  /** (0) No */
  VeteranStatusNo = 'VETERAN_STATUS_NO',
  /** (1) Yes */
  VeteranStatusYes = 'VETERAN_STATUS_YES',
}

export type ValidationErrorFieldsFragment = {
  __typename?: 'ValidationError';
  type: string;
  attribute?: string | null;
  message: string;
  fullMessage?: string | null;
  id?: string | null;
};

export type ClientNameFragment = {
  __typename?: 'Client';
  firstName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
};

export type ClientFieldsFragment = {
  __typename?: 'Client';
  id: string;
  personalId: string;
  ssnSerial?: string | null;
  dob?: string | null;
  dateUpdated: string;
  firstName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
};

export type HouseholdClientFieldsFragment = {
  __typename?: 'HouseholdClient';
  id: string;
  relationshipToHoH: RelationshipToHoH;
  client: {
    __typename?: 'Client';
    id: string;
    firstName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
  };
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    entryDate?: string | null;
    exitDate?: string | null;
    inProgress: boolean;
  };
};

export type EnrollmentFieldsFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate?: string | null;
  exitDate?: string | null;
  inProgress: boolean;
  project: { __typename?: 'Project'; projectName: string };
  household: { __typename?: 'Household'; id: string };
  client: { __typename?: 'Client'; id: string };
};

export type AssessmentFieldsFragment = {
  __typename?: 'Assessment';
  id: string;
  assessmentDate: string;
  assessmentLevel: AssessmentLevel;
  assessmentLocation: string;
  assessmentType: AssessmentType;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
};

export type EventFieldsFragment = {
  __typename?: 'Event';
  id: string;
  event: EventType;
  eventDate: string;
  locationCrisisOrPhHousing?: string | null;
  probSolDivRrResult?: ProbSolDivRrResult | null;
  referralCaseManageAfter?: ReferralCaseManageAfter | null;
  referralResult?: ReferralResult | null;
  resultDate?: string | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
};

export type ServiceFieldsFragment = {
  __typename?: 'Service';
  id: string;
  dateProvided: string;
  movingOnOtherType?: string | null;
  recordType: RecordType;
  referralOutcome?: PathReferralOutcome | null;
  subTypeProvided?: ServiceSubTypeProvided | null;
  typeProvided: ServiceTypeProvided;
  otherTypeProvided?: string | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
};

export type SearchClientsQueryVariables = Exact<{
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type SearchClientsQuery = {
  __typename?: 'Query';
  clientSearch: {
    __typename?: 'ClientsPaginated';
    offset: number;
    limit: number;
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Client';
      id: string;
      personalId: string;
      ssnSerial?: string | null;
      dob?: string | null;
      dateUpdated: string;
      firstName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
    }>;
  };
};

export type GetClientQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetClientQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    personalId: string;
    ssnSerial?: string | null;
    dob?: string | null;
    dateUpdated: string;
    firstName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
  } | null;
};

export type GetClientEnrollmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientEnrollmentsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        id: string;
        entryDate?: string | null;
        exitDate?: string | null;
        inProgress: boolean;
        project: { __typename?: 'Project'; projectName: string };
        household: { __typename?: 'Household'; id: string };
        client: { __typename?: 'Client'; id: string };
      }>;
    };
  } | null;
};

export type CreateClientMutationVariables = Exact<{
  input: CreateClientInput;
}>;

export type CreateClientMutation = {
  __typename?: 'Mutation';
  createClient?: {
    __typename?: 'CreateClientPayload';
    clientMutationId?: string | null;
    client?: {
      __typename?: 'Client';
      id: string;
      personalId: string;
      ssnSerial?: string | null;
      dob?: string | null;
      dateUpdated: string;
      firstName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type CreateEnrollmentMutationVariables = Exact<{
  input: CreateEnrollmentInput;
}>;

export type CreateEnrollmentMutation = {
  __typename?: 'Mutation';
  createEnrollment?: {
    __typename?: 'CreateEnrollmentPayload';
    clientMutationId?: string | null;
    enrollments?: Array<{
      __typename?: 'Enrollment';
      id: string;
      entryDate?: string | null;
      exitDate?: string | null;
      inProgress: boolean;
      project: { __typename?: 'Project'; projectName: string };
      household: { __typename?: 'Household'; id: string };
      client: { __typename?: 'Client'; id: string };
    }> | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateEnrollmentMutationVariables = Exact<{
  input: UpdateEnrollmentInput;
}>;

export type UpdateEnrollmentMutation = {
  __typename?: 'Mutation';
  updateEnrollment?: {
    __typename?: 'UpdateEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate?: string | null;
      exitDate?: string | null;
      inProgress: boolean;
      project: { __typename?: 'Project'; projectName: string };
      household: { __typename?: 'Household'; id: string };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type SetHoHMutationVariables = Exact<{
  input: SetHoHForEnrollmentInput;
}>;

export type SetHoHMutation = {
  __typename?: 'Mutation';
  setHoHForEnrollment?: {
    __typename?: 'SetHoHForEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate?: string | null;
      exitDate?: string | null;
      inProgress: boolean;
      project: { __typename?: 'Project'; projectName: string };
      household: { __typename?: 'Household'; id: string };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type DeleteEnrollmentMutationVariables = Exact<{
  input: DeleteEnrollmentInput;
}>;

export type DeleteEnrollmentMutation = {
  __typename?: 'Mutation';
  deleteEnrollment?: {
    __typename?: 'DeleteEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate?: string | null;
      exitDate?: string | null;
      inProgress: boolean;
      project: { __typename?: 'Project'; projectName: string };
      household: { __typename?: 'Household'; id: string };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type AddHouseholdMembersMutationVariables = Exact<{
  input: AddHouseholdMembersToEnrollmentInput;
}>;

export type AddHouseholdMembersMutation = {
  __typename?: 'Mutation';
  addHouseholdMembersToEnrollment?: {
    __typename?: 'AddHouseholdMembersToEnrollmentPayload';
    clientMutationId?: string | null;
    enrollments?: Array<{
      __typename?: 'Enrollment';
      id: string;
      entryDate?: string | null;
      exitDate?: string | null;
      inProgress: boolean;
      project: { __typename?: 'Project'; projectName: string };
      household: { __typename?: 'Household'; id: string };
      client: { __typename?: 'Client'; id: string };
    }> | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type GetEnrollmentQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEnrollmentQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    entryDate?: string | null;
    exitDate?: string | null;
    inProgress: boolean;
    project: { __typename?: 'Project'; projectName: string };
    household: { __typename?: 'Household'; id: string };
    client: { __typename?: 'Client'; id: string };
  } | null;
};

export type GetEnrollmentWithHoHQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEnrollmentWithHoHQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    entryDate?: string | null;
    exitDate?: string | null;
    inProgress: boolean;
    household: {
      __typename?: 'Household';
      id: string;
      householdClients: Array<{
        __typename?: 'HouseholdClient';
        id: string;
        relationshipToHoH: RelationshipToHoH;
        client: {
          __typename?: 'Client';
          id: string;
          firstName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
        };
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          entryDate?: string | null;
          exitDate?: string | null;
          inProgress: boolean;
        };
      }>;
    };
    project: { __typename?: 'Project'; projectName: string };
    client: { __typename?: 'Client'; id: string };
  } | null;
};

export type GetEnrollmentAssessmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetEnrollmentAssessmentsQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    assessments: {
      __typename?: 'AssessmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Assessment';
        id: string;
        assessmentDate: string;
        assessmentLevel: AssessmentLevel;
        assessmentLocation: string;
        assessmentType: AssessmentType;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
      }>;
    };
  } | null;
};

export type GetEnrollmentEventsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetEnrollmentEventsQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    events: {
      __typename?: 'EventsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Event';
        id: string;
        event: EventType;
        eventDate: string;
        locationCrisisOrPhHousing?: string | null;
        probSolDivRrResult?: ProbSolDivRrResult | null;
        referralCaseManageAfter?: ReferralCaseManageAfter | null;
        referralResult?: ReferralResult | null;
        resultDate?: string | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
      }>;
    };
  } | null;
};

export type GetEnrollmentServicesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetEnrollmentServicesQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    services: {
      __typename?: 'ServicesPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Service';
        id: string;
        dateProvided: string;
        movingOnOtherType?: string | null;
        recordType: RecordType;
        referralOutcome?: PathReferralOutcome | null;
        subTypeProvided?: ServiceSubTypeProvided | null;
        typeProvided: ServiceTypeProvided;
        otherTypeProvided?: string | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
      }>;
    };
  } | null;
};

export type GetClientHouseholdMemberCandidatesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientHouseholdMemberCandidatesQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        household: {
          __typename?: 'Household';
          householdClients: Array<{
            __typename?: 'HouseholdClient';
            client: {
              __typename?: 'Client';
              id: string;
              personalId: string;
              ssnSerial?: string | null;
              dob?: string | null;
              dateUpdated: string;
              firstName?: string | null;
              preferredName?: string | null;
              lastName?: string | null;
              nameSuffix?: string | null;
            };
          }>;
        };
      }>;
    };
  } | null;
};

export type ProjectFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType?: ProjectType | null;
  organization: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  };
};

export type OrganizationFieldsFragment = {
  __typename?: 'Organization';
  id: string;
  organizationName: string;
};

export type ProjectAllFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType?: ProjectType | null;
  HMISParticipatingProject?: boolean | null;
  HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
  contactInformation?: string | null;
  continuumProject?: boolean | null;
  description?: string | null;
  housingType?: HousingType | null;
  operatingEndDate?: string | null;
  operatingStartDate: string;
  residentialAffiliation?: boolean | null;
  targetPopulation?: TargetPopulation | null;
  trackingMethod?: TrackingMethod | null;
  organization: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  };
};

export type GetProjectsForSelectQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetProjectsForSelectQuery = {
  __typename?: 'Query';
  projects: Array<{
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
    organization: {
      __typename?: 'Organization';
      id: string;
      organizationName: string;
    };
  }>;
};

export type GetOrganizationsAndProjectsQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetOrganizationsAndProjectsQuery = {
  __typename?: 'Query';
  organizations: Array<{
    __typename?: 'Organization';
    id: string;
    organizationName: string;
    projects: Array<{
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
      HMISParticipatingProject?: boolean | null;
      HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
      contactInformation?: string | null;
      continuumProject?: boolean | null;
      description?: string | null;
      housingType?: HousingType | null;
      operatingEndDate?: string | null;
      operatingStartDate: string;
      residentialAffiliation?: boolean | null;
      targetPopulation?: TargetPopulation | null;
      trackingMethod?: TrackingMethod | null;
      organization: {
        __typename?: 'Organization';
        id: string;
        organizationName: string;
      };
    }>;
  }>;
};

export type GetProjectQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetProjectQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
    HMISParticipatingProject?: boolean | null;
    HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
    contactInformation?: string | null;
    continuumProject?: boolean | null;
    description?: string | null;
    housingType?: HousingType | null;
    operatingEndDate?: string | null;
    operatingStartDate: string;
    residentialAffiliation?: boolean | null;
    targetPopulation?: TargetPopulation | null;
    trackingMethod?: TrackingMethod | null;
    organization: {
      __typename?: 'Organization';
      id: string;
      organizationName: string;
    };
  } | null;
};

export type GetOrganizationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOrganizationQuery = {
  __typename?: 'Query';
  organization?: {
    __typename?: 'Organization';
    description?: string | null;
    contactInformation?: string | null;
    id: string;
    organizationName: string;
    projects: Array<{
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
      HMISParticipatingProject?: boolean | null;
      HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
      contactInformation?: string | null;
      continuumProject?: boolean | null;
      description?: string | null;
      housingType?: HousingType | null;
      operatingEndDate?: string | null;
      operatingStartDate: string;
      residentialAffiliation?: boolean | null;
      targetPopulation?: TargetPopulation | null;
      trackingMethod?: TrackingMethod | null;
      organization: {
        __typename?: 'Organization';
        id: string;
        organizationName: string;
      };
    }>;
  } | null;
};

export type GetOrganizationsForSelectQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetOrganizationsForSelectQuery = {
  __typename?: 'Query';
  organizations: Array<{
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  }>;
};

export type UpdateProjectMutationVariables = Exact<{
  input: UpdateProjectInput;
}>;

export type UpdateProjectMutation = {
  __typename?: 'Mutation';
  updateProject?: {
    __typename?: 'UpdateProjectPayload';
    clientMutationId?: string | null;
    project?: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
      HMISParticipatingProject?: boolean | null;
      HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
      contactInformation?: string | null;
      continuumProject?: boolean | null;
      description?: string | null;
      housingType?: HousingType | null;
      operatingEndDate?: string | null;
      operatingStartDate: string;
      residentialAffiliation?: boolean | null;
      targetPopulation?: TargetPopulation | null;
      trackingMethod?: TrackingMethod | null;
      organization: {
        __typename?: 'Organization';
        id: string;
        organizationName: string;
      };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export const ValidationErrorFieldsFragmentDoc = gql`
  fragment ValidationErrorFields on ValidationError {
    type
    attribute
    message
    fullMessage
    id
  }
`;
export const ClientNameFragmentDoc = gql`
  fragment ClientName on Client {
    firstName
    preferredName
    lastName
    nameSuffix
  }
`;
export const ClientFieldsFragmentDoc = gql`
  fragment ClientFields on Client {
    id
    personalId
    ssnSerial
    dob
    dateUpdated
    ...ClientName
  }
  ${ClientNameFragmentDoc}
`;
export const HouseholdClientFieldsFragmentDoc = gql`
  fragment HouseholdClientFields on HouseholdClient {
    id
    relationshipToHoH
    client {
      id
      ...ClientName
    }
    enrollment {
      id
      entryDate
      exitDate
      inProgress
    }
  }
  ${ClientNameFragmentDoc}
`;
export const EnrollmentFieldsFragmentDoc = gql`
  fragment EnrollmentFields on Enrollment {
    id
    entryDate
    exitDate
    project {
      projectName
    }
    inProgress
    household {
      id
    }
    client {
      id
    }
  }
`;
export const AssessmentFieldsFragmentDoc = gql`
  fragment AssessmentFields on Assessment {
    id
    assessmentDate
    assessmentLevel
    assessmentLocation
    assessmentType
    dateCreated
    dateUpdated
    dateDeleted
  }
`;
export const EventFieldsFragmentDoc = gql`
  fragment EventFields on Event {
    id
    event
    eventDate
    locationCrisisOrPhHousing
    probSolDivRrResult
    referralCaseManageAfter
    referralResult
    resultDate
    dateCreated
    dateUpdated
    dateDeleted
  }
`;
export const ServiceFieldsFragmentDoc = gql`
  fragment ServiceFields on Service {
    id
    dateProvided
    movingOnOtherType
    recordType
    referralOutcome
    subTypeProvided
    typeProvided
    otherTypeProvided
    dateCreated
    dateUpdated
    dateDeleted
  }
`;
export const ProjectFieldsFragmentDoc = gql`
  fragment ProjectFields on Project {
    id
    projectName
    projectType
    organization {
      id
      organizationName
    }
  }
`;
export const OrganizationFieldsFragmentDoc = gql`
  fragment OrganizationFields on Organization {
    id
    organizationName
  }
`;
export const ProjectAllFieldsFragmentDoc = gql`
  fragment ProjectAllFields on Project {
    id
    projectName
    projectType
    HMISParticipatingProject
    HOPWAMedAssistedLivingFac
    contactInformation
    continuumProject
    description
    housingType
    operatingEndDate
    operatingStartDate
    residentialAffiliation
    targetPopulation
    trackingMethod
    organization {
      id
      organizationName
    }
  }
`;
export const SearchClientsDocument = gql`
  query SearchClients($input: ClientSearchInput!, $limit: Int, $offset: Int) {
    clientSearch(input: $input, limit: $limit, offset: $offset) {
      offset
      limit
      nodesCount
      nodes {
        ...ClientFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useSearchClientsQuery__
 *
 * To run a query within a React component, call `useSearchClientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchClientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchClientsQuery({
 *   variables: {
 *      input: // value for 'input'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useSearchClientsQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export function useSearchClientsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export type SearchClientsQueryHookResult = ReturnType<
  typeof useSearchClientsQuery
>;
export type SearchClientsLazyQueryHookResult = ReturnType<
  typeof useSearchClientsLazyQuery
>;
export type SearchClientsQueryResult = Apollo.QueryResult<
  SearchClientsQuery,
  SearchClientsQueryVariables
>;
export const GetClientDocument = gql`
  query GetClient($id: ID!) {
    client(id: $id) {
      ...ClientFields
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useGetClientQuery__
 *
 * To run a query within a React component, call `useGetClientQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClientQuery(
  baseOptions: Apollo.QueryHookOptions<GetClientQuery, GetClientQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export function useGetClientLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientQuery,
    GetClientQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export type GetClientQueryHookResult = ReturnType<typeof useGetClientQuery>;
export type GetClientLazyQueryHookResult = ReturnType<
  typeof useGetClientLazyQuery
>;
export type GetClientQueryResult = Apollo.QueryResult<
  GetClientQuery,
  GetClientQueryVariables
>;
export const GetClientEnrollmentsDocument = gql`
  query GetClientEnrollments($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      enrollments(limit: $limit, offset: $offset, sortOrder: MOST_RECENT) {
        offset
        limit
        nodesCount
        nodes {
          ...EnrollmentFields
        }
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetClientEnrollmentsQuery__
 *
 * To run a query within a React component, call `useGetClientEnrollmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientEnrollmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientEnrollmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientEnrollmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >(GetClientEnrollmentsDocument, options);
}
export function useGetClientEnrollmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >(GetClientEnrollmentsDocument, options);
}
export type GetClientEnrollmentsQueryHookResult = ReturnType<
  typeof useGetClientEnrollmentsQuery
>;
export type GetClientEnrollmentsLazyQueryHookResult = ReturnType<
  typeof useGetClientEnrollmentsLazyQuery
>;
export type GetClientEnrollmentsQueryResult = Apollo.QueryResult<
  GetClientEnrollmentsQuery,
  GetClientEnrollmentsQueryVariables
>;
export const CreateClientDocument = gql`
  mutation CreateClient($input: CreateClientInput!) {
    createClient(input: $input) {
      clientMutationId
      client {
        ...ClientFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateClientMutationFn = Apollo.MutationFunction<
  CreateClientMutation,
  CreateClientMutationVariables
>;

/**
 * __useCreateClientMutation__
 *
 * To run a mutation, you first call `useCreateClientMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClientMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClientMutation, { data, loading, error }] = useCreateClientMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateClientMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClientMutation,
    CreateClientMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateClientMutation,
    CreateClientMutationVariables
  >(CreateClientDocument, options);
}
export type CreateClientMutationHookResult = ReturnType<
  typeof useCreateClientMutation
>;
export type CreateClientMutationResult =
  Apollo.MutationResult<CreateClientMutation>;
export type CreateClientMutationOptions = Apollo.BaseMutationOptions<
  CreateClientMutation,
  CreateClientMutationVariables
>;
export const CreateEnrollmentDocument = gql`
  mutation CreateEnrollment($input: CreateEnrollmentInput!) {
    createEnrollment(input: $input) {
      clientMutationId
      enrollments {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateEnrollmentMutationFn = Apollo.MutationFunction<
  CreateEnrollmentMutation,
  CreateEnrollmentMutationVariables
>;

/**
 * __useCreateEnrollmentMutation__
 *
 * To run a mutation, you first call `useCreateEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createEnrollmentMutation, { data, loading, error }] = useCreateEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateEnrollmentMutation,
    CreateEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateEnrollmentMutation,
    CreateEnrollmentMutationVariables
  >(CreateEnrollmentDocument, options);
}
export type CreateEnrollmentMutationHookResult = ReturnType<
  typeof useCreateEnrollmentMutation
>;
export type CreateEnrollmentMutationResult =
  Apollo.MutationResult<CreateEnrollmentMutation>;
export type CreateEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  CreateEnrollmentMutation,
  CreateEnrollmentMutationVariables
>;
export const UpdateEnrollmentDocument = gql`
  mutation UpdateEnrollment($input: UpdateEnrollmentInput!) {
    updateEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateEnrollmentMutationFn = Apollo.MutationFunction<
  UpdateEnrollmentMutation,
  UpdateEnrollmentMutationVariables
>;

/**
 * __useUpdateEnrollmentMutation__
 *
 * To run a mutation, you first call `useUpdateEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateEnrollmentMutation, { data, loading, error }] = useUpdateEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateEnrollmentMutation,
    UpdateEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateEnrollmentMutation,
    UpdateEnrollmentMutationVariables
  >(UpdateEnrollmentDocument, options);
}
export type UpdateEnrollmentMutationHookResult = ReturnType<
  typeof useUpdateEnrollmentMutation
>;
export type UpdateEnrollmentMutationResult =
  Apollo.MutationResult<UpdateEnrollmentMutation>;
export type UpdateEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  UpdateEnrollmentMutation,
  UpdateEnrollmentMutationVariables
>;
export const SetHoHDocument = gql`
  mutation SetHoH($input: SetHoHForEnrollmentInput!) {
    setHoHForEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SetHoHMutationFn = Apollo.MutationFunction<
  SetHoHMutation,
  SetHoHMutationVariables
>;

/**
 * __useSetHoHMutation__
 *
 * To run a mutation, you first call `useSetHoHMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetHoHMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setHoHMutation, { data, loading, error }] = useSetHoHMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSetHoHMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetHoHMutation,
    SetHoHMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SetHoHMutation, SetHoHMutationVariables>(
    SetHoHDocument,
    options
  );
}
export type SetHoHMutationHookResult = ReturnType<typeof useSetHoHMutation>;
export type SetHoHMutationResult = Apollo.MutationResult<SetHoHMutation>;
export type SetHoHMutationOptions = Apollo.BaseMutationOptions<
  SetHoHMutation,
  SetHoHMutationVariables
>;
export const DeleteEnrollmentDocument = gql`
  mutation DeleteEnrollment($input: DeleteEnrollmentInput!) {
    deleteEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteEnrollmentMutationFn = Apollo.MutationFunction<
  DeleteEnrollmentMutation,
  DeleteEnrollmentMutationVariables
>;

/**
 * __useDeleteEnrollmentMutation__
 *
 * To run a mutation, you first call `useDeleteEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteEnrollmentMutation, { data, loading, error }] = useDeleteEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteEnrollmentMutation,
    DeleteEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteEnrollmentMutation,
    DeleteEnrollmentMutationVariables
  >(DeleteEnrollmentDocument, options);
}
export type DeleteEnrollmentMutationHookResult = ReturnType<
  typeof useDeleteEnrollmentMutation
>;
export type DeleteEnrollmentMutationResult =
  Apollo.MutationResult<DeleteEnrollmentMutation>;
export type DeleteEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  DeleteEnrollmentMutation,
  DeleteEnrollmentMutationVariables
>;
export const AddHouseholdMembersDocument = gql`
  mutation AddHouseholdMembers($input: AddHouseholdMembersToEnrollmentInput!) {
    addHouseholdMembersToEnrollment(input: $input) {
      clientMutationId
      enrollments {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type AddHouseholdMembersMutationFn = Apollo.MutationFunction<
  AddHouseholdMembersMutation,
  AddHouseholdMembersMutationVariables
>;

/**
 * __useAddHouseholdMembersMutation__
 *
 * To run a mutation, you first call `useAddHouseholdMembersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddHouseholdMembersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addHouseholdMembersMutation, { data, loading, error }] = useAddHouseholdMembersMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddHouseholdMembersMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddHouseholdMembersMutation,
    AddHouseholdMembersMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    AddHouseholdMembersMutation,
    AddHouseholdMembersMutationVariables
  >(AddHouseholdMembersDocument, options);
}
export type AddHouseholdMembersMutationHookResult = ReturnType<
  typeof useAddHouseholdMembersMutation
>;
export type AddHouseholdMembersMutationResult =
  Apollo.MutationResult<AddHouseholdMembersMutation>;
export type AddHouseholdMembersMutationOptions = Apollo.BaseMutationOptions<
  AddHouseholdMembersMutation,
  AddHouseholdMembersMutationVariables
>;
export const GetEnrollmentDocument = gql`
  query GetEnrollment($id: ID!) {
    enrollment(id: $id) {
      ...EnrollmentFields
    }
  }
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEnrollmentQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentQuery,
    GetEnrollmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetEnrollmentQuery, GetEnrollmentQueryVariables>(
    GetEnrollmentDocument,
    options
  );
}
export function useGetEnrollmentLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentQuery,
    GetEnrollmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetEnrollmentQuery, GetEnrollmentQueryVariables>(
    GetEnrollmentDocument,
    options
  );
}
export type GetEnrollmentQueryHookResult = ReturnType<
  typeof useGetEnrollmentQuery
>;
export type GetEnrollmentLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentLazyQuery
>;
export type GetEnrollmentQueryResult = Apollo.QueryResult<
  GetEnrollmentQuery,
  GetEnrollmentQueryVariables
>;
export const GetEnrollmentWithHoHDocument = gql`
  query GetEnrollmentWithHoH($id: ID!) {
    enrollment(id: $id) {
      ...EnrollmentFields
      household {
        id
        householdClients {
          ...HouseholdClientFields
        }
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${HouseholdClientFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentWithHoHQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentWithHoHQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentWithHoHQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentWithHoHQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEnrollmentWithHoHQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >(GetEnrollmentWithHoHDocument, options);
}
export function useGetEnrollmentWithHoHLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >(GetEnrollmentWithHoHDocument, options);
}
export type GetEnrollmentWithHoHQueryHookResult = ReturnType<
  typeof useGetEnrollmentWithHoHQuery
>;
export type GetEnrollmentWithHoHLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentWithHoHLazyQuery
>;
export type GetEnrollmentWithHoHQueryResult = Apollo.QueryResult<
  GetEnrollmentWithHoHQuery,
  GetEnrollmentWithHoHQueryVariables
>;
export const GetEnrollmentAssessmentsDocument = gql`
  query GetEnrollmentAssessments($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    enrollment(id: $id) {
      id
      assessments(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...AssessmentFields
        }
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentAssessmentsQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentAssessmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentAssessmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentAssessmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetEnrollmentAssessmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >(GetEnrollmentAssessmentsDocument, options);
}
export function useGetEnrollmentAssessmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >(GetEnrollmentAssessmentsDocument, options);
}
export type GetEnrollmentAssessmentsQueryHookResult = ReturnType<
  typeof useGetEnrollmentAssessmentsQuery
>;
export type GetEnrollmentAssessmentsLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentAssessmentsLazyQuery
>;
export type GetEnrollmentAssessmentsQueryResult = Apollo.QueryResult<
  GetEnrollmentAssessmentsQuery,
  GetEnrollmentAssessmentsQueryVariables
>;
export const GetEnrollmentEventsDocument = gql`
  query GetEnrollmentEvents($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    enrollment(id: $id) {
      id
      events(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...EventFields
        }
      }
    }
  }
  ${EventFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentEventsQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentEventsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetEnrollmentEventsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >(GetEnrollmentEventsDocument, options);
}
export function useGetEnrollmentEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >(GetEnrollmentEventsDocument, options);
}
export type GetEnrollmentEventsQueryHookResult = ReturnType<
  typeof useGetEnrollmentEventsQuery
>;
export type GetEnrollmentEventsLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentEventsLazyQuery
>;
export type GetEnrollmentEventsQueryResult = Apollo.QueryResult<
  GetEnrollmentEventsQuery,
  GetEnrollmentEventsQueryVariables
>;
export const GetEnrollmentServicesDocument = gql`
  query GetEnrollmentServices($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    enrollment(id: $id) {
      id
      services(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ServiceFields
        }
      }
    }
  }
  ${ServiceFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentServicesQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentServicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentServicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentServicesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetEnrollmentServicesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >(GetEnrollmentServicesDocument, options);
}
export function useGetEnrollmentServicesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >(GetEnrollmentServicesDocument, options);
}
export type GetEnrollmentServicesQueryHookResult = ReturnType<
  typeof useGetEnrollmentServicesQuery
>;
export type GetEnrollmentServicesLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentServicesLazyQuery
>;
export type GetEnrollmentServicesQueryResult = Apollo.QueryResult<
  GetEnrollmentServicesQuery,
  GetEnrollmentServicesQueryVariables
>;
export const GetClientHouseholdMemberCandidatesDocument = gql`
  query GetClientHouseholdMemberCandidates(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
  ) {
    client(id: $id) {
      id
      enrollments(limit: $limit, offset: $offset, sortOrder: MOST_RECENT) {
        offset
        limit
        nodesCount
        nodes {
          household {
            householdClients {
              client {
                ...ClientFields
              }
            }
          }
        }
      }
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useGetClientHouseholdMemberCandidatesQuery__
 *
 * To run a query within a React component, call `useGetClientHouseholdMemberCandidatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientHouseholdMemberCandidatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientHouseholdMemberCandidatesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientHouseholdMemberCandidatesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >(GetClientHouseholdMemberCandidatesDocument, options);
}
export function useGetClientHouseholdMemberCandidatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >(GetClientHouseholdMemberCandidatesDocument, options);
}
export type GetClientHouseholdMemberCandidatesQueryHookResult = ReturnType<
  typeof useGetClientHouseholdMemberCandidatesQuery
>;
export type GetClientHouseholdMemberCandidatesLazyQueryHookResult = ReturnType<
  typeof useGetClientHouseholdMemberCandidatesLazyQuery
>;
export type GetClientHouseholdMemberCandidatesQueryResult = Apollo.QueryResult<
  GetClientHouseholdMemberCandidatesQuery,
  GetClientHouseholdMemberCandidatesQueryVariables
>;
export const GetProjectsForSelectDocument = gql`
  query GetProjectsForSelect {
    projects(sortOrder: ORGANIZATION_AND_NAME) {
      ...ProjectFields
    }
  }
  ${ProjectFieldsFragmentDoc}
`;

/**
 * __useGetProjectsForSelectQuery__
 *
 * To run a query within a React component, call `useGetProjectsForSelectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectsForSelectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectsForSelectQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetProjectsForSelectQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >(GetProjectsForSelectDocument, options);
}
export function useGetProjectsForSelectLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >(GetProjectsForSelectDocument, options);
}
export type GetProjectsForSelectQueryHookResult = ReturnType<
  typeof useGetProjectsForSelectQuery
>;
export type GetProjectsForSelectLazyQueryHookResult = ReturnType<
  typeof useGetProjectsForSelectLazyQuery
>;
export type GetProjectsForSelectQueryResult = Apollo.QueryResult<
  GetProjectsForSelectQuery,
  GetProjectsForSelectQueryVariables
>;
export const GetOrganizationsAndProjectsDocument = gql`
  query GetOrganizationsAndProjects {
    organizations(sortOrder: NAME) {
      ...OrganizationFields
      projects {
        ...ProjectAllFields
      }
    }
  }
  ${OrganizationFieldsFragmentDoc}
  ${ProjectAllFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationsAndProjectsQuery__
 *
 * To run a query within a React component, call `useGetOrganizationsAndProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationsAndProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationsAndProjectsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOrganizationsAndProjectsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetOrganizationsAndProjectsQuery,
    GetOrganizationsAndProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetOrganizationsAndProjectsQuery,
    GetOrganizationsAndProjectsQueryVariables
  >(GetOrganizationsAndProjectsDocument, options);
}
export function useGetOrganizationsAndProjectsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationsAndProjectsQuery,
    GetOrganizationsAndProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationsAndProjectsQuery,
    GetOrganizationsAndProjectsQueryVariables
  >(GetOrganizationsAndProjectsDocument, options);
}
export type GetOrganizationsAndProjectsQueryHookResult = ReturnType<
  typeof useGetOrganizationsAndProjectsQuery
>;
export type GetOrganizationsAndProjectsLazyQueryHookResult = ReturnType<
  typeof useGetOrganizationsAndProjectsLazyQuery
>;
export type GetOrganizationsAndProjectsQueryResult = Apollo.QueryResult<
  GetOrganizationsAndProjectsQuery,
  GetOrganizationsAndProjectsQueryVariables
>;
export const GetProjectDocument = gql`
  query GetProject($id: ID!) {
    project(id: $id) {
      ...ProjectAllFields
    }
  }
  ${ProjectAllFieldsFragmentDoc}
`;

/**
 * __useGetProjectQuery__
 *
 * To run a query within a React component, call `useGetProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProjectQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectQuery,
    GetProjectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProjectQuery, GetProjectQueryVariables>(
    GetProjectDocument,
    options
  );
}
export function useGetProjectLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectQuery,
    GetProjectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetProjectQuery, GetProjectQueryVariables>(
    GetProjectDocument,
    options
  );
}
export type GetProjectQueryHookResult = ReturnType<typeof useGetProjectQuery>;
export type GetProjectLazyQueryHookResult = ReturnType<
  typeof useGetProjectLazyQuery
>;
export type GetProjectQueryResult = Apollo.QueryResult<
  GetProjectQuery,
  GetProjectQueryVariables
>;
export const GetOrganizationDocument = gql`
  query GetOrganization($id: ID!) {
    organization(id: $id) {
      ...OrganizationFields
      description
      contactInformation
      projects {
        ...ProjectAllFields
      }
    }
  }
  ${OrganizationFieldsFragmentDoc}
  ${ProjectAllFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationQuery__
 *
 * To run a query within a React component, call `useGetOrganizationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOrganizationQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetOrganizationQuery, GetOrganizationQueryVariables>(
    GetOrganizationDocument,
    options
  );
}
export function useGetOrganizationLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >(GetOrganizationDocument, options);
}
export type GetOrganizationQueryHookResult = ReturnType<
  typeof useGetOrganizationQuery
>;
export type GetOrganizationLazyQueryHookResult = ReturnType<
  typeof useGetOrganizationLazyQuery
>;
export type GetOrganizationQueryResult = Apollo.QueryResult<
  GetOrganizationQuery,
  GetOrganizationQueryVariables
>;
export const GetOrganizationsForSelectDocument = gql`
  query GetOrganizationsForSelect {
    organizations(sortOrder: NAME) {
      ...OrganizationFields
    }
  }
  ${OrganizationFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationsForSelectQuery__
 *
 * To run a query within a React component, call `useGetOrganizationsForSelectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationsForSelectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationsForSelectQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOrganizationsForSelectQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >(GetOrganizationsForSelectDocument, options);
}
export function useGetOrganizationsForSelectLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >(GetOrganizationsForSelectDocument, options);
}
export type GetOrganizationsForSelectQueryHookResult = ReturnType<
  typeof useGetOrganizationsForSelectQuery
>;
export type GetOrganizationsForSelectLazyQueryHookResult = ReturnType<
  typeof useGetOrganizationsForSelectLazyQuery
>;
export type GetOrganizationsForSelectQueryResult = Apollo.QueryResult<
  GetOrganizationsForSelectQuery,
  GetOrganizationsForSelectQueryVariables
>;
export const UpdateProjectDocument = gql`
  mutation UpdateProject($input: UpdateProjectInput!) {
    updateProject(input: $input) {
      clientMutationId
      project {
        ...ProjectAllFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ProjectAllFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateProjectMutationFn = Apollo.MutationFunction<
  UpdateProjectMutation,
  UpdateProjectMutationVariables
>;

/**
 * __useUpdateProjectMutation__
 *
 * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateProjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateProjectMutation,
    UpdateProjectMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateProjectMutation,
    UpdateProjectMutationVariables
  >(UpdateProjectDocument, options);
}
export type UpdateProjectMutationHookResult = ReturnType<
  typeof useUpdateProjectMutation
>;
export type UpdateProjectMutationResult =
  Apollo.MutationResult<UpdateProjectMutation>;
export type UpdateProjectMutationOptions = Apollo.BaseMutationOptions<
  UpdateProjectMutation,
  UpdateProjectMutationVariables
>;
