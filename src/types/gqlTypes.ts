export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: string;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
  /** Arbitrary JSON Type */
  JsonObject: any;
};

/** HUD Client */
export type Client = {
  __typename?: 'Client';
  dateUpdated: Scalars['ISO8601DateTime'];
  /** Date of birth as format yyyy-mm-dd */
  dob?: Maybe<Scalars['ISO8601Date']>;
  endDate?: Maybe<Scalars['ISO8601DateTime']>;
  enrollments: Array<Enrollment>;
  firstName: Scalars['String'];
  id: Scalars['ID'];
  lastName: Scalars['String'];
  personalId: Scalars['String'];
  preferredName?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  ssnSerial?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['ISO8601DateTime']>;
};

/** HMIS Client input */
export type ClientInput = {
  dob?: InputMaybe<Scalars['String']>;
  dobQuality?: InputMaybe<DobDataQuality>;
  ethnicity?: InputMaybe<Ethnicity>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Array<Gender>>;
  lastName?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  nameQuality?: InputMaybe<NameDataQuality>;
  preferredName?: InputMaybe<Scalars['String']>;
  race?: InputMaybe<Array<Race>>;
  ssn?: InputMaybe<Scalars['String']>;
  ssnQuality?: InputMaybe<SsnDataQuality>;
  veteranStatus?: InputMaybe<VeteranStatus>;
};

/** HMIS Client search input */
export type ClientSearchInput = {
  /** Date of birth as format yyyy-mm-dd */
  dob?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  /** Client primary key */
  id?: InputMaybe<Scalars['ID']>;
  lastName?: InputMaybe<Scalars['String']>;
  organizations?: InputMaybe<Array<Scalars['ID']>>;
  personalId?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<Array<Scalars['ID']>>;
  /** Last 4 digits of SSN */
  ssnSerial?: InputMaybe<Scalars['String']>;
  /** Omnisearch string */
  textSearch?: InputMaybe<Scalars['String']>;
  warehouseId?: InputMaybe<Scalars['String']>;
};

/** HUD Client Sorting Options */
export enum ClientSortOption {
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
}

export type ClientsPaginated = {
  __typename?: 'ClientsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Client>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of CreateClient */
export type CreateClientInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ClientInput;
};

/** Autogenerated return type of CreateClient */
export type CreateClientPayload = {
  __typename?: 'CreateClientPayload';
  client?: Maybe<Client>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** HUD DOB Data Quality */
export enum DobDataQuality {
  /** Full DOB reported */
  DobFull = 'DOB_FULL',
  /** Data not collected */
  DobNotCollected = 'DOB_NOT_COLLECTED',
  /** Full DOB reported */
  DobPartial = 'DOB_PARTIAL',
  /** Client refused */
  DobRefused = 'DOB_REFUSED',
  /** Client doesn't know */
  DobUnknown = 'DOB_UNKNOWN',
}

/** HUD Enrollment */
export type Enrollment = {
  __typename?: 'Enrollment';
  entryDate?: Maybe<Scalars['ISO8601DateTime']>;
  exitDate?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  project: Project;
};

/** HUD Ethnicity */
export enum Ethnicity {
  /** Hispanic/Latin(a)(o)(x) */
  EthnicityHispanic = 'ETHNICITY_HISPANIC',
  /** Non-Hispanic/Non-Latin(a)(o)(x) */
  EthnicityNonHispanic = 'ETHNICITY_NON_HISPANIC',
  /** Data not collected */
  EthnicityNotCollected = 'ETHNICITY_NOT_COLLECTED',
  /** Client refused */
  EthnicityRefused = 'ETHNICITY_REFUSED',
  /** Client doesn't know */
  EthnicityUnknown = 'ETHNICITY_UNKNOWN',
}

/** HUD Gender */
export enum Gender {
  /** Female */
  GenderFemale = 'GENDER_FEMALE',
  /** Male */
  GenderMale = 'GENDER_MALE',
  /** Data not collected */
  GenderNotCollected = 'GENDER_NOT_COLLECTED',
  /** A gender other than singularly female or male (e.g., non-binary, genderfluid, agender, culturally specific gender) */
  GenderNoSingleGender = 'GENDER_NO_SINGLE_GENDER',
  /** Questioning */
  GenderQuestioning = 'GENDER_QUESTIONING',
  /** Client refused */
  GenderRefused = 'GENDER_REFUSED',
  /** Transgender */
  GenderTransgender = 'GENDER_TRANSGENDER',
  /** Client doesn't know */
  GenderUnknown = 'GENDER_UNKNOWN',
}

export type Mutation = {
  __typename?: 'Mutation';
  createClient?: Maybe<CreateClientPayload>;
};

export type MutationCreateClientArgs = {
  input: CreateClientInput;
};

/** HUD Name Data Quality */
export enum NameDataQuality {
  /** Full name reported */
  NameFull = 'NAME_FULL',
  /** Data not collected */
  NameNotCollected = 'NAME_NOT_COLLECTED',
  /** Partial, street name, or code name reported */
  NamePartial = 'NAME_PARTIAL',
  /** Client refused */
  NameRefused = 'NAME_REFUSED',
  /** Client doesn't know */
  NameUnknown = 'NAME_UNKNOWN',
}

/** HUD Organization */
export type Organization = {
  __typename?: 'Organization';
  id: Scalars['ID'];
  organizationName: Scalars['String'];
  /** Get a list of projects for this organization */
  projects: Array<Project>;
};

/** HUD Organization */
export type OrganizationProjectsArgs = {
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HUD Organization Sorting Options */
export enum OrganizationSortOption {
  Name = 'NAME',
}

/** HUD Project */
export type Project = {
  __typename?: 'Project';
  id: Scalars['ID'];
  organization: Organization;
  projectName: Scalars['String'];
  projectType: ProjectType;
};

/** HUD Project Sorting Options */
export enum ProjectSortOption {
  Name = 'NAME',
  OrganizationAndName = 'ORGANIZATION_AND_NAME',
}

/** HUD Project Types */
export enum ProjectType {
  /** Coordinated Entry */
  Ce = 'CE',
  /** Day Shelter */
  DayShelter = 'DAY_SHELTER',
  /** Emergency Shelter */
  Es = 'ES',
  /** Permanent Housing Only */
  Oph = 'OPH',
  /** Other */
  Other = 'OTHER',
  /** Permanent Housing */
  Ph = 'PH',
  /** Homelessness Prevention */
  Prevention = 'PREVENTION',
  /** Permanent Supportive Housing */
  Psh = 'PSH',
  /** Rapid Re-Housing */
  Rrh = 'RRH',
  /** Services Only */
  ServicesOnly = 'SERVICES_ONLY',
  /** Safe Haven */
  Sh = 'SH',
  /** Street Outreach */
  So = 'SO',
  /** Transitional Housing */
  Th = 'TH',
}

export type Query = {
  __typename?: 'Query';
  /** Search for clients */
  clientSearch: ClientsPaginated;
  /** Get a list of organizations */
  organizations: Array<Organization>;
  /** Get a list of projects */
  projects: Array<Project>;
};

export type QueryClientSearchArgs = {
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ClientSortOption>;
};

export type QueryOrganizationsArgs = {
  sortOrder?: InputMaybe<OrganizationSortOption>;
};

export type QueryProjectsArgs = {
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HUD Race */
export enum Race {
  /** American Indian, Alaska Native, or Indigenous */
  RaceAmIndAkNative = 'RACE_AM_IND_AK_NATIVE',
  /** Asian or Asian American */
  RaceAsian = 'RACE_ASIAN',
  /** Black, African American, or African */
  RaceBlackAfAmerican = 'RACE_BLACK_AF_AMERICAN',
  /** Native Hawaiian or Pacific Islander */
  RaceNativeHiPacific = 'RACE_NATIVE_HI_PACIFIC',
  /** Data not collected */
  RaceNotCollected = 'RACE_NOT_COLLECTED',
  /** Client refused */
  RaceRefused = 'RACE_REFUSED',
  /** Client doesn't know */
  RaceUnknown = 'RACE_UNKNOWN',
  /** White */
  RaceWhite = 'RACE_WHITE',
}

/** HUD SSN Data Quality */
export enum SsnDataQuality {
  /** Full SSN reported */
  SsnFull = 'SSN_FULL',
  /** Data not collected */
  SsnNotCollected = 'SSN_NOT_COLLECTED',
  /** Approximate or partial SSN reported */
  SsnPartial = 'SSN_PARTIAL',
  /** Client refused */
  SsnRefused = 'SSN_REFUSED',
  /** Client doesn't know */
  SsnUnknown = 'SSN_UNKNOWN',
}

export type ValidationError = {
  __typename?: 'ValidationError';
  attribute?: Maybe<Scalars['String']>;
  fullMessage?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  options?: Maybe<Scalars['JsonObject']>;
  type: Scalars['String'];
};

/** HUD Veteran Status */
export enum VeteranStatus {
  /** No */
  VeteranStatusNo = 'VETERAN_STATUS_NO',
  /** Data not collected */
  VeteranStatusNotCollected = 'VETERAN_STATUS_NOT_COLLECTED',
  /** Client refused */
  VeteranStatusRefused = 'VETERAN_STATUS_REFUSED',
  /** Client doesn't know */
  VeteranStatusUnknown = 'VETERAN_STATUS_UNKNOWN',
  /** Yes */
  VeteranStatusYes = 'VETERAN_STATUS_YES',
}
