import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: string;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
  /** Arbitrary JSON Type */
  JsonObject: any;
};

/** Autogenerated input type of AddHouseholdMembersToEnrollment */
export type AddHouseholdMembersToEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  householdId: Scalars['ID'];
  householdMembers: Array<EnrollmentHouseholdMemberInput>;
  /** Start date with format yyyy-mm-dd */
  startDate: Scalars['String'];
};

/** Autogenerated return type of AddHouseholdMembersToEnrollment */
export type AddHouseholdMembersToEnrollmentPayload = {
  __typename?: 'AddHouseholdMembersToEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollments?: Maybe<Array<Enrollment>>;
  errors: Array<ValidationError>;
};

/** HUD Assessment */
export type Assessment = {
  __typename?: 'Assessment';
  assessmentDate: Scalars['ISO8601Date'];
  assessmentDetail?: Maybe<AssessmentDetail>;
  assessmentLevel?: Maybe<AssessmentLevel>;
  assessmentLocation: Scalars['String'];
  assessmentType?: Maybe<AssessmentType>;
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  id: Scalars['ID'];
  inProgress: Scalars['Boolean'];
  prioritizationStatus?: Maybe<PrioritizationStatus>;
  user?: Maybe<User>;
};

/** AssessmentDetail */
export type AssessmentDetail = {
  __typename?: 'AssessmentDetail';
  assessment: Assessment;
  dataCollectionStage?: Maybe<DataCollectionStage>;
  definition: FormDefinition;
  id: Scalars['ID'];
  role: AssessmentRole;
  status: Scalars['String'];
  values?: Maybe<Scalars['JsonObject']>;
};

/** 4.19.4 */
export enum AssessmentLevel {
  /** (1) Crisis Needs Assessment */
  CrisisNeedsAssessment = 'CRISIS_NEEDS_ASSESSMENT',
  /** (2) Housing Needs Assessment */
  HousingNeedsAssessment = 'HOUSING_NEEDS_ASSESSMENT',
}

/** Assessment Role */
export enum AssessmentRole {
  Annual = 'ANNUAL',
  Ce = 'CE',
  /** Custom HMIS Assessment */
  Custom = 'CUSTOM',
  Exit = 'EXIT',
  Intake = 'INTAKE',
  PostExit = 'POST_EXIT',
  /** Form for creating or editing resources directly */
  Record = 'RECORD',
  Update = 'UPDATE',
}

/** HUD Assessment Sorting Options */
export enum AssessmentSortOption {
  AssessmentDate = 'ASSESSMENT_DATE',
}

/** 4.19.3 */
export enum AssessmentType {
  /** (3) In Person */
  InPerson = 'IN_PERSON',
  /** (1) Phone */
  Phone = 'PHONE',
  /** (2) Virtual */
  Virtual = 'VIRTUAL',
}

export type AssessmentsPaginated = {
  __typename?: 'AssessmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Assessment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Value to autofill based on conditional logic */
export type AutofillValue = {
  __typename?: 'AutofillValue';
  autofillBehavior: EnableBehavior;
  autofillWhen: Array<EnableWhen>;
  /** If question is boolean type, autofill value */
  valueBoolean?: Maybe<Scalars['Boolean']>;
  /** If question is choice type, autofill value */
  valueCode?: Maybe<Scalars['String']>;
  /** If question is numeric, autofill value */
  valueNumber?: Maybe<Scalars['Int']>;
};

/** 2.07.6 */
export enum Availability {
  /** (3) Overflow */
  Overflow = 'OVERFLOW',
  /** (2) Seasonal */
  Seasonal = 'SEASONAL',
  /** (1) Year-round */
  YearRound = 'YEAR_ROUND',
}

/** 2.07.5 */
export enum BedType {
  /** (1) Facility-based */
  FacilityBased = 'FACILITY_BASED',
  /** (3) Other */
  Other = 'OTHER',
  /** (2) Voucher */
  Voucher = 'VOUCHER',
}

export enum BoundType {
  Max = 'MAX',
  Min = 'MIN',
}

/** HUD Client */
export type Client = {
  __typename?: 'Client';
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  disabilities: DisabilitiesPaginated;
  disabilityGroups: Array<DisabilityGroup>;
  dob?: Maybe<Scalars['ISO8601Date']>;
  dobDataQuality: DobDataQuality;
  enrollments: EnrollmentsPaginated;
  ethnicity: Ethnicity;
  firstName?: Maybe<Scalars['String']>;
  gender: Array<Gender>;
  healthAndDvs: HealthAndDvsPaginated;
  id: Scalars['ID'];
  incomeBenefits: IncomeBenefitsPaginated;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  nameDataQuality: NameDataQuality;
  nameSuffix?: Maybe<Scalars['String']>;
  personalId: Scalars['String'];
  preferredName?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  race: Array<Race>;
  ssn?: Maybe<Scalars['String']>;
  ssnDataQuality: SsnDataQuality;
  veteranStatus: NoYesReasonsForMissingData;
};

/** HUD Client */
export type ClientDisabilitiesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Client */
export type ClientEnrollmentsArgs = {
  includeInProgress?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<EnrollmentSortOption>;
};

/** HUD Client */
export type ClientHealthAndDvsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HUD Client */
export type ClientIncomeBenefitsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

/** HMIS Client input */
export type ClientInput = {
  dob?: InputMaybe<Scalars['String']>;
  dobDataQuality?: InputMaybe<DobDataQuality>;
  ethnicity?: InputMaybe<Ethnicity>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Array<Gender>>;
  lastName?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  nameDataQuality?: InputMaybe<NameDataQuality>;
  nameSuffix?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  race?: InputMaybe<Array<Race>>;
  ssn?: InputMaybe<Scalars['String']>;
  ssnDataQuality?: InputMaybe<SsnDataQuality>;
  veteranStatus?: InputMaybe<NoYesReasonsForMissingData>;
};

/** HMIS Client search input */
export type ClientSearchInput = {
  /** Date of birth as format yyyy-mm-dd */
  dob?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  /** Client primary key */
  id?: InputMaybe<Scalars['ID']>;
  lastName?: InputMaybe<Scalars['String']>;
  organizations?: InputMaybe<Array<Scalars['ID']>>;
  personalId?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<Array<Scalars['ID']>>;
  /** Last 4 digits of SSN */
  ssnSerial?: InputMaybe<Scalars['String']>;
  /** Omnisearch string */
  textSearch?: InputMaybe<Scalars['String']>;
  warehouseId?: InputMaybe<Scalars['String']>;
};

/** HUD Client Sorting Options */
export enum ClientSortOption {
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
}

export type ClientsPaginated = {
  __typename?: 'ClientsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Client>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export enum Component {
  /** Display text as an error alert */
  AlertError = 'ALERT_ERROR',
  /** Display text as an info alert */
  AlertInfo = 'ALERT_INFO',
  /** Display text as a success alert */
  AlertSuccess = 'ALERT_SUCCESS',
  /** Display text as a warning alert */
  AlertWarning = 'ALERT_WARNING',
  /** Render a boolean input item as a checkbox */
  Checkbox = 'CHECKBOX',
  /** Render a group that contains children of the same type (e.g. all booleans) */
  InputGroup = 'INPUT_GROUP',
  /** Render a choice input item as radio buttons */
  RadioButtons = 'RADIO_BUTTONS',
}

/** Autogenerated input type of CreateClient */
export type CreateClientInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ClientInput;
};

/** Autogenerated return type of CreateClient */
export type CreateClientPayload = {
  __typename?: 'CreateClientPayload';
  client?: Maybe<Client>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of CreateEnrollment */
export type CreateEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  householdMembers: Array<EnrollmentHouseholdMemberInput>;
  inProgress?: InputMaybe<Scalars['Boolean']>;
  projectId: Scalars['ID'];
  /** Start date with format yyyy-mm-dd */
  startDate: Scalars['String'];
};

/** Autogenerated return type of CreateEnrollment */
export type CreateEnrollmentPayload = {
  __typename?: 'CreateEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollments?: Maybe<Array<Enrollment>>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of CreateFunder */
export type CreateFunderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: FunderInput;
};

/** Autogenerated return type of CreateFunder */
export type CreateFunderPayload = {
  __typename?: 'CreateFunderPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  funder?: Maybe<Funder>;
};

/** Autogenerated input type of CreateInventory */
export type CreateInventoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: InventoryInput;
};

/** Autogenerated return type of CreateInventory */
export type CreateInventoryPayload = {
  __typename?: 'CreateInventoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** Autogenerated input type of CreateOrganization */
export type CreateOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: OrganizationInput;
};

/** Autogenerated return type of CreateOrganization */
export type CreateOrganizationPayload = {
  __typename?: 'CreateOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of CreateProjectCoc */
export type CreateProjectCocInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ProjectCocInput;
};

/** Autogenerated return type of CreateProjectCoc */
export type CreateProjectCocPayload = {
  __typename?: 'CreateProjectCocPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  projectCoc?: Maybe<ProjectCoc>;
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ProjectInput;
};

/** Autogenerated return type of CreateProject */
export type CreateProjectPayload = {
  __typename?: 'CreateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  project?: Maybe<Project>;
};

/** Autogenerated input type of CreateService */
export type CreateServiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ServiceInput;
};

/** Autogenerated return type of CreateService */
export type CreateServicePayload = {
  __typename?: 'CreateServicePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  service?: Maybe<Service>;
};

/** 3.03.2 */
export enum DobDataQuality {
  /** (2) Approximate or partial DOB reported */
  ApproximateOrPartialDobReported = 'APPROXIMATE_OR_PARTIAL_DOB_REPORTED',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Full DOB reported */
  FullDobReported = 'FULL_DOB_REPORTED',
}

export enum DataCollectedAbout {
  AllClients = 'ALL_CLIENTS',
  AllClientsReceivingSsvfFinancialAssistance = 'ALL_CLIENTS_RECEIVING_SSVF_FINANCIAL_ASSISTANCE',
  AllClientsReceivingSsvfServices = 'ALL_CLIENTS_RECEIVING_SSVF_SERVICES',
  AllVeterans = 'ALL_VETERANS',
  Hoh = 'HOH',
  HohAndAdults = 'HOH_AND_ADULTS',
  VeteranHoh = 'VETERAN_HOH',
}

/** 5.03.1 */
export enum DataCollectionStage {
  /** (5) Annual assessment */
  AnnualAssessment = 'ANNUAL_ASSESSMENT',
  /** (6) Post-exit */
  PostExit = 'POST_EXIT',
  /** (1) Project entry */
  ProjectEntry = 'PROJECT_ENTRY',
  /** (3) Project exit */
  ProjectExit = 'PROJECT_EXIT',
  /** (2) Update */
  Update = 'UPDATE',
}

/** Autogenerated input type of DeleteEnrollment */
export type DeleteEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteEnrollment */
export type DeleteEnrollmentPayload = {
  __typename?: 'DeleteEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of DeleteFunder */
export type DeleteFunderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteFunder */
export type DeleteFunderPayload = {
  __typename?: 'DeleteFunderPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  funder?: Maybe<Funder>;
};

/** Autogenerated input type of DeleteInventory */
export type DeleteInventoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteInventory */
export type DeleteInventoryPayload = {
  __typename?: 'DeleteInventoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** Autogenerated input type of DeleteOrganization */
export type DeleteOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteOrganization */
export type DeleteOrganizationPayload = {
  __typename?: 'DeleteOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of DeleteProjectCoc */
export type DeleteProjectCocInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteProjectCoc */
export type DeleteProjectCocPayload = {
  __typename?: 'DeleteProjectCocPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  projectCoc?: Maybe<ProjectCoc>;
};

/** Autogenerated input type of DeleteProject */
export type DeleteProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteProject */
export type DeleteProjectPayload = {
  __typename?: 'DeleteProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  project?: Maybe<Project>;
};

/** Autogenerated input type of DeleteService */
export type DeleteServiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteService */
export type DeleteServicePayload = {
  __typename?: 'DeleteServicePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  service?: Maybe<Service>;
};

export type DisabilitiesPaginated = {
  __typename?: 'DisabilitiesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Disability>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Disability = {
  __typename?: 'Disability';
  client: Client;
  dataCollectionStage: DataCollectionStage;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  disabilityResponse: DisabilityResponse;
  disabilityType: DisabilityType;
  enrollment: Enrollment;
  id: Scalars['ID'];
  indefiniteAndImpairs?: Maybe<Scalars['Int']>;
  informationDate: Scalars['ISO8601Date'];
  user?: Maybe<User>;
};

/** Group of disability records that were collected at the same time */
export type DisabilityGroup = {
  __typename?: 'DisabilityGroup';
  chronicHealthCondition?: Maybe<NoYesReasonsForMissingData>;
  chronicHealthConditionIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  dataCollectionStage: DataCollectionStage;
  developmentalDisability?: Maybe<NoYesReasonsForMissingData>;
  /** Current disabling conditionn on the linked Enrollment. It may not match up with the disabilities specified in this group. */
  disablingCondition: NoYesReasonsForMissingData;
  enrollment: Enrollment;
  hivAids?: Maybe<NoYesReasonsForMissingData>;
  /** Concatenated string of Disability record IDs */
  id: Scalars['ID'];
  informationDate: Scalars['ISO8601Date'];
  mentalHealthDisorder?: Maybe<NoYesReasonsForMissingData>;
  mentalHealthDisorderIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  physicalDisability?: Maybe<NoYesReasonsForMissingData>;
  physicalDisabilityIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  substanceUseDisorder?: Maybe<DisabilityResponse>;
  substanceUseDisorderIndefiniteAndImpairs?: Maybe<NoYesReasonsForMissingData>;
  user?: Maybe<User>;
};

/** 4.10.2 */
export enum DisabilityResponse {
  /** (1) Alcohol use disorder */
  AlcoholUseDisorder = 'ALCOHOL_USE_DISORDER',
  /** (3) Both alcohol and drug use disorders */
  BothAlcoholAndDrugUseDisorders = 'BOTH_ALCOHOL_AND_DRUG_USE_DISORDERS',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (2) Drug use disorder */
  DrugUseDisorder = 'DRUG_USE_DISORDER',
  /** (0) No */
  No = 'NO',
}

/** 1.3 */
export enum DisabilityType {
  /** (7) Chronic health condition */
  ChronicHealthCondition = 'CHRONIC_HEALTH_CONDITION',
  /** (6) Developmental disability */
  DevelopmentalDisability = 'DEVELOPMENTAL_DISABILITY',
  /** (8) HIV/AIDS */
  HivAids = 'HIV_AIDS',
  /** (9) Mental health disorder */
  MentalHealthDisorder = 'MENTAL_HEALTH_DISORDER',
  /** (5) Physical disability */
  PhysicalDisability = 'PHYSICAL_DISABILITY',
  /** (10) Substance use disorder */
  SubstanceUseDisorder = 'SUBSTANCE_USE_DISORDER',
}

export enum DisabledDisplay {
  Hidden = 'HIDDEN',
  Protected = 'PROTECTED',
}

export enum EnableBehavior {
  All = 'ALL',
  Any = 'ANY',
}

export enum EnableOperator {
  /** Use with answerBoolean to specify is the item should be enabled or not. */
  Enabled = 'ENABLED',
  Equal = 'EQUAL',
  /** Use with answerBoolean to specify if an answer should exist or not. */
  Exists = 'EXISTS',
  GreaterThan = 'GREATER_THAN',
  GreaterThanEqual = 'GREATER_THAN_EQUAL',
  /** Whether the value is in the answerCodes array. */
  In = 'IN',
  LessThan = 'LESS_THAN',
  LessThanEqual = 'LESS_THAN_EQUAL',
  NotEqual = 'NOT_EQUAL',
}

export type EnableWhen = {
  __typename?: 'EnableWhen';
  /** If question is boolean type, value for comparison */
  answerBoolean?: Maybe<Scalars['Boolean']>;
  /** If question is choice type, value for comparison */
  answerCode?: Maybe<Scalars['String']>;
  /** If question is choice type, and operator is IN, values for comparison */
  answerCodes?: Maybe<Array<Scalars['String']>>;
  /** If question is choice type and has grouped options, value for comparison */
  answerGroupCode?: Maybe<Scalars['String']>;
  /** If question is numeric, value for comparison */
  answerNumber?: Maybe<Scalars['Int']>;
  /** The linkId of a question to compare with the question using the operator */
  compareQuestion?: Maybe<Scalars['String']>;
  /** How to evaluate the question's answer */
  operator: EnableOperator;
  /** The linkId of question that determines whether item is enabled/disabled */
  question: Scalars['String'];
};

/** HUD Enrollment */
export type Enrollment = {
  __typename?: 'Enrollment';
  assessments: AssessmentsPaginated;
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateToStreetEssh?: Maybe<Scalars['ISO8601Date']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  disablingCondition?: Maybe<NoYesReasonsForMissingData>;
  entryDate: Scalars['ISO8601Date'];
  events: EventsPaginated;
  exitDate?: Maybe<Scalars['ISO8601Date']>;
  household: Household;
  id: Scalars['ID'];
  inProgress: Scalars['Boolean'];
  lengthOfStay?: Maybe<ResidencePriorLengthOfStay>;
  livingSituation?: Maybe<LivingSituation>;
  monthsHomelessPastThreeYears?: Maybe<MonthsHomelessPastThreeYears>;
  previousStreetEssh?: Maybe<Scalars['Boolean']>;
  project: Project;
  relationshipToHoH: RelationshipToHoH;
  services: ServicesPaginated;
  timesHomelessPastThreeYears?: Maybe<TimesHomelessPastThreeYears>;
  user?: Maybe<User>;
};

/** HUD Enrollment */
export type EnrollmentAssessmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  role?: InputMaybe<AssessmentRole>;
  sortOrder?: InputMaybe<AssessmentSortOption>;
};

/** HUD Enrollment */
export type EnrollmentEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<EventSortOption>;
};

/** HUD Enrollment */
export type EnrollmentServicesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ServiceSortOption>;
};

/** HMIS Enrollment household member input */
export type EnrollmentHouseholdMemberInput = {
  id: Scalars['ID'];
  relationshipToHoH: RelationshipToHoH;
};

/** HUD Enrollment Sorting Options */
export enum EnrollmentSortOption {
  MostRecent = 'MOST_RECENT',
}

export type EnrollmentsPaginated = {
  __typename?: 'EnrollmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Enrollment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** 3.05.1 */
export enum Ethnicity {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Hispanic/Latin(a)(o)(x) */
  HispanicLatinAOX = 'HISPANIC_LATIN_A_O_X',
  /** (0) Non-Hispanic/Non-Latin(a)(o)(x) */
  NonHispanicNonLatinAOX = 'NON_HISPANIC_NON_LATIN_A_O_X',
}

/** HUD Event */
export type Event = {
  __typename?: 'Event';
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  event: EventType;
  eventDate: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  locationCrisisOrPhHousing?: Maybe<Scalars['String']>;
  probSolDivRrResult?: Maybe<Scalars['Boolean']>;
  referralCaseManageAfter?: Maybe<Scalars['Boolean']>;
  referralResult?: Maybe<ReferralResult>;
  resultDate?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
};

/** HUD Event Sorting Options */
export enum EventSortOption {
  EventDate = 'EVENT_DATE',
}

/** 4.20.2 */
export enum EventType {
  /** (2) Problem Solving/Diversion/Rapid Resolution intervention or service */
  ProblemSolvingDiversionRapidResolutionInterventionOrService = 'PROBLEM_SOLVING_DIVERSION_RAPID_RESOLUTION_INTERVENTION_OR_SERVICE',
  /** (18) Referral to a Housing Stability Voucher */
  ReferralToAHousingStabilityVoucher = 'REFERRAL_TO_A_HOUSING_STABILITY_VOUCHER',
  /** (16) Referral to emergency assistance/flex fund/furniture assistance */
  ReferralToEmergencyAssistanceFlexFundFurnitureAssistance = 'REFERRAL_TO_EMERGENCY_ASSISTANCE_FLEX_FUND_FURNITURE_ASSISTANCE',
  /** (17) Referral to Emergency Housing Voucher (EHV) */
  ReferralToEmergencyHousingVoucherEhv = 'REFERRAL_TO_EMERGENCY_HOUSING_VOUCHER_EHV',
  /** (10) Referral to Emergency Shelter bed opening */
  ReferralToEmergencyShelterBedOpening = 'REFERRAL_TO_EMERGENCY_SHELTER_BED_OPENING',
  /** (7) Referral to Housing Navigation project or services */
  ReferralToHousingNavigationProjectOrServices = 'REFERRAL_TO_HOUSING_NAVIGATION_PROJECT_OR_SERVICES',
  /** (12) Referral to Joint TH-RRH project/unit/resource opening */
  ReferralToJointThRrhProjectUnitResourceOpening = 'REFERRAL_TO_JOINT_TH_RRH_PROJECT_UNIT_RESOURCE_OPENING',
  /** (8) Referral to Non-continuum services: Ineligible for continuum services */
  ReferralToNonContinuumServicesIneligibleForContinuumServices = 'REFERRAL_TO_NON_CONTINUUM_SERVICES_INELIGIBLE_FOR_CONTINUUM_SERVICES',
  /** (9) Referral to Non-continuum services: No availability in continuum services */
  ReferralToNonContinuumServicesNoAvailabilityInContinuumServices = 'REFERRAL_TO_NON_CONTINUUM_SERVICES_NO_AVAILABILITY_IN_CONTINUUM_SERVICES',
  /** (15) Referral to Other PH project/unit/resource opening */
  ReferralToOtherPhProjectUnitResourceOpening = 'REFERRAL_TO_OTHER_PH_PROJECT_UNIT_RESOURCE_OPENING',
  /** (5) Referral to Post-placement/ follow-up case management */
  ReferralToPostPlacementFollowUpCaseManagement = 'REFERRAL_TO_POST_PLACEMENT_FOLLOW_UP_CASE_MANAGEMENT',
  /** (1) Referral to Prevention Assistance project */
  ReferralToPreventionAssistanceProject = 'REFERRAL_TO_PREVENTION_ASSISTANCE_PROJECT',
  /** (14) Referral to PSH project resource opening */
  ReferralToPshProjectResourceOpening = 'REFERRAL_TO_PSH_PROJECT_RESOURCE_OPENING',
  /** (13) Referral to RRH project resource opening */
  ReferralToRrhProjectResourceOpening = 'REFERRAL_TO_RRH_PROJECT_RESOURCE_OPENING',
  /** (3) Referral to scheduled Coordinated Entry Crisis Needs Assessment */
  ReferralToScheduledCoordinatedEntryCrisisNeedsAssessment = 'REFERRAL_TO_SCHEDULED_COORDINATED_ENTRY_CRISIS_NEEDS_ASSESSMENT',
  /** (4) Referral to scheduled Coordinated Entry Housing Needs Assessment */
  ReferralToScheduledCoordinatedEntryHousingNeedsAssessment = 'REFERRAL_TO_SCHEDULED_COORDINATED_ENTRY_HOUSING_NEEDS_ASSESSMENT',
  /** (6) Referral to Street Outreach project or services */
  ReferralToStreetOutreachProjectOrServices = 'REFERRAL_TO_STREET_OUTREACH_PROJECT_OR_SERVICES',
  /** (11) Referral to Transitional Housing bed/unit opening */
  ReferralToTransitionalHousingBedUnitOpening = 'REFERRAL_TO_TRANSITIONAL_HOUSING_BED_UNIT_OPENING',
}

export type EventsPaginated = {
  __typename?: 'EventsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Event>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** C1.2 */
export enum FeelingFrequency {
  /** (4) At least every day */
  AtLeastEveryDay = 'AT_LEAST_EVERY_DAY',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (0) Not at all */
  NotAtAll = 'NOT_AT_ALL',
  /** (1) Once a month */
  OnceAMonth = 'ONCE_A_MONTH',
  /** (2) Several times a month */
  SeveralTimesAMonth = 'SEVERAL_TIMES_A_MONTH',
  /** (3) Several times a week */
  SeveralTimesAWeek = 'SEVERAL_TIMES_A_WEEK',
}

/** FormDefinition */
export type FormDefinition = {
  __typename?: 'FormDefinition';
  definition: FormDefinitionJson;
  id: Scalars['ID'];
  identifier: Scalars['String'];
  role: AssessmentRole;
  status: Scalars['String'];
  version: Scalars['Int'];
};

export type FormDefinitionJson = {
  __typename?: 'FormDefinitionJson';
  /** Nested items */
  item: Array<FormItem>;
};

/** A question or group of questions */
export type FormItem = {
  __typename?: 'FormItem';
  /** Value(s) to autofill based on conditional logic */
  autofillValues?: Maybe<Array<AutofillValue>>;
  bounds?: Maybe<Array<ValueBound>>;
  /** Component to use for display/input of this item */
  component?: Maybe<Component>;
  /** Include this item only if the Client meets this HUD DataCollectedAbout condition */
  dataCollectedAbout?: Maybe<DataCollectedAbout>;
  /** How to display item if it is disabled */
  disabledDisplay?: Maybe<DisabledDisplay>;
  enableBehavior?: Maybe<EnableBehavior>;
  enableWhen?: Maybe<Array<EnableWhen>>;
  /**
   * Name of the field on the record (or on the query input type). Used for record
   * creation/update forms and for assessment population.
   */
  fieldName?: Maybe<Scalars['String']>;
  /** Include this item only for the listed funders */
  funders?: Maybe<Array<FundingSource>>;
  /** Helper text for the item */
  helperText?: Maybe<Scalars['String']>;
  /** Whether the item should always be hidden */
  hidden?: Maybe<Scalars['Boolean']>;
  /** Initial value(s) when item is first rendered */
  initial?: Maybe<Array<InitialValue>>;
  /** Nested items */
  item?: Maybe<Array<FormItem>>;
  /** Unique identifier for item */
  linkId: Scalars['String'];
  /** Permitted answers, for choice items */
  pickListOptions?: Maybe<Array<PickListOption>>;
  /** Reference to value set of possible answer options */
  pickListReference?: Maybe<Scalars['String']>;
  /** Prefix for the item label */
  prefix?: Maybe<Scalars['String']>;
  /** Exclude this item for the listed project types */
  projectTypesExcluded?: Maybe<Array<ProjectType>>;
  /** Include this item only for the listed project types */
  projectTypesIncluded?: Maybe<Array<ProjectType>>;
  /** Whether human editing is allowed */
  readOnly?: Maybe<Scalars['Boolean']>;
  /** Record type to use for population */
  recordType?: Maybe<RelatedRecordType>;
  /** Whether the item may repeat (for choice types, this means multiple choice) */
  repeats?: Maybe<Scalars['Boolean']>;
  /** Whether the item must be included in data results */
  required?: Maybe<Scalars['Boolean']>;
  /** Primary text for the item */
  text?: Maybe<Scalars['String']>;
  type: ItemType;
};

export type Funder = {
  __typename?: 'Funder';
  active: Scalars['Boolean'];
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  endDate?: Maybe<Scalars['ISO8601Date']>;
  funder: FundingSource;
  grantId: Scalars['String'];
  id: Scalars['ID'];
  otherFunder?: Maybe<Scalars['String']>;
  project: Project;
  startDate: Scalars['ISO8601Date'];
};

export type FunderInput = {
  endDate?: InputMaybe<Scalars['ISO8601Date']>;
  funder?: InputMaybe<FundingSource>;
  grantId?: InputMaybe<Scalars['String']>;
  otherFunder?: InputMaybe<Scalars['String']>;
  projectId?: InputMaybe<Scalars['ID']>;
  startDate?: InputMaybe<Scalars['ISO8601Date']>;
};

/** HUD Funder Sorting Options */
export enum FunderSortOption {
  StartDate = 'START_DATE',
}

export type FundersPaginated = {
  __typename?: 'FundersPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Funder>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** 2.06.1 */
export enum FundingSource {
  /** (21) HHS: PATH - Street Outreach & Supportive Services Only */
  HhsPathStreetOutreachSupportiveServicesOnly = 'HHS_PATH_STREET_OUTREACH_SUPPORTIVE_SERVICES_ONLY',
  /** (22) HHS: RHY - Basic Center Program (prevention and shelter) */
  HhsRhyBasicCenterProgramPreventionAndShelter = 'HHS_RHY_BASIC_CENTER_PROGRAM_PREVENTION_AND_SHELTER',
  /** (26) HHS: RHY - Demonstration Project */
  HhsRhyDemonstrationProject = 'HHS_RHY_DEMONSTRATION_PROJECT',
  /** (23) HHS: RHY - Maternity Group Home for Pregnant and Parenting Youth */
  HhsRhyMaternityGroupHomeForPregnantAndParentingYouth = 'HHS_RHY_MATERNITY_GROUP_HOME_FOR_PREGNANT_AND_PARENTING_YOUTH',
  /** (25) HHS: RHY - Street Outreach Project */
  HhsRhyStreetOutreachProject = 'HHS_RHY_STREET_OUTREACH_PROJECT',
  /** (24) HHS: RHY - Transitional Living Program */
  HhsRhyTransitionalLivingProgram = 'HHS_RHY_TRANSITIONAL_LIVING_PROGRAM',
  /** (1) HUD: CoC - Homelessness Prevention (High Performing Communities Only) */
  HudCocHomelessnessPreventionHighPerformingCommunitiesOnly = 'HUD_COC_HOMELESSNESS_PREVENTION_HIGH_PERFORMING_COMMUNITIES_ONLY',
  /** (49) HUD: CoC - Joint Component RRH/PSH */
  HudCocJointComponentRrhPsh = 'HUD_COC_JOINT_COMPONENT_RRH_PSH',
  /** (44) HUD: CoC - Joint Component TH/RRH */
  HudCocJointComponentThRrh = 'HUD_COC_JOINT_COMPONENT_TH_RRH',
  /** (2) HUD: CoC - Permanent Supportive Housing */
  HudCocPermanentSupportiveHousing = 'HUD_COC_PERMANENT_SUPPORTIVE_HOUSING',
  /** (3) HUD: CoC - Rapid Re-Housing */
  HudCocRapidReHousing = 'HUD_COC_RAPID_RE_HOUSING',
  /** (6) HUD: CoC - Safe Haven */
  HudCocSafeHaven = 'HUD_COC_SAFE_HAVEN',
  /** (7) HUD: CoC - Single Room Occupancy (SRO) */
  HudCocSingleRoomOccupancySro = 'HUD_COC_SINGLE_ROOM_OCCUPANCY_SRO',
  /** (4) HUD: CoC - Supportive Services Only */
  HudCocSupportiveServicesOnly = 'HUD_COC_SUPPORTIVE_SERVICES_ONLY',
  /** (5) HUD: CoC - Transitional Housing */
  HudCocTransitionalHousing = 'HUD_COC_TRANSITIONAL_HOUSING',
  /** (43) HUD: CoC - Youth Homeless Demonstration Program (YHDP) */
  HudCocYouthHomelessDemonstrationProgramYhdp = 'HUD_COC_YOUTH_HOMELESS_DEMONSTRATION_PROGRAM_YHDP',
  /** (47) HUD: ESG - CV */
  HudEsgCv = 'HUD_ESG_CV',
  /** (8) HUD: ESG - Emergency Shelter (operating and/or essential services) */
  HudEsgEmergencyShelterOperatingAndOrEssentialServices = 'HUD_ESG_EMERGENCY_SHELTER_OPERATING_AND_OR_ESSENTIAL_SERVICES',
  /** (9) HUD: ESG - Homelessness Prevention */
  HudEsgHomelessnessPrevention = 'HUD_ESG_HOMELESSNESS_PREVENTION',
  /** (10) HUD: ESG - Rapid Rehousing */
  HudEsgRapidRehousing = 'HUD_ESG_RAPID_REHOUSING',
  /** (53) HUD: ESG - RUSH */
  HudEsgRush = 'HUD_ESG_RUSH',
  /** (11) HUD: ESG - Street Outreach */
  HudEsgStreetOutreach = 'HUD_ESG_STREET_OUTREACH',
  /** (50) HUD: HOME */
  HudHome = 'HUD_HOME',
  /** (51) HUD: HOME (ARP) */
  HudHomeArp = 'HUD_HOME_ARP',
  /** (48) HUD: HOPWA - CV */
  HudHopwaCv = 'HUD_HOPWA_CV',
  /** (13) HUD: HOPWA - Hotel/Motel Vouchers */
  HudHopwaHotelMotelVouchers = 'HUD_HOPWA_HOTEL_MOTEL_VOUCHERS',
  /** (14) HUD: HOPWA - Housing Information */
  HudHopwaHousingInformation = 'HUD_HOPWA_HOUSING_INFORMATION',
  /** (15) HUD: HOPWA - Permanent Housing (facility based or TBRA) */
  HudHopwaPermanentHousingFacilityBasedOrTbra = 'HUD_HOPWA_PERMANENT_HOUSING_FACILITY_BASED_OR_TBRA',
  /** (16) HUD: HOPWA - Permanent Housing Placement */
  HudHopwaPermanentHousingPlacement = 'HUD_HOPWA_PERMANENT_HOUSING_PLACEMENT',
  /** (17) HUD: HOPWA - Short-Term Rent, Mortgage, Utility assistance */
  HudHopwaShortTermRentMortgageUtilityAssistance = 'HUD_HOPWA_SHORT_TERM_RENT_MORTGAGE_UTILITY_ASSISTANCE',
  /** (18) HUD: HOPWA - Short-Term Supportive Facility */
  HudHopwaShortTermSupportiveFacility = 'HUD_HOPWA_SHORT_TERM_SUPPORTIVE_FACILITY',
  /** (19) HUD: HOPWA - Transitional Housing (facility based or TBRA) */
  HudHopwaTransitionalHousingFacilityBasedOrTbra = 'HUD_HOPWA_TRANSITIONAL_HOUSING_FACILITY_BASED_OR_TBRA',
  /** (20) HUD: HUD/VASH */
  HudHudVash = 'HUD_HUD_VASH',
  /** (35) HUD: Pay for Success */
  HudPayForSuccess = 'HUD_PAY_FOR_SUCCESS',
  /** (52) HUD: PIH (Emergency Housing Voucher) */
  HudPihEmergencyHousingVoucher = 'HUD_PIH_EMERGENCY_HOUSING_VOUCHER',
  /** (36) HUD: Public and Indian Housing (PIH) Programs */
  HudPublicAndIndianHousingPihPrograms = 'HUD_PUBLIC_AND_INDIAN_HOUSING_PIH_PROGRAMS',
  /** (12) HUD: Rural Housing Stability Assistance Program */
  HudRuralHousingStabilityAssistanceProgram = 'HUD_RURAL_HOUSING_STABILITY_ASSISTANCE_PROGRAM',
  /** (46) Local or Other Funding Source */
  LocalOrOtherFundingSource = 'LOCAL_OR_OTHER_FUNDING_SOURCE',
  /** (34) N/A */
  NA = 'N_A',
  /** (30) VA: Community Contract Safe Haven Program */
  VaCommunityContractSafeHavenProgram = 'VA_COMMUNITY_CONTRACT_SAFE_HAVEN_PROGRAM',
  /** (32) VA: Compensated Work Therapy Transitional Residence */
  VaCompensatedWorkTherapyTransitionalResidence = 'VA_COMPENSATED_WORK_THERAPY_TRANSITIONAL_RESIDENCE',
  /** (27) VA: CRS Contract Residential Services */
  VaCrsContractResidentialServices = 'VA_CRS_CONTRACT_RESIDENTIAL_SERVICES',
  /** (37) VA: Grant Per Diem - Bridge Housing */
  VaGrantPerDiemBridgeHousing = 'VA_GRANT_PER_DIEM_BRIDGE_HOUSING',
  /** (45) VA: Grant Per Diem - Case Management/Housing Retention */
  VaGrantPerDiemCaseManagementHousingRetention = 'VA_GRANT_PER_DIEM_CASE_MANAGEMENT_HOUSING_RETENTION',
  /** (40) VA: Grant Per Diem - Clinical Treatment */
  VaGrantPerDiemClinicalTreatment = 'VA_GRANT_PER_DIEM_CLINICAL_TREATMENT',
  /** (39) VA: Grant Per Diem - Hospital to Housing */
  VaGrantPerDiemHospitalToHousing = 'VA_GRANT_PER_DIEM_HOSPITAL_TO_HOUSING',
  /** (38) VA: Grant Per Diem - Low Demand */
  VaGrantPerDiemLowDemand = 'VA_GRANT_PER_DIEM_LOW_DEMAND',
  /** (41) VA: Grant Per Diem - Service Intensive Transitional Housing */
  VaGrantPerDiemServiceIntensiveTransitionalHousing = 'VA_GRANT_PER_DIEM_SERVICE_INTENSIVE_TRANSITIONAL_HOUSING',
  /** (42) VA: Grant Per Diem - Transition in Place */
  VaGrantPerDiemTransitionInPlace = 'VA_GRANT_PER_DIEM_TRANSITION_IN_PLACE',
  /** (33) VA: Supportive Services for Veteran Families */
  VaSupportiveServicesForVeteranFamilies = 'VA_SUPPORTIVE_SERVICES_FOR_VETERAN_FAMILIES',
}

/** HUD Gender (1.7) */
export enum Gender {
  /** (8) Client doesn't know */
  GenderClientDoesnTKnow = 'GENDER_CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  GenderClientRefused = 'GENDER_CLIENT_REFUSED',
  /** (99) Data not collected */
  GenderDataNotCollected = 'GENDER_DATA_NOT_COLLECTED',
  /** (0) Female */
  GenderFemale = 'GENDER_FEMALE',
  /** (1) Male */
  GenderMale = 'GENDER_MALE',
  /** (4) A gender other than singularly female or male (e.g., non-binary, genderfluid, agender, culturally specific gender) */
  GenderNoSingleGender = 'GENDER_NO_SINGLE_GENDER',
  /** (6) Questioning */
  GenderQuestioning = 'GENDER_QUESTIONING',
  /** (5) Transgender */
  GenderTransgender = 'GENDER_TRANSGENDER',
}

/** 2.03.4 */
export enum GeographyType {
  /** (3) Rural */
  Rural = 'RURAL',
  /** (2) Suburban */
  Suburban = 'SUBURBAN',
  /** (99) Unknown / data not collected */
  UnknownDataNotCollected = 'UNKNOWN_DATA_NOT_COLLECTED',
  /** (1) Urban */
  Urban = 'URBAN',
}

/** 2.02.9 */
export enum HopwaMedAssistedLivingFac {
  /** (0) No */
  No = 'NO',
  /** (2) Non-HOPWA Funded Project */
  NonHopwaFundedProject = 'NON_HOPWA_FUNDED_PROJECT',
  /** (1) Yes */
  Yes = 'YES',
}

export type HealthAndDv = {
  __typename?: 'HealthAndDv';
  bounceBack?: Maybe<WellbeingAgreement>;
  client: Client;
  currentlyFleeing?: Maybe<NoYesReasonsForMissingData>;
  dataCollectionStage: DataCollectionStage;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  dentalHealthStatus?: Maybe<HealthStatus>;
  domesticViolenceVictim?: Maybe<NoYesReasonsForMissingData>;
  dueDate?: Maybe<Scalars['ISO8601Date']>;
  enrollment: Enrollment;
  feelingFrequency?: Maybe<FeelingFrequency>;
  generalHealthStatus?: Maybe<HealthStatus>;
  id: Scalars['ID'];
  informationDate: Scalars['ISO8601Date'];
  lifeValue?: Maybe<WellbeingAgreement>;
  mentalHealthStatus?: Maybe<HealthStatus>;
  pregnancyStatus?: Maybe<NoYesReasonsForMissingData>;
  supportFromOthers?: Maybe<WellbeingAgreement>;
  user?: Maybe<User>;
  whenOccurred?: Maybe<WhenDvOccurred>;
};

export type HealthAndDvsPaginated = {
  __typename?: 'HealthAndDvsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<HealthAndDv>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** R7.1 */
export enum HealthStatus {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Excellent */
  Excellent = 'EXCELLENT',
  /** (4) Fair */
  Fair = 'FAIR',
  /** (3) Good */
  Good = 'GOOD',
  /** (5) Poor */
  Poor = 'POOR',
  /** (2) Very good */
  VeryGood = 'VERY_GOOD',
}

/** HUD Household */
export type Household = {
  __typename?: 'Household';
  householdClients: Array<HouseholdClient>;
  id: Scalars['ID'];
};

/** HUD Client within a Household */
export type HouseholdClient = {
  __typename?: 'HouseholdClient';
  client: Client;
  enrollment: Enrollment;
  id: Scalars['ID'];
  relationshipToHoH: RelationshipToHoH;
};

/** 2.07.4 */
export enum HouseholdType {
  /** (1) Households without children */
  HouseholdsWithoutChildren = 'HOUSEHOLDS_WITHOUT_CHILDREN',
  /** (3) Households with at least one adult and one child */
  HouseholdsWithAtLeastOneAdultAndOneChild = 'HOUSEHOLDS_WITH_AT_LEAST_ONE_ADULT_AND_ONE_CHILD',
  /** (4) Households with only children */
  HouseholdsWithOnlyChildren = 'HOUSEHOLDS_WITH_ONLY_CHILDREN',
}

/** 2.02.D */
export enum HousingType {
  /** (2) Site-based - clustered / multiple sites */
  SiteBasedClusteredMultipleSites = 'SITE_BASED_CLUSTERED_MULTIPLE_SITES',
  /** (1) Site-based - single site */
  SiteBasedSingleSite = 'SITE_BASED_SINGLE_SITE',
  /** (3) Tenant-based - scattered site */
  TenantBasedScatteredSite = 'TENANT_BASED_SCATTERED_SITE',
}

export type IncomeBenefit = {
  __typename?: 'IncomeBenefit';
  adap?: Maybe<NoYesReasonsForMissingData>;
  alimonyAmount?: Maybe<Scalars['Float']>;
  benefitsFromAnySource?: Maybe<NoYesReasonsForMissingData>;
  childSupportAmount?: Maybe<Scalars['Float']>;
  client: Client;
  cobra?: Maybe<Scalars['Boolean']>;
  connectionWithSoar?: Maybe<NoYesReasonsForMissingData>;
  dataCollectionStage: DataCollectionStage;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  earnedAmount?: Maybe<Scalars['Float']>;
  employerProvided?: Maybe<Scalars['Boolean']>;
  enrollment: Enrollment;
  gaAmount?: Maybe<Scalars['Float']>;
  hivaidsAssistance?: Maybe<NoYesReasonsForMissingData>;
  id: Scalars['ID'];
  incomeFromAnySource?: Maybe<NoYesReasonsForMissingData>;
  indianHealthServices?: Maybe<Scalars['Boolean']>;
  informationDate: Scalars['ISO8601Date'];
  insuranceFromAnySource?: Maybe<NoYesReasonsForMissingData>;
  medicaid?: Maybe<Scalars['Boolean']>;
  medicare?: Maybe<Scalars['Boolean']>;
  noAdapReason?: Maybe<NoAssistanceReason>;
  noCobraReason?: Maybe<ReasonNotInsured>;
  noEmployerProvidedReason?: Maybe<ReasonNotInsured>;
  noHivaidsAssistanceReason?: Maybe<NoAssistanceReason>;
  noIndianHealthServicesReason?: Maybe<ReasonNotInsured>;
  noMedicaidReason?: Maybe<ReasonNotInsured>;
  noMedicareReason?: Maybe<ReasonNotInsured>;
  noPrivatePayReason?: Maybe<ReasonNotInsured>;
  noRyanWhiteReason?: Maybe<NoAssistanceReason>;
  noSchipReason?: Maybe<ReasonNotInsured>;
  noStateHealthInsReason?: Maybe<ReasonNotInsured>;
  noVaMedReason?: Maybe<ReasonNotInsured>;
  otherBenefitsSource?: Maybe<Scalars['Boolean']>;
  otherBenefitsSourceIdentify?: Maybe<Scalars['String']>;
  otherIncomeAmount?: Maybe<Scalars['Float']>;
  otherIncomeSourceIdentify?: Maybe<Scalars['String']>;
  otherInsurance?: Maybe<Scalars['Boolean']>;
  otherInsuranceIdentify?: Maybe<Scalars['String']>;
  otherTanf?: Maybe<Scalars['Boolean']>;
  pensionAmount?: Maybe<Scalars['Float']>;
  privateDisabilityAmount?: Maybe<Scalars['Float']>;
  privatePay?: Maybe<Scalars['Boolean']>;
  ryanWhiteMedDent?: Maybe<NoYesReasonsForMissingData>;
  schip?: Maybe<Scalars['Boolean']>;
  snap?: Maybe<Scalars['Boolean']>;
  socSecRetirementAmount?: Maybe<Scalars['Float']>;
  ssdiAmount?: Maybe<Scalars['Float']>;
  ssiAmount?: Maybe<Scalars['Float']>;
  stateHealthIns?: Maybe<Scalars['Boolean']>;
  tanfAmount?: Maybe<Scalars['Float']>;
  tanfChildCare?: Maybe<Scalars['Boolean']>;
  tanfTransportation?: Maybe<Scalars['Boolean']>;
  totalMonthlyIncome?: Maybe<Scalars['String']>;
  unemploymentAmount?: Maybe<Scalars['Float']>;
  user?: Maybe<User>;
  vaDisabilityNonServiceAmount?: Maybe<Scalars['Float']>;
  vaDisabilityServiceAmount?: Maybe<Scalars['Float']>;
  vaMedicalServices?: Maybe<Scalars['Boolean']>;
  wic?: Maybe<Scalars['Boolean']>;
  workersCompAmount?: Maybe<Scalars['Float']>;
};

export type IncomeBenefitsPaginated = {
  __typename?: 'IncomeBenefitsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<IncomeBenefit>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Initial value when item is first rendered */
export type InitialValue = {
  __typename?: 'InitialValue';
  /** If question is boolean type, initial value */
  valueBoolean?: Maybe<Scalars['Boolean']>;
  /** If question is choice type, initial value */
  valueCode?: Maybe<Scalars['String']>;
  /** Name of local variable to use as initial value if present. Variable type should match item type. */
  valueLocalConstant?: Maybe<Scalars['String']>;
  /** If question is numeric, initial value */
  valueNumber?: Maybe<Scalars['Int']>;
};

export type InventoriesPaginated = {
  __typename?: 'InventoriesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Inventory>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Inventory = {
  __typename?: 'Inventory';
  active: Scalars['Boolean'];
  availability?: Maybe<Availability>;
  bedInventory: Scalars['Int'];
  chBedInventory?: Maybe<Scalars['Int']>;
  chVetBedInventory?: Maybe<Scalars['Int']>;
  chYouthBedInventory?: Maybe<Scalars['Int']>;
  cocCode: Scalars['String'];
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  esBedType?: Maybe<BedType>;
  householdType: HouseholdType;
  id: Scalars['ID'];
  inventoryEndDate?: Maybe<Scalars['ISO8601Date']>;
  inventoryStartDate: Scalars['ISO8601Date'];
  otherBedInventory?: Maybe<Scalars['Int']>;
  project: Project;
  unitInventory: Scalars['Int'];
  vetBedInventory?: Maybe<Scalars['Int']>;
  youthBedInventory?: Maybe<Scalars['Int']>;
  youthVetBedInventory?: Maybe<Scalars['Int']>;
};

export type InventoryInput = {
  availability?: InputMaybe<Availability>;
  bedInventory?: InputMaybe<Scalars['Int']>;
  chBedInventory?: InputMaybe<Scalars['Int']>;
  chVetBedInventory?: InputMaybe<Scalars['Int']>;
  chYouthBedInventory?: InputMaybe<Scalars['Int']>;
  cocCode?: InputMaybe<Scalars['String']>;
  esBedType?: InputMaybe<BedType>;
  householdType?: InputMaybe<HouseholdType>;
  inventoryEndDate?: InputMaybe<Scalars['ISO8601Date']>;
  inventoryStartDate?: InputMaybe<Scalars['ISO8601Date']>;
  otherBedInventory?: InputMaybe<Scalars['Int']>;
  projectId?: InputMaybe<Scalars['ID']>;
  unitInventory?: InputMaybe<Scalars['Int']>;
  vetBedInventory?: InputMaybe<Scalars['Int']>;
  youthBedInventory?: InputMaybe<Scalars['Int']>;
  youthVetBedInventory?: InputMaybe<Scalars['Int']>;
};

/** HUD Inventory Sorting Options */
export enum InventorySortOption {
  StartDate = 'START_DATE',
}

export enum ItemType {
  Boolean = 'BOOLEAN',
  Choice = 'CHOICE',
  Currency = 'CURRENCY',
  Date = 'DATE',
  Display = 'DISPLAY',
  Group = 'GROUP',
  Integer = 'INTEGER',
  OpenChoice = 'OPEN_CHOICE',
  String = 'STRING',
  Text = 'TEXT',
}

/** 3.12.1 */
export enum LivingSituation {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (24) Deceased */
  Deceased = 'DECEASED',
  /** (1) Emergency shelter, including hotel or motel paid for with emergency shelter voucher, or RHY-funded Host Home shelter */
  EmergencyShelterIncludingHotelOrMotelPaidForWithEmergencyShelterVoucherOrRhyFundedHostHomeShelter = 'EMERGENCY_SHELTER_INCLUDING_HOTEL_OR_MOTEL_PAID_FOR_WITH_EMERGENCY_SHELTER_VOUCHER_OR_RHY_FUNDED_HOST_HOME_SHELTER',
  /** (15) Foster care home or foster care group home */
  FosterCareHomeOrFosterCareGroupHome = 'FOSTER_CARE_HOME_OR_FOSTER_CARE_GROUP_HOME',
  /** (6) Hospital or other residential non-psychiatric medical facility */
  HospitalOrOtherResidentialNonPsychiatricMedicalFacility = 'HOSPITAL_OR_OTHER_RESIDENTIAL_NON_PSYCHIATRIC_MEDICAL_FACILITY',
  /** (32) Host Home (non-crisis) */
  HostHomeNonCrisis = 'HOST_HOME_NON_CRISIS',
  /** (14) Hotel or motel paid for without emergency shelter voucher */
  HotelOrMotelPaidForWithoutEmergencyShelterVoucher = 'HOTEL_OR_MOTEL_PAID_FOR_WITHOUT_EMERGENCY_SHELTER_VOUCHER',
  /** (27) Interim Housing */
  InterimHousing = 'INTERIM_HOUSING',
  /** (7) Jail, prison or juvenile detention facility */
  JailPrisonOrJuvenileDetentionFacility = 'JAIL_PRISON_OR_JUVENILE_DETENTION_FACILITY',
  /** (25) Long-term care facility or nursing home */
  LongTermCareFacilityOrNursingHome = 'LONG_TERM_CARE_FACILITY_OR_NURSING_HOME',
  /** (26) Moved from one HOPWA funded project to HOPWA PH */
  MovedFromOneHopwaFundedProjectToHopwaPh = 'MOVED_FROM_ONE_HOPWA_FUNDED_PROJECT_TO_HOPWA_PH',
  /** (30) No exit interview completed */
  NoExitInterviewCompleted = 'NO_EXIT_INTERVIEW_COMPLETED',
  /** (17) Other */
  Other = 'OTHER',
  /** (11) Owned by client, no ongoing housing subsidy */
  OwnedByClientNoOngoingHousingSubsidy = 'OWNED_BY_CLIENT_NO_ONGOING_HOUSING_SUBSIDY',
  /** (21) Owned by client, with ongoing housing subsidy */
  OwnedByClientWithOngoingHousingSubsidy = 'OWNED_BY_CLIENT_WITH_ONGOING_HOUSING_SUBSIDY',
  /** (3) Permanent housing (other than RRH) for formerly homeless persons */
  PermanentHousingOtherThanRrhForFormerlyHomelessPersons = 'PERMANENT_HOUSING_OTHER_THAN_RRH_FOR_FORMERLY_HOMELESS_PERSONS',
  /**
   * (16) Place not meant for habitation (e.g., a vehicle, an abandoned building,
   * bus/train/subway station/airport or anywhere outside)
   */
  PlaceNotMeantForHabitationEGAVehicleAnAbandonedBuildingBusTrainSubwayStationAirportOrAnywhereOutside = 'PLACE_NOT_MEANT_FOR_HABITATION_E_G_A_VEHICLE_AN_ABANDONED_BUILDING_BUS_TRAIN_SUBWAY_STATION_AIRPORT_OR_ANYWHERE_OUTSIDE',
  /** (4) Psychiatric hospital or other psychiatric facility */
  PsychiatricHospitalOrOtherPsychiatricFacility = 'PSYCHIATRIC_HOSPITAL_OR_OTHER_PSYCHIATRIC_FACILITY',
  /** (34) Rental by client in a public housing unit */
  RentalByClientInAPublicHousingUnit = 'RENTAL_BY_CLIENT_IN_A_PUBLIC_HOUSING_UNIT',
  /** (10) Rental by client, no ongoing housing subsidy */
  RentalByClientNoOngoingHousingSubsidy = 'RENTAL_BY_CLIENT_NO_ONGOING_HOUSING_SUBSIDY',
  /** (28) Rental by client, with GPD TIP housing subsidy */
  RentalByClientWithGpdTipHousingSubsidy = 'RENTAL_BY_CLIENT_WITH_GPD_TIP_HOUSING_SUBSIDY',
  /** (33) Rental by client, with HCV voucher (tenant or project based) */
  RentalByClientWithHcvVoucherTenantOrProjectBased = 'RENTAL_BY_CLIENT_WITH_HCV_VOUCHER_TENANT_OR_PROJECT_BASED',
  /** (20) Rental by client, with other ongoing housing subsidy */
  RentalByClientWithOtherOngoingHousingSubsidy = 'RENTAL_BY_CLIENT_WITH_OTHER_ONGOING_HOUSING_SUBSIDY',
  /** (31) Rental by client, with RRH or equivalent subsidy */
  RentalByClientWithRrhOrEquivalentSubsidy = 'RENTAL_BY_CLIENT_WITH_RRH_OR_EQUIVALENT_SUBSIDY',
  /** (19) Rental by client, with VASH housing subsidy */
  RentalByClientWithVashHousingSubsidy = 'RENTAL_BY_CLIENT_WITH_VASH_HOUSING_SUBSIDY',
  /** (29) Residential project or halfway house with no homeless criteria */
  ResidentialProjectOrHalfwayHouseWithNoHomelessCriteria = 'RESIDENTIAL_PROJECT_OR_HALFWAY_HOUSE_WITH_NO_HOMELESS_CRITERIA',
  /** (18) Safe Haven */
  SafeHaven = 'SAFE_HAVEN',
  /** (35) Staying or living in a family member's room, apartment or house */
  StayingOrLivingInAFamilyMemberSRoomApartmentOrHouse = 'STAYING_OR_LIVING_IN_A_FAMILY_MEMBER_S_ROOM_APARTMENT_OR_HOUSE',
  /** (36) Staying or living in a friend's room, apartment or house */
  StayingOrLivingInAFriendSRoomApartmentOrHouse = 'STAYING_OR_LIVING_IN_A_FRIEND_S_ROOM_APARTMENT_OR_HOUSE',
  /** (22) Staying or living with family, permanent tenure */
  StayingOrLivingWithFamilyPermanentTenure = 'STAYING_OR_LIVING_WITH_FAMILY_PERMANENT_TENURE',
  /** (12) Staying or living with family, temporary tenure (e.g. room, apartment or house) */
  StayingOrLivingWithFamilyTemporaryTenureEGRoomApartmentOrHouse = 'STAYING_OR_LIVING_WITH_FAMILY_TEMPORARY_TENURE_E_G_ROOM_APARTMENT_OR_HOUSE',
  /** (23) Staying or living with friends, permanent tenure */
  StayingOrLivingWithFriendsPermanentTenure = 'STAYING_OR_LIVING_WITH_FRIENDS_PERMANENT_TENURE',
  /** (13) Staying or living with friends, temporary tenure (e.g. room apartment or house) */
  StayingOrLivingWithFriendsTemporaryTenureEGRoomApartmentOrHouse = 'STAYING_OR_LIVING_WITH_FRIENDS_TEMPORARY_TENURE_E_G_ROOM_APARTMENT_OR_HOUSE',
  /** (5) Substance abuse treatment facility or detox center */
  SubstanceAbuseTreatmentFacilityOrDetoxCenter = 'SUBSTANCE_ABUSE_TREATMENT_FACILITY_OR_DETOX_CENTER',
  /** (2) Transitional housing for homeless persons (including homeless youth) */
  TransitionalHousingForHomelessPersonsIncludingHomelessYouth = 'TRANSITIONAL_HOUSING_FOR_HOMELESS_PERSONS_INCLUDING_HOMELESS_YOUTH',
  /** (37) Worker unable to determine */
  WorkerUnableToDetermine = 'WORKER_UNABLE_TO_DETERMINE',
}

/** 3.917.5 */
export enum MonthsHomelessPastThreeYears {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (113) More than 12 months */
  MoreThan_12Months = 'MORE_THAN_12_MONTHS',
  /** (101) 1 */
  Num_1 = 'NUM_1',
  /** (102) 2 */
  Num_2 = 'NUM_2',
  /** (103) 3 */
  Num_3 = 'NUM_3',
  /** (104) 4 */
  Num_4 = 'NUM_4',
  /** (105) 5 */
  Num_5 = 'NUM_5',
  /** (106) 6 */
  Num_6 = 'NUM_6',
  /** (107) 7 */
  Num_7 = 'NUM_7',
  /** (108) 8 */
  Num_8 = 'NUM_8',
  /** (109) 9 */
  Num_9 = 'NUM_9',
  /** (110) 10 */
  Num_10 = 'NUM_10',
  /** (111) 11 */
  Num_11 = 'NUM_11',
  /** (112) 12 */
  Num_12 = 'NUM_12',
}

export type Mutation = {
  __typename?: 'Mutation';
  addHouseholdMembersToEnrollment?: Maybe<AddHouseholdMembersToEnrollmentPayload>;
  createClient?: Maybe<CreateClientPayload>;
  createEnrollment?: Maybe<CreateEnrollmentPayload>;
  createFunder?: Maybe<CreateFunderPayload>;
  createInventory?: Maybe<CreateInventoryPayload>;
  createOrganization?: Maybe<CreateOrganizationPayload>;
  createProject?: Maybe<CreateProjectPayload>;
  createProjectCoc?: Maybe<CreateProjectCocPayload>;
  createService?: Maybe<CreateServicePayload>;
  deleteEnrollment?: Maybe<DeleteEnrollmentPayload>;
  deleteFunder?: Maybe<DeleteFunderPayload>;
  deleteInventory?: Maybe<DeleteInventoryPayload>;
  deleteOrganization?: Maybe<DeleteOrganizationPayload>;
  deleteProject?: Maybe<DeleteProjectPayload>;
  deleteProjectCoc?: Maybe<DeleteProjectCocPayload>;
  deleteService?: Maybe<DeleteServicePayload>;
  /** Create/Save assessment as work-in-progress */
  saveAssessment?: Maybe<SaveAssessmentPayload>;
  setHoHForEnrollment?: Maybe<SetHoHForEnrollmentPayload>;
  /** Create/Submit assessment, and create/update related HUD records */
  submitAssessment?: Maybe<SubmitAssessmentPayload>;
  updateClient?: Maybe<UpdateClientPayload>;
  updateEnrollment?: Maybe<UpdateEnrollmentPayload>;
  updateFunder?: Maybe<UpdateFunderPayload>;
  updateInventory?: Maybe<UpdateInventoryPayload>;
  updateOrganization?: Maybe<UpdateOrganizationPayload>;
  updateProject?: Maybe<UpdateProjectPayload>;
  updateProjectCoc?: Maybe<UpdateProjectCocPayload>;
  updateService?: Maybe<UpdateServicePayload>;
};

export type MutationAddHouseholdMembersToEnrollmentArgs = {
  input: AddHouseholdMembersToEnrollmentInput;
};

export type MutationCreateClientArgs = {
  input: CreateClientInput;
};

export type MutationCreateEnrollmentArgs = {
  input: CreateEnrollmentInput;
};

export type MutationCreateFunderArgs = {
  input: CreateFunderInput;
};

export type MutationCreateInventoryArgs = {
  input: CreateInventoryInput;
};

export type MutationCreateOrganizationArgs = {
  input: CreateOrganizationInput;
};

export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};

export type MutationCreateProjectCocArgs = {
  input: CreateProjectCocInput;
};

export type MutationCreateServiceArgs = {
  input: CreateServiceInput;
};

export type MutationDeleteEnrollmentArgs = {
  input: DeleteEnrollmentInput;
};

export type MutationDeleteFunderArgs = {
  input: DeleteFunderInput;
};

export type MutationDeleteInventoryArgs = {
  input: DeleteInventoryInput;
};

export type MutationDeleteOrganizationArgs = {
  input: DeleteOrganizationInput;
};

export type MutationDeleteProjectArgs = {
  input: DeleteProjectInput;
};

export type MutationDeleteProjectCocArgs = {
  input: DeleteProjectCocInput;
};

export type MutationDeleteServiceArgs = {
  input: DeleteServiceInput;
};

export type MutationSaveAssessmentArgs = {
  input: SaveAssessmentInput;
};

export type MutationSetHoHForEnrollmentArgs = {
  input: SetHoHForEnrollmentInput;
};

export type MutationSubmitAssessmentArgs = {
  input: SubmitAssessmentInput;
};

export type MutationUpdateClientArgs = {
  input: UpdateClientInput;
};

export type MutationUpdateEnrollmentArgs = {
  input: UpdateEnrollmentInput;
};

export type MutationUpdateFunderArgs = {
  input: UpdateFunderInput;
};

export type MutationUpdateInventoryArgs = {
  input: UpdateInventoryInput;
};

export type MutationUpdateOrganizationArgs = {
  input: UpdateOrganizationInput;
};

export type MutationUpdateProjectArgs = {
  input: UpdateProjectInput;
};

export type MutationUpdateProjectCocArgs = {
  input: UpdateProjectCocInput;
};

export type MutationUpdateServiceArgs = {
  input: UpdateServiceInput;
};

/** 3.01.5 */
export enum NameDataQuality {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Full name reported */
  FullNameReported = 'FULL_NAME_REPORTED',
  /** (2) Partial, street name, or code name reported */
  PartialStreetNameOrCodeNameReported = 'PARTIAL_STREET_NAME_OR_CODE_NAME_REPORTED',
}

/** W3 */
export enum NoAssistanceReason {
  /** (2) Applied; client not eligible */
  AppliedClientNotEligible = 'APPLIED_CLIENT_NOT_ELIGIBLE',
  /** (1) Applied; decision pending */
  AppliedDecisionPending = 'APPLIED_DECISION_PENDING',
  /** (3) Client did not apply */
  ClientDidNotApply = 'CLIENT_DID_NOT_APPLY',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Insurance type not applicable for this client */
  InsuranceTypeNotApplicableForThisClient = 'INSURANCE_TYPE_NOT_APPLICABLE_FOR_THIS_CLIENT',
}

/** 1.8 */
export enum NoYesReasonsForMissingData {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (0) No */
  No = 'NO',
  /** (1) Yes */
  Yes = 'YES',
}

/** HUD Organization */
export type Organization = {
  __typename?: 'Organization';
  contactInformation?: Maybe<Scalars['String']>;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  organizationName: Scalars['String'];
  projects: ProjectsPaginated;
  victimServiceProvider?: Maybe<Scalars['Boolean']>;
};

/** HUD Organization */
export type OrganizationProjectsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HMIS Organization input */
export type OrganizationInput = {
  contactInformation?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  victimServiceProvider?: InputMaybe<Scalars['Boolean']>;
};

/** HUD Organization Sorting Options */
export enum OrganizationSortOption {
  Name = 'NAME',
}

export type OrganizationsPaginated = {
  __typename?: 'OrganizationsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Organization>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** P2.A */
export enum PathReferralOutcome {
  /** (1) Attained */
  Attained = 'ATTAINED',
  /** (2) Not attained */
  NotAttained = 'NOT_ATTAINED',
  /** (3) Unknown */
  Unknown = 'UNKNOWN',
}

export type PickListOption = {
  __typename?: 'PickListOption';
  /** Code for the option */
  code: Scalars['String'];
  /** Code for group that option belongs to, if grouped */
  groupCode?: Maybe<Scalars['String']>;
  /** Label for group that option belongs to, if grouped */
  groupLabel?: Maybe<Scalars['String']>;
  /** Whether option is selected by default */
  initialSelected?: Maybe<Scalars['Boolean']>;
  /** Label for the option */
  label?: Maybe<Scalars['String']>;
  /** Secondary label, such as project type or CoC code */
  secondaryLabel?: Maybe<Scalars['String']>;
};

export enum PickListType {
  Coc = 'COC',
  CurrentLivingSituation = 'CURRENT_LIVING_SITUATION',
  Geocode = 'GEOCODE',
  Organization = 'ORGANIZATION',
  PriorLivingSituation = 'PRIOR_LIVING_SITUATION',
  Project = 'PROJECT',
  State = 'STATE',
}

/** 4.19.7 */
export enum PrioritizationStatus {
  /** (2) Not placed on prioritization list */
  NotPlacedOnPrioritizationList = 'NOT_PLACED_ON_PRIORITIZATION_LIST',
  /** (1) Placed on prioritization list */
  PlacedOnPrioritizationList = 'PLACED_ON_PRIORITIZATION_LIST',
}

export type Project = {
  __typename?: 'Project';
  HMISParticipatingProject?: Maybe<Scalars['Boolean']>;
  HOPWAMedAssistedLivingFac?: Maybe<HopwaMedAssistedLivingFac>;
  active: Scalars['Boolean'];
  contactInformation?: Maybe<Scalars['String']>;
  continuumProject?: Maybe<Scalars['Boolean']>;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  funders: FundersPaginated;
  housingType?: Maybe<HousingType>;
  id: Scalars['ID'];
  inventories: InventoriesPaginated;
  operatingEndDate?: Maybe<Scalars['ISO8601Date']>;
  operatingStartDate: Scalars['ISO8601Date'];
  organization: Organization;
  projectCocs: ProjectCocsPaginated;
  projectName: Scalars['String'];
  projectType?: Maybe<ProjectType>;
  residentialAffiliation?: Maybe<Scalars['Boolean']>;
  targetPopulation?: Maybe<TargetPopulation>;
  trackingMethod?: Maybe<TrackingMethod>;
};

export type ProjectFundersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<FunderSortOption>;
};

export type ProjectInventoriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<InventorySortOption>;
};

export type ProjectProjectCocsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
};

export type ProjectCoc = {
  __typename?: 'ProjectCoc';
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  cocCode: Scalars['String'];
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  geocode: Scalars['String'];
  geographyType?: Maybe<GeographyType>;
  id: Scalars['ID'];
  project: Project;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type ProjectCocInput = {
  address1?: InputMaybe<Scalars['String']>;
  address2?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  cocCode?: InputMaybe<Scalars['String']>;
  geocode?: InputMaybe<Scalars['String']>;
  geographyType?: InputMaybe<GeographyType>;
  projectId?: InputMaybe<Scalars['ID']>;
  state?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

export type ProjectCocsPaginated = {
  __typename?: 'ProjectCocsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<ProjectCoc>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type ProjectInput = {
  HMISParticipatingProject?: InputMaybe<Scalars['Boolean']>;
  HOPWAMedAssistedLivingFac?: InputMaybe<HopwaMedAssistedLivingFac>;
  contactInformation?: InputMaybe<Scalars['String']>;
  continuumProject?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Scalars['String']>;
  housingType?: InputMaybe<HousingType>;
  /** Date with format yyyy-mm-dd */
  operatingEndDate?: InputMaybe<Scalars['String']>;
  /** Date with format yyyy-mm-dd */
  operatingStartDate?: InputMaybe<Scalars['String']>;
  organizationId?: InputMaybe<Scalars['ID']>;
  projectName?: InputMaybe<Scalars['String']>;
  projectType?: InputMaybe<ProjectType>;
  residentialAffiliation?: InputMaybe<Scalars['Boolean']>;
  targetPopulation?: InputMaybe<TargetPopulation>;
  trackingMethod?: InputMaybe<TrackingMethod>;
};

/** HUD Project Sorting Options */
export enum ProjectSortOption {
  Name = 'NAME',
  OrganizationAndName = 'ORGANIZATION_AND_NAME',
}

/** HUD Project Types */
export enum ProjectType {
  /** Coordinated Entry */
  Ce = 'CE',
  /** Day Shelter */
  DayShelter = 'DAY_SHELTER',
  /** Emergency Shelter */
  Es = 'ES',
  /** Permanent Housing Only */
  Oph = 'OPH',
  /** Other */
  Other = 'OTHER',
  /** Permanent Housing */
  Ph = 'PH',
  /** Homelessness Prevention */
  Prevention = 'PREVENTION',
  /** Permanent Supportive Housing */
  Psh = 'PSH',
  /** Rapid Re-Housing */
  Rrh = 'RRH',
  /** Services Only */
  ServicesOnly = 'SERVICES_ONLY',
  /** Safe Haven */
  Sh = 'SH',
  /** Street Outreach */
  So = 'SO',
  /** Transitional Housing */
  Th = 'TH',
}

export type ProjectsPaginated = {
  __typename?: 'ProjectsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Project>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  /** Assessment lookup */
  assessment?: Maybe<Assessment>;
  /** Client lookup */
  client?: Maybe<Client>;
  /** Search for clients */
  clientSearch: ClientsPaginated;
  /** Enrollment lookup */
  enrollment?: Maybe<Enrollment>;
  /** Form definition lookup by identifier */
  formDefinition?: Maybe<FormDefinition>;
  /** Funder lookup */
  funder?: Maybe<Funder>;
  /** Get form definition for enrollment & assessment role */
  getFormDefinition?: Maybe<FormDefinition>;
  /** Inventory lookup */
  inventory?: Maybe<Inventory>;
  /** Organization lookup */
  organization?: Maybe<Organization>;
  /** Get a list of organizations */
  organizations: OrganizationsPaginated;
  /** Get list of options for pick list */
  pickList: Array<PickListOption>;
  /** Project lookup */
  project?: Maybe<Project>;
  /** Project CoC lookup */
  projectCoc?: Maybe<ProjectCoc>;
  /** Get a list of projects */
  projects: ProjectsPaginated;
};

export type QueryAssessmentArgs = {
  id: Scalars['ID'];
};

export type QueryClientArgs = {
  id: Scalars['ID'];
};

export type QueryClientSearchArgs = {
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ClientSortOption>;
};

export type QueryEnrollmentArgs = {
  id: Scalars['ID'];
};

export type QueryFormDefinitionArgs = {
  identifier: Scalars['String'];
};

export type QueryFunderArgs = {
  id: Scalars['ID'];
};

export type QueryGetFormDefinitionArgs = {
  assessmentRole: AssessmentRole;
  enrollmentId: Scalars['ID'];
};

export type QueryInventoryArgs = {
  id: Scalars['ID'];
};

export type QueryOrganizationArgs = {
  id: Scalars['ID'];
};

export type QueryOrganizationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<OrganizationSortOption>;
};

export type QueryPickListArgs = {
  pickListType: PickListType;
  projectId?: InputMaybe<Scalars['ID']>;
};

export type QueryProjectArgs = {
  id: Scalars['ID'];
};

export type QueryProjectCocArgs = {
  id: Scalars['ID'];
};

export type QueryProjectsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HUD Race (1.7) */
export enum Race {
  /** (AmIndAKNative) American Indian, Alaska Native, or Indigenous */
  RaceAmIndAkNative = 'RACE_AM_IND_AK_NATIVE',
  /** (Asian) Asian or Asian American */
  RaceAsian = 'RACE_ASIAN',
  /** (BlackAfAmerican) Black, African American, or African */
  RaceBlackAfAmerican = 'RACE_BLACK_AF_AMERICAN',
  /** (NativeHIPacific) Native Hawaiian or Pacific Islander */
  RaceNativeHiPacific = 'RACE_NATIVE_HI_PACIFIC',
  /** (99) Data not collected */
  RaceNotCollected = 'RACE_NOT_COLLECTED',
  /** (9) Client refused */
  RaceRefused = 'RACE_REFUSED',
  /** (8) Client doesn't know */
  RaceUnknown = 'RACE_UNKNOWN',
  /** (White) White */
  RaceWhite = 'RACE_WHITE',
}

/** 4.04.A */
export enum ReasonNotInsured {
  /** (2) Applied; client not eligible */
  AppliedClientNotEligible = 'APPLIED_CLIENT_NOT_ELIGIBLE',
  /** (1) Applied; decision pending */
  AppliedDecisionPending = 'APPLIED_DECISION_PENDING',
  /** (3) Client did not apply */
  ClientDidNotApply = 'CLIENT_DID_NOT_APPLY',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Insurance type N/A for this client */
  InsuranceTypeNAForThisClient = 'INSURANCE_TYPE_N_A_FOR_THIS_CLIENT',
}

/** 1.4 */
export enum RecordType {
  /** (200) Bed night */
  BedNight = 'BED_NIGHT',
  /** (300) C2 Moving On Assistance Provided */
  C2MovingOnAssistanceProvided = 'C2_MOVING_ON_ASSISTANCE_PROVIDED',
  /** (12) Contact 12 */
  Contact_12 = 'CONTACT_12',
  /** (13) Contact 13 */
  Contact_13 = 'CONTACT_13',
  /** (151) HOPWA financial assistance */
  HopwaFinancialAssistance = 'HOPWA_FINANCIAL_ASSISTANCE',
  /** (143) HOPWA service */
  HopwaService = 'HOPWA_SERVICE',
  /** (210) HUD-VASH OTH voucher tracking */
  HudVashOthVoucherTracking = 'HUD_VASH_OTH_VOUCHER_TRACKING',
  /** (161) PATH referral */
  PathReferral = 'PATH_REFERRAL',
  /** (141) PATH service */
  PathService = 'PATH_SERVICE',
  /** (162) RHY referral */
  RhyReferral = 'RHY_REFERRAL',
  /** (142) RHY service connections */
  RhyServiceConnections = 'RHY_SERVICE_CONNECTIONS',
  /** (152) SSVF financial assistance */
  SsvfFinancialAssistance = 'SSVF_FINANCIAL_ASSISTANCE',
  /** (144) SSVF service */
  SsvfService = 'SSVF_SERVICE',
}

/** 4.20.D */
export enum ReferralResult {
  /** (1) Successful referral: client accepted */
  SuccessfulReferralClientAccepted = 'SUCCESSFUL_REFERRAL_CLIENT_ACCEPTED',
  /** (2) Unsuccessful referral: client rejected */
  UnsuccessfulReferralClientRejected = 'UNSUCCESSFUL_REFERRAL_CLIENT_REJECTED',
  /** (3) Unsuccessful referral: provider rejected */
  UnsuccessfulReferralProviderRejected = 'UNSUCCESSFUL_REFERRAL_PROVIDER_REJECTED',
}

/** Related record type for a group of questions in an assessment */
export enum RelatedRecordType {
  /** CurrentLivingSituation */
  CurrentLivingSituation = 'CURRENT_LIVING_SITUATION',
  /** DisabilityGroup */
  DisabilityGroup = 'DISABILITY_GROUP',
  /** ExmploymentEducation */
  EmploymentEducation = 'EMPLOYMENT_EDUCATION',
  /** Enrollment */
  Enrollment = 'ENROLLMENT',
  /** Exit */
  Exit = 'EXIT',
  /** HealthAndDv */
  HealthAndDv = 'HEALTH_AND_DV',
  /** IncomeBenefit */
  IncomeBenefit = 'INCOME_BENEFIT',
  /** YouthEducationStatus */
  YouthEducationStatus = 'YOUTH_EDUCATION_STATUS',
}

/** 3.15.1 */
export enum RelationshipToHoH {
  /** (2) Child */
  Child = 'CHILD',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Other relative */
  OtherRelative = 'OTHER_RELATIVE',
  /** (1) Self (head of household) */
  SelfHeadOfHousehold = 'SELF_HEAD_OF_HOUSEHOLD',
  /** (3) Spouse or partner */
  SpouseOrPartner = 'SPOUSE_OR_PARTNER',
  /** (5) Unrelated household member */
  UnrelatedHouseholdMember = 'UNRELATED_HOUSEHOLD_MEMBER',
}

/** 3.917.2 */
export enum ResidencePriorLengthOfStay {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) 90 days or more but less than one year */
  Num_90DaysOrMoreButLessThanOneYear = 'NUM_90_DAYS_OR_MORE_BUT_LESS_THAN_ONE_YEAR',
  /** (3) One month or more, but less than 90 days */
  OneMonthOrMoreButLessThan_90Days = 'ONE_MONTH_OR_MORE_BUT_LESS_THAN_90_DAYS',
  /** (10) One night or less */
  OneNightOrLess = 'ONE_NIGHT_OR_LESS',
  /** (2) One week or more, but less than one month */
  OneWeekOrMoreButLessThanOneMonth = 'ONE_WEEK_OR_MORE_BUT_LESS_THAN_ONE_MONTH',
  /** (5) One year or longer */
  OneYearOrLonger = 'ONE_YEAR_OR_LONGER',
  /** (11) Two to six nights */
  TwoToSixNights = 'TWO_TO_SIX_NIGHTS',
}

/** 3.02.2 */
export enum SsnDataQuality {
  /** (2) Approximate or partial SSN reported */
  ApproximateOrPartialSsnReported = 'APPROXIMATE_OR_PARTIAL_SSN_REPORTED',
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (1) Full SSN reported */
  FullSsnReported = 'FULL_SSN_REPORTED',
}

/** Autogenerated input type of SaveAssessment */
export type SaveAssessmentInput = {
  /** Date with format yyyy-mm-dd */
  assessmentDate?: InputMaybe<Scalars['String']>;
  /** Required if updating an existing assessment */
  assessmentId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Required if saving a new assessment */
  enrollmentId?: InputMaybe<Scalars['ID']>;
  /** Required if saving a new assessment */
  formDefinitionId?: InputMaybe<Scalars['ID']>;
  /** Form state as JSON */
  values: Scalars['JsonObject'];
};

/** Autogenerated return type of SaveAssessment */
export type SaveAssessmentPayload = {
  __typename?: 'SaveAssessmentPayload';
  assessment?: Maybe<Assessment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

export type Service = {
  __typename?: 'Service';
  FAAmount?: Maybe<Scalars['Float']>;
  client: Client;
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateProvided: Scalars['ISO8601Date'];
  dateUpdated: Scalars['ISO8601DateTime'];
  enrollment: Enrollment;
  id: Scalars['ID'];
  movingOnOtherType?: Maybe<Scalars['String']>;
  otherTypeProvided?: Maybe<Scalars['String']>;
  recordType: RecordType;
  referralOutcome?: Maybe<PathReferralOutcome>;
  subTypeProvided?: Maybe<ServiceSubTypeProvided>;
  typeProvided: ServiceTypeProvided;
  user?: Maybe<User>;
};

/** HUD Service Input */
export type ServiceInput = {
  FAAmount?: InputMaybe<Scalars['Float']>;
  /** Date with format yyyy-mm-dd */
  dateProvided?: InputMaybe<Scalars['String']>;
  enrollmentId?: InputMaybe<Scalars['ID']>;
  movingOnOtherType?: InputMaybe<Scalars['String']>;
  otherTypeProvided?: InputMaybe<Scalars['String']>;
  recordType?: InputMaybe<RecordType>;
  referralOutcome?: InputMaybe<PathReferralOutcome>;
  subTypeProvided?: InputMaybe<ServiceSubTypeProvided>;
  typeProvided?: InputMaybe<ServiceTypeProvided>;
};

/** HUD Service Sorting Options */
export enum ServiceSortOption {
  DateProvided = 'DATE_PROVIDED',
}

/** HUD Service TypeProvided:SubTypeProvided aggregate (V2.A, V2.B, V2.C) */
export enum ServiceSubTypeProvided {
  /** (12) Child care */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsChildCare = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__CHILD_CARE',
  /** (2) Daily living services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsDailyLivingServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__DAILY_LIVING_SERVICES',
  /** (6) Fiduciary and representative payee services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsFiduciaryAndRepresentativePayeeServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__FIDUCIARY_AND_REPRESENTATIVE_PAYEE_SERVICES',
  /** (1) Health care services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsHealthCareServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__HEALTH_CARE_SERVICES',
  /** (13) Housing counseling */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsHousingCounseling = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__HOUSING_COUNSELING',
  /** (5) Income support services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsIncomeSupportServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__INCOME_SUPPORT_SERVICES',
  /** (7) Legal services - child support */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesChildSupport = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_CHILD_SUPPORT',
  /** (8) Legal services - eviction prevention */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesEvictionPrevention = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_EVICTION_PREVENTION',
  /** (11) Legal services - other */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesOther = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OTHER',
  /** (9) Legal services - outstanding fines and penalties */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesOutstandingFinesAndPenalties = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OUTSTANDING_FINES_AND_PENALTIES',
  /** (10) Legal services - restore / acquire driver's license */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsLegalServicesRestoreAcquireDriverSLicense = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_RESTORE_ACQUIRE_DRIVER_S_LICENSE',
  /** (3) Personal financial planning services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsPersonalFinancialPlanningServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__PERSONAL_FINANCIAL_PLANNING_SERVICES',
  /** (4) Transportation services */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefitsTransportationServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS__TRANSPORTATION_SERVICES',
  /** (3) Educational assistance */
  SsvfServiceAssistanceObtainingVaBenefitsEducationalAssistance = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__EDUCATIONAL_ASSISTANCE',
  /** (2) Employment and training services */
  SsvfServiceAssistanceObtainingVaBenefitsEmploymentAndTrainingServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (4) Health care services */
  SsvfServiceAssistanceObtainingVaBenefitsHealthCareServices = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__HEALTH_CARE_SERVICES',
  /** (1) VA vocational and rehabilitation counseling */
  SsvfServiceAssistanceObtainingVaBenefitsVaVocationalAndRehabilitationCounseling = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS__VA_VOCATIONAL_AND_REHABILITATION_COUNSELING',
  /** (10) Child care */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsChildCare = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__CHILD_CARE',
  /** (4) Fiduciary and representative payee services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsFiduciaryAndRepresentativePayeeServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__FIDUCIARY_AND_REPRESENTATIVE_PAYEE_SERVICES',
  /** (11) Housing counseling */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsHousingCounseling = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__HOUSING_COUNSELING',
  /** (3) Income support services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsIncomeSupportServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__INCOME_SUPPORT_SERVICES',
  /** (5) Legal services - child support */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesChildSupport = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_CHILD_SUPPORT',
  /** (6) Legal services - eviction prevention */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesEvictionPrevention = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_EVICTION_PREVENTION',
  /** (9) Legal services - other */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesOther = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OTHER',
  /** (7) Legal services - outstanding fines and penalties */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesOutstandingFinesAndPenalties = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_OUTSTANDING_FINES_AND_PENALTIES',
  /** (8) Legal services - restore / acquire driver's license */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsLegalServicesRestoreAcquireDriverSLicense = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__LEGAL_SERVICES_RESTORE_ACQUIRE_DRIVER_S_LICENSE',
  /** (1) Personal financial planning services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsPersonalFinancialPlanningServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__PERSONAL_FINANCIAL_PLANNING_SERVICES',
  /** (2) Transportation services */
  SsvfServiceDirectProvisionOfOtherPublicBenefitsTransportationServices = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS__TRANSPORTATION_SERVICES',
}

/** HUD Service RecordType:TypeProvided aggregate (P1.2, R14.2, W1.2, V2.2, W2.3, V3.3, P2.2, 4.14, V8.1, C2.2) */
export enum ServiceTypeProvided {
  /** (200) BedNight */
  BedNightBedNight = 'BED_NIGHT__BED_NIGHT',
  /** (2) Financial assistance for Moving On (e.g., security deposit, moving expenses) */
  C2MovingOnAssistanceProvidedFinancialAssistanceForMovingOnEGSecurityDepositMovingExpenses = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__FINANCIAL_ASSISTANCE_FOR_MOVING_ON_E_G_SECURITY_DEPOSIT_MOVING_EXPENSES',
  /** (4) Housing referral/placement */
  C2MovingOnAssistanceProvidedHousingReferralPlacement = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__HOUSING_REFERRAL_PLACEMENT',
  /** (3) Non-financial assistance for Moving On (e.g., housing navigation, transition support) */
  C2MovingOnAssistanceProvidedNonFinancialAssistanceForMovingOnEGHousingNavigationTransitionSupport = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__NON_FINANCIAL_ASSISTANCE_FOR_MOVING_ON_E_G_HOUSING_NAVIGATION_TRANSITION_SUPPORT',
  /** (5) Other (please specify) */
  C2MovingOnAssistanceProvidedOtherPleaseSpecify = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__OTHER_PLEASE_SPECIFY',
  /** (1) Subsidized housing application assistance */
  C2MovingOnAssistanceProvidedSubsidizedHousingApplicationAssistance = 'C2_MOVING_ON_ASSISTANCE_PROVIDED__SUBSIDIZED_HOUSING_APPLICATION_ASSISTANCE',
  /** (7) Mortgage assistance */
  HopwaFinancialAssistanceMortgageAssistance = 'HOPWA_FINANCIAL_ASSISTANCE__MORTGAGE_ASSISTANCE',
  /** (1) Rental assistance */
  HopwaFinancialAssistanceRentalAssistance = 'HOPWA_FINANCIAL_ASSISTANCE__RENTAL_ASSISTANCE',
  /** (2) Security deposits */
  HopwaFinancialAssistanceSecurityDeposits = 'HOPWA_FINANCIAL_ASSISTANCE__SECURITY_DEPOSITS',
  /** (3) Utility deposits */
  HopwaFinancialAssistanceUtilityDeposits = 'HOPWA_FINANCIAL_ASSISTANCE__UTILITY_DEPOSITS',
  /** (4) Utility payments */
  HopwaFinancialAssistanceUtilityPayments = 'HOPWA_FINANCIAL_ASSISTANCE__UTILITY_PAYMENTS',
  /** (1) Adult day care and personal assistance */
  HopwaServiceAdultDayCareAndPersonalAssistance = 'HOPWA_SERVICE__ADULT_DAY_CARE_AND_PERSONAL_ASSISTANCE',
  /** (2) Case management */
  HopwaServiceCaseManagement = 'HOPWA_SERVICE__CASE_MANAGEMENT',
  /** (3) Child care */
  HopwaServiceChildCare = 'HOPWA_SERVICE__CHILD_CARE',
  /** (4) Criminal justice/legal services */
  HopwaServiceCriminalJusticeLegalServices = 'HOPWA_SERVICE__CRIMINAL_JUSTICE_LEGAL_SERVICES',
  /** (5) Education */
  HopwaServiceEducation = 'HOPWA_SERVICE__EDUCATION',
  /** (6) Employment and training services */
  HopwaServiceEmploymentAndTrainingServices = 'HOPWA_SERVICE__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (7) Food/meals/nutritional services */
  HopwaServiceFoodMealsNutritionalServices = 'HOPWA_SERVICE__FOOD_MEALS_NUTRITIONAL_SERVICES',
  /** (8) Health/medical care */
  HopwaServiceHealthMedicalCare = 'HOPWA_SERVICE__HEALTH_MEDICAL_CARE',
  /** (9) Life skills training */
  HopwaServiceLifeSkillsTraining = 'HOPWA_SERVICE__LIFE_SKILLS_TRAINING',
  /** (10) Mental health care/counseling */
  HopwaServiceMentalHealthCareCounseling = 'HOPWA_SERVICE__MENTAL_HEALTH_CARE_COUNSELING',
  /** (14) Other HOPWA funded service */
  HopwaServiceOtherHopwaFundedService = 'HOPWA_SERVICE__OTHER_HOPWA_FUNDED_SERVICE',
  /** (11) Outreach and/or engagement */
  HopwaServiceOutreachAndOrEngagement = 'HOPWA_SERVICE__OUTREACH_AND_OR_ENGAGEMENT',
  /** (12) Substance abuse services/treatment */
  HopwaServiceSubstanceAbuseServicesTreatment = 'HOPWA_SERVICE__SUBSTANCE_ABUSE_SERVICES_TREATMENT',
  /** (13) Transportation */
  HopwaServiceTransportation = 'HOPWA_SERVICE__TRANSPORTATION',
  /** (12) Other */
  HudVashOthVoucherTrackingOther = 'HUD_VASH_OTH_VOUCHER_TRACKING__OTHER',
  /** (1) Referral package forwarded to PHA */
  HudVashOthVoucherTrackingReferralPackageForwardedToPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__REFERRAL_PACKAGE_FORWARDED_TO_PHA',
  /** (10) Veteran exited - family maintained the voucher */
  HudVashOthVoucherTrackingVeteranExitedFamilyMaintainedTheVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_FAMILY_MAINTAINED_THE_VOUCHER',
  /** (11) Veteran exited - prior to ever receiving a voucher */
  HudVashOthVoucherTrackingVeteranExitedPriorToEverReceivingAVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_PRIOR_TO_EVER_RECEIVING_A_VOUCHER',
  /** (9) Veteran exited - voucher was returned */
  HudVashOthVoucherTrackingVeteranExitedVoucherWasReturned = 'HUD_VASH_OTH_VOUCHER_TRACKING__VETERAN_EXITED_VOUCHER_WAS_RETURNED',
  /** (2) Voucher denied by PHA */
  HudVashOthVoucherTrackingVoucherDeniedByPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_DENIED_BY_PHA',
  /** (5) Voucher in use - veteran moved into housing */
  HudVashOthVoucherTrackingVoucherInUseVeteranMovedIntoHousing = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_IN_USE_VETERAN_MOVED_INTO_HOUSING',
  /** (3) Voucher issued by PHA */
  HudVashOthVoucherTrackingVoucherIssuedByPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_ISSUED_BY_PHA',
  /** (4) Voucher revoked or expired */
  HudVashOthVoucherTrackingVoucherRevokedOrExpired = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_REVOKED_OR_EXPIRED',
  /** (7) Voucher was administratively absorbed by new PHA */
  HudVashOthVoucherTrackingVoucherWasAdministrativelyAbsorbedByNewPha = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_ADMINISTRATIVELY_ABSORBED_BY_NEW_PHA',
  /** (8) Voucher was converted to Housing Choice Voucher */
  HudVashOthVoucherTrackingVoucherWasConvertedToHousingChoiceVoucher = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_CONVERTED_TO_HOUSING_CHOICE_VOUCHER',
  /** (6) Voucher was ported locally */
  HudVashOthVoucherTrackingVoucherWasPortedLocally = 'HUD_VASH_OTH_VOUCHER_TRACKING__VOUCHER_WAS_PORTED_LOCALLY',
  /** (1) Community mental health */
  PathReferralCommunityMentalHealth = 'PATH_REFERRAL__COMMUNITY_MENTAL_HEALTH',
  /** (5) Educational services */
  PathReferralEducationalServices = 'PATH_REFERRAL__EDUCATIONAL_SERVICES',
  /** (9) Employment assistance */
  PathReferralEmploymentAssistance = 'PATH_REFERRAL__EMPLOYMENT_ASSISTANCE',
  /** (6) Housing services */
  PathReferralHousingServices = 'PATH_REFERRAL__HOUSING_SERVICES',
  /** (8) Income assistance */
  PathReferralIncomeAssistance = 'PATH_REFERRAL__INCOME_ASSISTANCE',
  /** (4) Job training */
  PathReferralJobTraining = 'PATH_REFERRAL__JOB_TRAINING',
  /** (10) Medical insurance */
  PathReferralMedicalInsurance = 'PATH_REFERRAL__MEDICAL_INSURANCE',
  /** (7) Permanent housing */
  PathReferralPermanentHousing = 'PATH_REFERRAL__PERMANENT_HOUSING',
  /** (3) Primary health/dental care */
  PathReferralPrimaryHealthDentalCare = 'PATH_REFERRAL__PRIMARY_HEALTH_DENTAL_CARE',
  /** (2) Substance use treatment */
  PathReferralSubstanceUseTreatment = 'PATH_REFERRAL__SUBSTANCE_USE_TREATMENT',
  /** (11) Temporary housing */
  PathReferralTemporaryHousing = 'PATH_REFERRAL__TEMPORARY_HOUSING',
  /** (6) Case management */
  PathServiceCaseManagement = 'PATH_SERVICE__CASE_MANAGEMENT',
  /** (14) Clinical assessment */
  PathServiceClinicalAssessment = 'PATH_SERVICE__CLINICAL_ASSESSMENT',
  /** (4) Community mental health */
  PathServiceCommunityMentalHealth = 'PATH_SERVICE__COMMUNITY_MENTAL_HEALTH',
  /** (3) Habilitation/rehabilitation */
  PathServiceHabilitationRehabilitation = 'PATH_SERVICE__HABILITATION_REHABILITATION',
  /** (10) Housing eligibility determination */
  PathServiceHousingEligibilityDetermination = 'PATH_SERVICE__HOUSING_ELIGIBILITY_DETERMINATION',
  /** (8) Housing minor renovation */
  PathServiceHousingMinorRenovation = 'PATH_SERVICE__HOUSING_MINOR_RENOVATION',
  /** (9) Housing moving assistance */
  PathServiceHousingMovingAssistance = 'PATH_SERVICE__HOUSING_MOVING_ASSISTANCE',
  /** (12) One-time rent for eviction prevention */
  PathServiceOneTimeRentForEvictionPrevention = 'PATH_SERVICE__ONE_TIME_RENT_FOR_EVICTION_PREVENTION',
  /** (7) Residential supportive services */
  PathServiceResidentialSupportiveServices = 'PATH_SERVICE__RESIDENTIAL_SUPPORTIVE_SERVICES',
  /** (1) Re-engagement */
  PathServiceReEngagement = 'PATH_SERVICE__RE_ENGAGEMENT',
  /** (2) Screening */
  PathServiceScreening = 'PATH_SERVICE__SCREENING',
  /** (11) Security deposits */
  PathServiceSecurityDeposits = 'PATH_SERVICE__SECURITY_DEPOSITS',
  /** (5) Substance use treatment */
  PathServiceSubstanceUseTreatment = 'PATH_SERVICE__SUBSTANCE_USE_TREATMENT',
  /** (2) Community service/service learning (CSL) */
  RhyServiceConnectionsCommunityServiceServiceLearningCsl = 'RHY_SERVICE_CONNECTIONS__COMMUNITY_SERVICE_SERVICE_LEARNING_CSL',
  /** (7) Criminal justice /legal services */
  RhyServiceConnectionsCriminalJusticeLegalServices = 'RHY_SERVICE_CONNECTIONS__CRIMINAL_JUSTICE_LEGAL_SERVICES',
  /** (5) Education */
  RhyServiceConnectionsEducation = 'RHY_SERVICE_CONNECTIONS__EDUCATION',
  /** (6) Employment and training services */
  RhyServiceConnectionsEmploymentAndTrainingServices = 'RHY_SERVICE_CONNECTIONS__EMPLOYMENT_AND_TRAINING_SERVICES',
  /** (14) Health/medical care */
  RhyServiceConnectionsHealthMedicalCare = 'RHY_SERVICE_CONNECTIONS__HEALTH_MEDICAL_CARE',
  /** (26) Home-based Services */
  RhyServiceConnectionsHomeBasedServices = 'RHY_SERVICE_CONNECTIONS__HOME_BASED_SERVICES',
  /** (8) Life skills training */
  RhyServiceConnectionsLifeSkillsTraining = 'RHY_SERVICE_CONNECTIONS__LIFE_SKILLS_TRAINING',
  /** (10) Parenting education for youth with children */
  RhyServiceConnectionsParentingEducationForYouthWithChildren = 'RHY_SERVICE_CONNECTIONS__PARENTING_EDUCATION_FOR_YOUTH_WITH_CHILDREN',
  /** (12) Post-natal care */
  RhyServiceConnectionsPostNatalCare = 'RHY_SERVICE_CONNECTIONS__POST_NATAL_CARE',
  /** (27) Post-natal newborn care (wellness exams; immunizations) */
  RhyServiceConnectionsPostNatalNewbornCareWellnessExamsImmunizations = 'RHY_SERVICE_CONNECTIONS__POST_NATAL_NEWBORN_CARE_WELLNESS_EXAMS_IMMUNIZATIONS',
  /** (13) Pre-natal care */
  RhyServiceConnectionsPreNatalCare = 'RHY_SERVICE_CONNECTIONS__PRE_NATAL_CARE',
  /** (28) STD Testing */
  RhyServiceConnectionsStdTesting = 'RHY_SERVICE_CONNECTIONS__STD_TESTING',
  /** (29) Street-based Services */
  RhyServiceConnectionsStreetBasedServices = 'RHY_SERVICE_CONNECTIONS__STREET_BASED_SERVICES',
  /** (18) Substance use disorder/Prevention Services */
  RhyServiceConnectionsSubstanceUseDisorderPreventionServices = 'RHY_SERVICE_CONNECTIONS__SUBSTANCE_USE_DISORDER_PREVENTION_SERVICES',
  /** (17) Substance use disorder treatment */
  RhyServiceConnectionsSubstanceUseDisorderTreatment = 'RHY_SERVICE_CONNECTIONS__SUBSTANCE_USE_DISORDER_TREATMENT',
  /** (10) Child care */
  SsvfFinancialAssistanceChildCare = 'SSVF_FINANCIAL_ASSISTANCE__CHILD_CARE',
  /** (14) Emergency housing assistance */
  SsvfFinancialAssistanceEmergencyHousingAssistance = 'SSVF_FINANCIAL_ASSISTANCE__EMERGENCY_HOUSING_ASSISTANCE',
  /** (15) Extended Shallow Subsidy - Rental Assistance */
  SsvfFinancialAssistanceExtendedShallowSubsidyRentalAssistance = 'SSVF_FINANCIAL_ASSISTANCE__EXTENDED_SHALLOW_SUBSIDY_RENTAL_ASSISTANCE',
  /** (16) Food Assistance */
  SsvfFinancialAssistanceFoodAssistance = 'SSVF_FINANCIAL_ASSISTANCE__FOOD_ASSISTANCE',
  /** (12) General housing stability assistance */
  SsvfFinancialAssistanceGeneralHousingStabilityAssistance = 'SSVF_FINANCIAL_ASSISTANCE__GENERAL_HOUSING_STABILITY_ASSISTANCE',
  /** (11) General housing stability assistance - emergency supplies */
  SsvfFinancialAssistanceGeneralHousingStabilityAssistanceEmergencySupplies = 'SSVF_FINANCIAL_ASSISTANCE__GENERAL_HOUSING_STABILITY_ASSISTANCE_EMERGENCY_SUPPLIES',
  /** (5) Moving costs */
  SsvfFinancialAssistanceMovingCosts = 'SSVF_FINANCIAL_ASSISTANCE__MOVING_COSTS',
  /** (1) Rental assistance */
  SsvfFinancialAssistanceRentalAssistance = 'SSVF_FINANCIAL_ASSISTANCE__RENTAL_ASSISTANCE',
  /** (2) Security deposit */
  SsvfFinancialAssistanceSecurityDeposit = 'SSVF_FINANCIAL_ASSISTANCE__SECURITY_DEPOSIT',
  /** (8) Transportation services: tokens/vouchers */
  SsvfFinancialAssistanceTransportationServicesTokensVouchers = 'SSVF_FINANCIAL_ASSISTANCE__TRANSPORTATION_SERVICES_TOKENS_VOUCHERS',
  /** (9) Transportation services: vehicle repair/maintenance */
  SsvfFinancialAssistanceTransportationServicesVehicleRepairMaintenance = 'SSVF_FINANCIAL_ASSISTANCE__TRANSPORTATION_SERVICES_VEHICLE_REPAIR_MAINTENANCE',
  /** (3) Utility deposit */
  SsvfFinancialAssistanceUtilityDeposit = 'SSVF_FINANCIAL_ASSISTANCE__UTILITY_DEPOSIT',
  /** (4) Utility fee payment assistance */
  SsvfFinancialAssistanceUtilityFeePaymentAssistance = 'SSVF_FINANCIAL_ASSISTANCE__UTILITY_FEE_PAYMENT_ASSISTANCE',
  /** (4) Assistance obtaining/coordinating other public benefits */
  SsvfServiceAssistanceObtainingCoordinatingOtherPublicBenefits = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_COORDINATING_OTHER_PUBLIC_BENEFITS',
  /** (3) Assistance obtaining VA benefits */
  SsvfServiceAssistanceObtainingVaBenefits = 'SSVF_SERVICE__ASSISTANCE_OBTAINING_VA_BENEFITS',
  /** (2) Case management services */
  SsvfServiceCaseManagementServices = 'SSVF_SERVICE__CASE_MANAGEMENT_SERVICES',
  /** (5) Direct provision of other public benefits */
  SsvfServiceDirectProvisionOfOtherPublicBenefits = 'SSVF_SERVICE__DIRECT_PROVISION_OF_OTHER_PUBLIC_BENEFITS',
  /** (6) Other (non-TFA) supportive service approved by VA */
  SsvfServiceOtherNonTfaSupportiveServiceApprovedByVa = 'SSVF_SERVICE__OTHER_NON_TFA_SUPPORTIVE_SERVICE_APPROVED_BY_VA',
  /** (1) Outreach services */
  SsvfServiceOutreachServices = 'SSVF_SERVICE__OUTREACH_SERVICES',
}

export type ServicesPaginated = {
  __typename?: 'ServicesPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Service>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of SetHoHForEnrollment */
export type SetHoHForEnrollmentInput = {
  clientId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  householdId: Scalars['ID'];
};

/** Autogenerated return type of SetHoHForEnrollment */
export type SetHoHForEnrollmentPayload = {
  __typename?: 'SetHoHForEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of SubmitAssessment */
export type SubmitAssessmentInput = {
  /** Date with format yyyy-mm-dd */
  assessmentDate?: InputMaybe<Scalars['String']>;
  /** Required if updating an existing assessment */
  assessmentId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Required if saving a new assessment */
  enrollmentId?: InputMaybe<Scalars['ID']>;
  /** Required if saving a new assessment */
  formDefinitionId?: InputMaybe<Scalars['ID']>;
  /** Transformed HUD values as JSON */
  hudValues?: InputMaybe<Scalars['JsonObject']>;
  /** Form state as JSON */
  values: Scalars['JsonObject'];
};

/** Autogenerated return type of SubmitAssessment */
export type SubmitAssessmentPayload = {
  __typename?: 'SubmitAssessmentPayload';
  assessment?: Maybe<Assessment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** 2.02.8 */
export enum TargetPopulation {
  /** (1) Domestic violence victims */
  DomesticViolenceVictims = 'DOMESTIC_VIOLENCE_VICTIMS',
  /** (4) Not applicable */
  NotApplicable = 'NOT_APPLICABLE',
  /** (3) Persons with HIV/AIDS */
  PersonsWithHivAids = 'PERSONS_WITH_HIV_AIDS',
}

/** 3.917.4 */
export enum TimesHomelessPastThreeYears {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) Four or more times */
  FourOrMoreTimes = 'FOUR_OR_MORE_TIMES',
  /** (1) One time */
  OneTime = 'ONE_TIME',
  /** (3) Three times */
  ThreeTimes = 'THREE_TIMES',
  /** (2) Two times */
  TwoTimes = 'TWO_TIMES',
}

/** 2.02.C */
export enum TrackingMethod {
  /** (0) Entry/Exit Date */
  EntryExitDate = 'ENTRY_EXIT_DATE',
  /** (3) Night-by-Night */
  NightByNight = 'NIGHT_BY_NIGHT',
}

/** Autogenerated input type of UpdateClient */
export type UpdateClientInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: ClientInput;
};

/** Autogenerated return type of UpdateClient */
export type UpdateClientPayload = {
  __typename?: 'UpdateClientPayload';
  client?: Maybe<Client>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of UpdateEnrollment */
export type UpdateEnrollmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Entry date with format yyyy-mm-dd */
  entryDate?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  relationshipToHoH?: InputMaybe<RelationshipToHoH>;
};

/** Autogenerated return type of UpdateEnrollment */
export type UpdateEnrollmentPayload = {
  __typename?: 'UpdateEnrollmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  enrollment?: Maybe<Enrollment>;
  errors: Array<ValidationError>;
};

/** Autogenerated input type of UpdateFunder */
export type UpdateFunderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: FunderInput;
};

/** Autogenerated return type of UpdateFunder */
export type UpdateFunderPayload = {
  __typename?: 'UpdateFunderPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  funder?: Maybe<Funder>;
};

/** Autogenerated input type of UpdateInventory */
export type UpdateInventoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: InventoryInput;
};

/** Autogenerated return type of UpdateInventory */
export type UpdateInventoryPayload = {
  __typename?: 'UpdateInventoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  inventory?: Maybe<Inventory>;
};

/** Autogenerated input type of UpdateOrganization */
export type UpdateOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: OrganizationInput;
};

/** Autogenerated return type of UpdateOrganization */
export type UpdateOrganizationPayload = {
  __typename?: 'UpdateOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of UpdateProjectCoc */
export type UpdateProjectCocInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: ProjectCocInput;
};

/** Autogenerated return type of UpdateProjectCoc */
export type UpdateProjectCocPayload = {
  __typename?: 'UpdateProjectCocPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  projectCoc?: Maybe<ProjectCoc>;
};

/** Autogenerated input type of UpdateProject */
export type UpdateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  confirmed: Scalars['Boolean'];
  id: Scalars['ID'];
  input: ProjectInput;
};

/** Autogenerated return type of UpdateProject */
export type UpdateProjectPayload = {
  __typename?: 'UpdateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  project?: Maybe<Project>;
};

/** Autogenerated input type of UpdateService */
export type UpdateServiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  input: ServiceInput;
};

/** Autogenerated return type of UpdateService */
export type UpdateServicePayload = {
  __typename?: 'UpdateServicePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
  service?: Maybe<Service>;
};

/** HUD User */
export type User = {
  __typename?: 'User';
  dateCreated: Scalars['ISO8601DateTime'];
  dateDeleted?: Maybe<Scalars['ISO8601DateTime']>;
  dateUpdated: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ValidationError = {
  __typename?: 'ValidationError';
  attribute?: Maybe<Scalars['String']>;
  fullMessage?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  options?: Maybe<Scalars['JsonObject']>;
  type: Scalars['String'];
};

/** Bound for the response value. The bound may or may not be dependent on another questions answer. */
export type ValueBound = {
  __typename?: 'ValueBound';
  /** Link ID of dependent question, if bound value should be equal to the questions answer */
  question?: Maybe<Scalars['String']>;
  type: BoundType;
  valueDate?: Maybe<Scalars['ISO8601Date']>;
  valueNumber?: Maybe<Scalars['Int']>;
};

/** C1.1 */
export enum WellbeingAgreement {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (2) Neither agree nor disagree */
  NeitherAgreeNorDisagree = 'NEITHER_AGREE_NOR_DISAGREE',
  /** (3) Somewhat agree */
  SomewhatAgree = 'SOMEWHAT_AGREE',
  /** (1) Somewhat disagree */
  SomewhatDisagree = 'SOMEWHAT_DISAGREE',
  /** (4) Strongly agree */
  StronglyAgree = 'STRONGLY_AGREE',
  /** (0) Strongly disagree */
  StronglyDisagree = 'STRONGLY_DISAGREE',
}

/** 4.11.A */
export enum WhenDvOccurred {
  /** (8) Client doesn't know */
  ClientDoesnTKnow = 'CLIENT_DOESN_T_KNOW',
  /** (9) Client refused */
  ClientRefused = 'CLIENT_REFUSED',
  /** (99) Data not collected */
  DataNotCollected = 'DATA_NOT_COLLECTED',
  /** (4) One year or more */
  OneYearOrMore = 'ONE_YEAR_OR_MORE',
  /** (3) Six months to one year ago (excluding one year exactly) */
  SixMonthsToOneYearAgoExcludingOneYearExactly = 'SIX_MONTHS_TO_ONE_YEAR_AGO_EXCLUDING_ONE_YEAR_EXACTLY',
  /** (2) Three to six months ago (excluding six months exactly) */
  ThreeToSixMonthsAgoExcludingSixMonthsExactly = 'THREE_TO_SIX_MONTHS_AGO_EXCLUDING_SIX_MONTHS_EXACTLY',
  /** (1) Within the past three months */
  WithinThePastThreeMonths = 'WITHIN_THE_PAST_THREE_MONTHS',
}

export type FormDefinitionFieldsFragment = {
  __typename?: 'FormDefinition';
  id: string;
  version: number;
  role: AssessmentRole;
  status: string;
  identifier: string;
};

export type PickListOptionFieldsFragment = {
  __typename?: 'PickListOption';
  code: string;
  label?: string | null;
  secondaryLabel?: string | null;
  groupLabel?: string | null;
  groupCode?: string | null;
  initialSelected?: boolean | null;
};

export type EnableWhenFieldsFragment = {
  __typename?: 'EnableWhen';
  question: string;
  operator: EnableOperator;
  answerCode?: string | null;
  answerCodes?: Array<string> | null;
  answerNumber?: number | null;
  answerBoolean?: boolean | null;
  answerGroupCode?: string | null;
  compareQuestion?: string | null;
};

export type ItemFieldsFragment = {
  __typename: 'FormItem';
  linkId: string;
  type: ItemType;
  component?: Component | null;
  prefix?: string | null;
  text?: string | null;
  helperText?: string | null;
  required?: boolean | null;
  hidden?: boolean | null;
  readOnly?: boolean | null;
  repeats?: boolean | null;
  fieldName?: string | null;
  recordType?: RelatedRecordType | null;
  pickListReference?: string | null;
  dataCollectedAbout?: DataCollectedAbout | null;
  disabledDisplay?: DisabledDisplay | null;
  enableBehavior?: EnableBehavior | null;
  bounds?: Array<{
    __typename?: 'ValueBound';
    type: BoundType;
    question?: string | null;
    valueNumber?: number | null;
    valueDate?: string | null;
  }> | null;
  pickListOptions?: Array<{
    __typename?: 'PickListOption';
    code: string;
    label?: string | null;
    secondaryLabel?: string | null;
    groupLabel?: string | null;
    groupCode?: string | null;
    initialSelected?: boolean | null;
  }> | null;
  initial?: Array<{
    __typename?: 'InitialValue';
    valueCode?: string | null;
    valueBoolean?: boolean | null;
    valueNumber?: number | null;
    valueLocalConstant?: string | null;
  }> | null;
  enableWhen?: Array<{
    __typename?: 'EnableWhen';
    question: string;
    operator: EnableOperator;
    answerCode?: string | null;
    answerCodes?: Array<string> | null;
    answerNumber?: number | null;
    answerBoolean?: boolean | null;
    answerGroupCode?: string | null;
    compareQuestion?: string | null;
  }> | null;
  autofillValues?: Array<{
    __typename?: 'AutofillValue';
    valueCode?: string | null;
    valueBoolean?: boolean | null;
    valueNumber?: number | null;
    autofillBehavior: EnableBehavior;
    autofillWhen: Array<{
      __typename?: 'EnableWhen';
      question: string;
      operator: EnableOperator;
      answerCode?: string | null;
      answerCodes?: Array<string> | null;
      answerNumber?: number | null;
      answerBoolean?: boolean | null;
      answerGroupCode?: string | null;
      compareQuestion?: string | null;
    }>;
  }> | null;
};

export type FormDefinitionWithJsonFragment = {
  __typename?: 'FormDefinition';
  id: string;
  version: number;
  role: AssessmentRole;
  status: string;
  identifier: string;
  definition: {
    __typename: 'FormDefinitionJson';
    item: Array<{
      __typename: 'FormItem';
      linkId: string;
      type: ItemType;
      component?: Component | null;
      prefix?: string | null;
      text?: string | null;
      helperText?: string | null;
      required?: boolean | null;
      hidden?: boolean | null;
      readOnly?: boolean | null;
      repeats?: boolean | null;
      fieldName?: string | null;
      recordType?: RelatedRecordType | null;
      pickListReference?: string | null;
      dataCollectedAbout?: DataCollectedAbout | null;
      disabledDisplay?: DisabledDisplay | null;
      enableBehavior?: EnableBehavior | null;
      item?: Array<{
        __typename: 'FormItem';
        linkId: string;
        type: ItemType;
        component?: Component | null;
        prefix?: string | null;
        text?: string | null;
        helperText?: string | null;
        required?: boolean | null;
        hidden?: boolean | null;
        readOnly?: boolean | null;
        repeats?: boolean | null;
        fieldName?: string | null;
        recordType?: RelatedRecordType | null;
        pickListReference?: string | null;
        dataCollectedAbout?: DataCollectedAbout | null;
        disabledDisplay?: DisabledDisplay | null;
        enableBehavior?: EnableBehavior | null;
        item?: Array<{
          __typename: 'FormItem';
          linkId: string;
          type: ItemType;
          component?: Component | null;
          prefix?: string | null;
          text?: string | null;
          helperText?: string | null;
          required?: boolean | null;
          hidden?: boolean | null;
          readOnly?: boolean | null;
          repeats?: boolean | null;
          fieldName?: string | null;
          recordType?: RelatedRecordType | null;
          pickListReference?: string | null;
          dataCollectedAbout?: DataCollectedAbout | null;
          disabledDisplay?: DisabledDisplay | null;
          enableBehavior?: EnableBehavior | null;
          item?: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }> | null;
          bounds?: Array<{
            __typename?: 'ValueBound';
            type: BoundType;
            question?: string | null;
            valueNumber?: number | null;
            valueDate?: string | null;
          }> | null;
          pickListOptions?: Array<{
            __typename?: 'PickListOption';
            code: string;
            label?: string | null;
            secondaryLabel?: string | null;
            groupLabel?: string | null;
            groupCode?: string | null;
            initialSelected?: boolean | null;
          }> | null;
          initial?: Array<{
            __typename?: 'InitialValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            valueLocalConstant?: string | null;
          }> | null;
          enableWhen?: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }> | null;
          autofillValues?: Array<{
            __typename?: 'AutofillValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            autofillBehavior: EnableBehavior;
            autofillWhen: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }>;
          }> | null;
        }> | null;
        bounds?: Array<{
          __typename?: 'ValueBound';
          type: BoundType;
          question?: string | null;
          valueNumber?: number | null;
          valueDate?: string | null;
        }> | null;
        pickListOptions?: Array<{
          __typename?: 'PickListOption';
          code: string;
          label?: string | null;
          secondaryLabel?: string | null;
          groupLabel?: string | null;
          groupCode?: string | null;
          initialSelected?: boolean | null;
        }> | null;
        initial?: Array<{
          __typename?: 'InitialValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          valueLocalConstant?: string | null;
        }> | null;
        enableWhen?: Array<{
          __typename?: 'EnableWhen';
          question: string;
          operator: EnableOperator;
          answerCode?: string | null;
          answerCodes?: Array<string> | null;
          answerNumber?: number | null;
          answerBoolean?: boolean | null;
          answerGroupCode?: string | null;
          compareQuestion?: string | null;
        }> | null;
        autofillValues?: Array<{
          __typename?: 'AutofillValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          autofillBehavior: EnableBehavior;
          autofillWhen: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }>;
        }> | null;
      }> | null;
      bounds?: Array<{
        __typename?: 'ValueBound';
        type: BoundType;
        question?: string | null;
        valueNumber?: number | null;
        valueDate?: string | null;
      }> | null;
      pickListOptions?: Array<{
        __typename?: 'PickListOption';
        code: string;
        label?: string | null;
        secondaryLabel?: string | null;
        groupLabel?: string | null;
        groupCode?: string | null;
        initialSelected?: boolean | null;
      }> | null;
      initial?: Array<{
        __typename?: 'InitialValue';
        valueCode?: string | null;
        valueBoolean?: boolean | null;
        valueNumber?: number | null;
        valueLocalConstant?: string | null;
      }> | null;
      enableWhen?: Array<{
        __typename?: 'EnableWhen';
        question: string;
        operator: EnableOperator;
        answerCode?: string | null;
        answerCodes?: Array<string> | null;
        answerNumber?: number | null;
        answerBoolean?: boolean | null;
        answerGroupCode?: string | null;
        compareQuestion?: string | null;
      }> | null;
      autofillValues?: Array<{
        __typename?: 'AutofillValue';
        valueCode?: string | null;
        valueBoolean?: boolean | null;
        valueNumber?: number | null;
        autofillBehavior: EnableBehavior;
        autofillWhen: Array<{
          __typename?: 'EnableWhen';
          question: string;
          operator: EnableOperator;
          answerCode?: string | null;
          answerCodes?: Array<string> | null;
          answerNumber?: number | null;
          answerBoolean?: boolean | null;
          answerGroupCode?: string | null;
          compareQuestion?: string | null;
        }>;
      }> | null;
    }>;
  };
};

export type AssessmentDetailFieldsFragment = {
  __typename?: 'AssessmentDetail';
  id: string;
  dataCollectionStage?: DataCollectionStage | null;
  role: AssessmentRole;
  status: string;
};

export type UserFieldsFragment = {
  __typename: 'User';
  id: string;
  name: string;
};

export type AssessmentFieldsFragment = {
  __typename?: 'Assessment';
  id: string;
  inProgress: boolean;
  assessmentDate: string;
  assessmentLevel?: AssessmentLevel | null;
  assessmentLocation: string;
  assessmentType?: AssessmentType | null;
  prioritizationStatus?: PrioritizationStatus | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
  user?: { __typename: 'User'; id: string; name: string } | null;
  assessmentDetail?: {
    __typename?: 'AssessmentDetail';
    id: string;
    dataCollectionStage?: DataCollectionStage | null;
    role: AssessmentRole;
    status: string;
    definition: {
      __typename?: 'FormDefinition';
      id: string;
      version: number;
      role: AssessmentRole;
      status: string;
      identifier: string;
    };
  } | null;
};

export type AssessmentWithDefinitionAndValuesFragment = {
  __typename?: 'Assessment';
  id: string;
  inProgress: boolean;
  assessmentDate: string;
  assessmentLevel?: AssessmentLevel | null;
  assessmentLocation: string;
  assessmentType?: AssessmentType | null;
  prioritizationStatus?: PrioritizationStatus | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
  assessmentDetail?: {
    __typename?: 'AssessmentDetail';
    values?: any | null;
    id: string;
    dataCollectionStage?: DataCollectionStage | null;
    role: AssessmentRole;
    status: string;
    definition: {
      __typename?: 'FormDefinition';
      id: string;
      version: number;
      role: AssessmentRole;
      status: string;
      identifier: string;
      definition: {
        __typename: 'FormDefinitionJson';
        item: Array<{
          __typename: 'FormItem';
          linkId: string;
          type: ItemType;
          component?: Component | null;
          prefix?: string | null;
          text?: string | null;
          helperText?: string | null;
          required?: boolean | null;
          hidden?: boolean | null;
          readOnly?: boolean | null;
          repeats?: boolean | null;
          fieldName?: string | null;
          recordType?: RelatedRecordType | null;
          pickListReference?: string | null;
          dataCollectedAbout?: DataCollectedAbout | null;
          disabledDisplay?: DisabledDisplay | null;
          enableBehavior?: EnableBehavior | null;
          item?: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                item?: Array<{
                  __typename: 'FormItem';
                  linkId: string;
                  type: ItemType;
                  component?: Component | null;
                  prefix?: string | null;
                  text?: string | null;
                  helperText?: string | null;
                  required?: boolean | null;
                  hidden?: boolean | null;
                  readOnly?: boolean | null;
                  repeats?: boolean | null;
                  fieldName?: string | null;
                  recordType?: RelatedRecordType | null;
                  pickListReference?: string | null;
                  dataCollectedAbout?: DataCollectedAbout | null;
                  disabledDisplay?: DisabledDisplay | null;
                  enableBehavior?: EnableBehavior | null;
                  bounds?: Array<{
                    __typename?: 'ValueBound';
                    type: BoundType;
                    question?: string | null;
                    valueNumber?: number | null;
                    valueDate?: string | null;
                  }> | null;
                  pickListOptions?: Array<{
                    __typename?: 'PickListOption';
                    code: string;
                    label?: string | null;
                    secondaryLabel?: string | null;
                    groupLabel?: string | null;
                    groupCode?: string | null;
                    initialSelected?: boolean | null;
                  }> | null;
                  initial?: Array<{
                    __typename?: 'InitialValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    valueLocalConstant?: string | null;
                  }> | null;
                  enableWhen?: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }> | null;
                  autofillValues?: Array<{
                    __typename?: 'AutofillValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    autofillBehavior: EnableBehavior;
                    autofillWhen: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }>;
                  }> | null;
                }> | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }> | null;
          bounds?: Array<{
            __typename?: 'ValueBound';
            type: BoundType;
            question?: string | null;
            valueNumber?: number | null;
            valueDate?: string | null;
          }> | null;
          pickListOptions?: Array<{
            __typename?: 'PickListOption';
            code: string;
            label?: string | null;
            secondaryLabel?: string | null;
            groupLabel?: string | null;
            groupCode?: string | null;
            initialSelected?: boolean | null;
          }> | null;
          initial?: Array<{
            __typename?: 'InitialValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            valueLocalConstant?: string | null;
          }> | null;
          enableWhen?: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }> | null;
          autofillValues?: Array<{
            __typename?: 'AutofillValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            autofillBehavior: EnableBehavior;
            autofillWhen: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }>;
          }> | null;
        }>;
      };
    };
  } | null;
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type GetAssessmentQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAssessmentQuery = {
  __typename?: 'Query';
  assessment?: {
    __typename?: 'Assessment';
    id: string;
    inProgress: boolean;
    assessmentDate: string;
    assessmentLevel?: AssessmentLevel | null;
    assessmentLocation: string;
    assessmentType?: AssessmentType | null;
    prioritizationStatus?: PrioritizationStatus | null;
    dateCreated: string;
    dateUpdated: string;
    dateDeleted?: string | null;
    assessmentDetail?: {
      __typename?: 'AssessmentDetail';
      values?: any | null;
      id: string;
      dataCollectionStage?: DataCollectionStage | null;
      role: AssessmentRole;
      status: string;
      definition: {
        __typename?: 'FormDefinition';
        id: string;
        version: number;
        role: AssessmentRole;
        status: string;
        identifier: string;
        definition: {
          __typename: 'FormDefinitionJson';
          item: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                item?: Array<{
                  __typename: 'FormItem';
                  linkId: string;
                  type: ItemType;
                  component?: Component | null;
                  prefix?: string | null;
                  text?: string | null;
                  helperText?: string | null;
                  required?: boolean | null;
                  hidden?: boolean | null;
                  readOnly?: boolean | null;
                  repeats?: boolean | null;
                  fieldName?: string | null;
                  recordType?: RelatedRecordType | null;
                  pickListReference?: string | null;
                  dataCollectedAbout?: DataCollectedAbout | null;
                  disabledDisplay?: DisabledDisplay | null;
                  enableBehavior?: EnableBehavior | null;
                  item?: Array<{
                    __typename: 'FormItem';
                    linkId: string;
                    type: ItemType;
                    component?: Component | null;
                    prefix?: string | null;
                    text?: string | null;
                    helperText?: string | null;
                    required?: boolean | null;
                    hidden?: boolean | null;
                    readOnly?: boolean | null;
                    repeats?: boolean | null;
                    fieldName?: string | null;
                    recordType?: RelatedRecordType | null;
                    pickListReference?: string | null;
                    dataCollectedAbout?: DataCollectedAbout | null;
                    disabledDisplay?: DisabledDisplay | null;
                    enableBehavior?: EnableBehavior | null;
                    bounds?: Array<{
                      __typename?: 'ValueBound';
                      type: BoundType;
                      question?: string | null;
                      valueNumber?: number | null;
                      valueDate?: string | null;
                    }> | null;
                    pickListOptions?: Array<{
                      __typename?: 'PickListOption';
                      code: string;
                      label?: string | null;
                      secondaryLabel?: string | null;
                      groupLabel?: string | null;
                      groupCode?: string | null;
                      initialSelected?: boolean | null;
                    }> | null;
                    initial?: Array<{
                      __typename?: 'InitialValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      valueLocalConstant?: string | null;
                    }> | null;
                    enableWhen?: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }> | null;
                    autofillValues?: Array<{
                      __typename?: 'AutofillValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      autofillBehavior: EnableBehavior;
                      autofillWhen: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }>;
                    }> | null;
                  }> | null;
                  bounds?: Array<{
                    __typename?: 'ValueBound';
                    type: BoundType;
                    question?: string | null;
                    valueNumber?: number | null;
                    valueDate?: string | null;
                  }> | null;
                  pickListOptions?: Array<{
                    __typename?: 'PickListOption';
                    code: string;
                    label?: string | null;
                    secondaryLabel?: string | null;
                    groupLabel?: string | null;
                    groupCode?: string | null;
                    initialSelected?: boolean | null;
                  }> | null;
                  initial?: Array<{
                    __typename?: 'InitialValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    valueLocalConstant?: string | null;
                  }> | null;
                  enableWhen?: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }> | null;
                  autofillValues?: Array<{
                    __typename?: 'AutofillValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    autofillBehavior: EnableBehavior;
                    autofillWhen: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }>;
                  }> | null;
                }> | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }>;
        };
      };
    } | null;
    user?: { __typename: 'User'; id: string; name: string } | null;
  } | null;
};

export type GetPickListQueryVariables = Exact<{
  pickListType: PickListType;
}>;

export type GetPickListQuery = {
  __typename?: 'Query';
  pickList: Array<{
    __typename?: 'PickListOption';
    code: string;
    label?: string | null;
    secondaryLabel?: string | null;
    groupLabel?: string | null;
    groupCode?: string | null;
    initialSelected?: boolean | null;
  }>;
};

export type GetEnrollmentAssessmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  role?: InputMaybe<AssessmentRole>;
}>;

export type GetEnrollmentAssessmentsQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    assessments: {
      __typename?: 'AssessmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Assessment';
        id: string;
        inProgress: boolean;
        assessmentDate: string;
        assessmentLevel?: AssessmentLevel | null;
        assessmentLocation: string;
        assessmentType?: AssessmentType | null;
        prioritizationStatus?: PrioritizationStatus | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
        user?: { __typename: 'User'; id: string; name: string } | null;
        assessmentDetail?: {
          __typename?: 'AssessmentDetail';
          id: string;
          dataCollectionStage?: DataCollectionStage | null;
          role: AssessmentRole;
          status: string;
          definition: {
            __typename?: 'FormDefinition';
            id: string;
            version: number;
            role: AssessmentRole;
            status: string;
            identifier: string;
          };
        } | null;
      }>;
    };
  } | null;
};

export type GetFormDefinitionByIdentifierQueryVariables = Exact<{
  identifier: Scalars['String'];
}>;

export type GetFormDefinitionByIdentifierQuery = {
  __typename?: 'Query';
  formDefinition?: {
    __typename?: 'FormDefinition';
    id: string;
    version: number;
    role: AssessmentRole;
    status: string;
    identifier: string;
    definition: {
      __typename: 'FormDefinitionJson';
      item: Array<{
        __typename: 'FormItem';
        linkId: string;
        type: ItemType;
        component?: Component | null;
        prefix?: string | null;
        text?: string | null;
        helperText?: string | null;
        required?: boolean | null;
        hidden?: boolean | null;
        readOnly?: boolean | null;
        repeats?: boolean | null;
        fieldName?: string | null;
        recordType?: RelatedRecordType | null;
        pickListReference?: string | null;
        dataCollectedAbout?: DataCollectedAbout | null;
        disabledDisplay?: DisabledDisplay | null;
        enableBehavior?: EnableBehavior | null;
        item?: Array<{
          __typename: 'FormItem';
          linkId: string;
          type: ItemType;
          component?: Component | null;
          prefix?: string | null;
          text?: string | null;
          helperText?: string | null;
          required?: boolean | null;
          hidden?: boolean | null;
          readOnly?: boolean | null;
          repeats?: boolean | null;
          fieldName?: string | null;
          recordType?: RelatedRecordType | null;
          pickListReference?: string | null;
          dataCollectedAbout?: DataCollectedAbout | null;
          disabledDisplay?: DisabledDisplay | null;
          enableBehavior?: EnableBehavior | null;
          item?: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }> | null;
          bounds?: Array<{
            __typename?: 'ValueBound';
            type: BoundType;
            question?: string | null;
            valueNumber?: number | null;
            valueDate?: string | null;
          }> | null;
          pickListOptions?: Array<{
            __typename?: 'PickListOption';
            code: string;
            label?: string | null;
            secondaryLabel?: string | null;
            groupLabel?: string | null;
            groupCode?: string | null;
            initialSelected?: boolean | null;
          }> | null;
          initial?: Array<{
            __typename?: 'InitialValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            valueLocalConstant?: string | null;
          }> | null;
          enableWhen?: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }> | null;
          autofillValues?: Array<{
            __typename?: 'AutofillValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            autofillBehavior: EnableBehavior;
            autofillWhen: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }>;
          }> | null;
        }> | null;
        bounds?: Array<{
          __typename?: 'ValueBound';
          type: BoundType;
          question?: string | null;
          valueNumber?: number | null;
          valueDate?: string | null;
        }> | null;
        pickListOptions?: Array<{
          __typename?: 'PickListOption';
          code: string;
          label?: string | null;
          secondaryLabel?: string | null;
          groupLabel?: string | null;
          groupCode?: string | null;
          initialSelected?: boolean | null;
        }> | null;
        initial?: Array<{
          __typename?: 'InitialValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          valueLocalConstant?: string | null;
        }> | null;
        enableWhen?: Array<{
          __typename?: 'EnableWhen';
          question: string;
          operator: EnableOperator;
          answerCode?: string | null;
          answerCodes?: Array<string> | null;
          answerNumber?: number | null;
          answerBoolean?: boolean | null;
          answerGroupCode?: string | null;
          compareQuestion?: string | null;
        }> | null;
        autofillValues?: Array<{
          __typename?: 'AutofillValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          autofillBehavior: EnableBehavior;
          autofillWhen: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }>;
        }> | null;
      }>;
    };
  } | null;
};

export type GetFormDefinitionQueryVariables = Exact<{
  enrollmentId: Scalars['ID'];
  assessmentRole: AssessmentRole;
}>;

export type GetFormDefinitionQuery = {
  __typename?: 'Query';
  getFormDefinition?: {
    __typename?: 'FormDefinition';
    id: string;
    version: number;
    role: AssessmentRole;
    status: string;
    identifier: string;
    definition: {
      __typename: 'FormDefinitionJson';
      item: Array<{
        __typename: 'FormItem';
        linkId: string;
        type: ItemType;
        component?: Component | null;
        prefix?: string | null;
        text?: string | null;
        helperText?: string | null;
        required?: boolean | null;
        hidden?: boolean | null;
        readOnly?: boolean | null;
        repeats?: boolean | null;
        fieldName?: string | null;
        recordType?: RelatedRecordType | null;
        pickListReference?: string | null;
        dataCollectedAbout?: DataCollectedAbout | null;
        disabledDisplay?: DisabledDisplay | null;
        enableBehavior?: EnableBehavior | null;
        item?: Array<{
          __typename: 'FormItem';
          linkId: string;
          type: ItemType;
          component?: Component | null;
          prefix?: string | null;
          text?: string | null;
          helperText?: string | null;
          required?: boolean | null;
          hidden?: boolean | null;
          readOnly?: boolean | null;
          repeats?: boolean | null;
          fieldName?: string | null;
          recordType?: RelatedRecordType | null;
          pickListReference?: string | null;
          dataCollectedAbout?: DataCollectedAbout | null;
          disabledDisplay?: DisabledDisplay | null;
          enableBehavior?: EnableBehavior | null;
          item?: Array<{
            __typename: 'FormItem';
            linkId: string;
            type: ItemType;
            component?: Component | null;
            prefix?: string | null;
            text?: string | null;
            helperText?: string | null;
            required?: boolean | null;
            hidden?: boolean | null;
            readOnly?: boolean | null;
            repeats?: boolean | null;
            fieldName?: string | null;
            recordType?: RelatedRecordType | null;
            pickListReference?: string | null;
            dataCollectedAbout?: DataCollectedAbout | null;
            disabledDisplay?: DisabledDisplay | null;
            enableBehavior?: EnableBehavior | null;
            item?: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }> | null;
            bounds?: Array<{
              __typename?: 'ValueBound';
              type: BoundType;
              question?: string | null;
              valueNumber?: number | null;
              valueDate?: string | null;
            }> | null;
            pickListOptions?: Array<{
              __typename?: 'PickListOption';
              code: string;
              label?: string | null;
              secondaryLabel?: string | null;
              groupLabel?: string | null;
              groupCode?: string | null;
              initialSelected?: boolean | null;
            }> | null;
            initial?: Array<{
              __typename?: 'InitialValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              valueLocalConstant?: string | null;
            }> | null;
            enableWhen?: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }> | null;
            autofillValues?: Array<{
              __typename?: 'AutofillValue';
              valueCode?: string | null;
              valueBoolean?: boolean | null;
              valueNumber?: number | null;
              autofillBehavior: EnableBehavior;
              autofillWhen: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }>;
            }> | null;
          }> | null;
          bounds?: Array<{
            __typename?: 'ValueBound';
            type: BoundType;
            question?: string | null;
            valueNumber?: number | null;
            valueDate?: string | null;
          }> | null;
          pickListOptions?: Array<{
            __typename?: 'PickListOption';
            code: string;
            label?: string | null;
            secondaryLabel?: string | null;
            groupLabel?: string | null;
            groupCode?: string | null;
            initialSelected?: boolean | null;
          }> | null;
          initial?: Array<{
            __typename?: 'InitialValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            valueLocalConstant?: string | null;
          }> | null;
          enableWhen?: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }> | null;
          autofillValues?: Array<{
            __typename?: 'AutofillValue';
            valueCode?: string | null;
            valueBoolean?: boolean | null;
            valueNumber?: number | null;
            autofillBehavior: EnableBehavior;
            autofillWhen: Array<{
              __typename?: 'EnableWhen';
              question: string;
              operator: EnableOperator;
              answerCode?: string | null;
              answerCodes?: Array<string> | null;
              answerNumber?: number | null;
              answerBoolean?: boolean | null;
              answerGroupCode?: string | null;
              compareQuestion?: string | null;
            }>;
          }> | null;
        }> | null;
        bounds?: Array<{
          __typename?: 'ValueBound';
          type: BoundType;
          question?: string | null;
          valueNumber?: number | null;
          valueDate?: string | null;
        }> | null;
        pickListOptions?: Array<{
          __typename?: 'PickListOption';
          code: string;
          label?: string | null;
          secondaryLabel?: string | null;
          groupLabel?: string | null;
          groupCode?: string | null;
          initialSelected?: boolean | null;
        }> | null;
        initial?: Array<{
          __typename?: 'InitialValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          valueLocalConstant?: string | null;
        }> | null;
        enableWhen?: Array<{
          __typename?: 'EnableWhen';
          question: string;
          operator: EnableOperator;
          answerCode?: string | null;
          answerCodes?: Array<string> | null;
          answerNumber?: number | null;
          answerBoolean?: boolean | null;
          answerGroupCode?: string | null;
          compareQuestion?: string | null;
        }> | null;
        autofillValues?: Array<{
          __typename?: 'AutofillValue';
          valueCode?: string | null;
          valueBoolean?: boolean | null;
          valueNumber?: number | null;
          autofillBehavior: EnableBehavior;
          autofillWhen: Array<{
            __typename?: 'EnableWhen';
            question: string;
            operator: EnableOperator;
            answerCode?: string | null;
            answerCodes?: Array<string> | null;
            answerNumber?: number | null;
            answerBoolean?: boolean | null;
            answerGroupCode?: string | null;
            compareQuestion?: string | null;
          }>;
        }> | null;
      }>;
    };
  } | null;
};

export type SaveAssessmentMutationVariables = Exact<{
  assessmentId?: InputMaybe<Scalars['ID']>;
  enrollmentId?: InputMaybe<Scalars['ID']>;
  formDefinitionId?: InputMaybe<Scalars['ID']>;
  values: Scalars['JsonObject'];
  assessmentDate?: InputMaybe<Scalars['String']>;
}>;

export type SaveAssessmentMutation = {
  __typename?: 'Mutation';
  saveAssessment?: {
    __typename?: 'SaveAssessmentPayload';
    assessment?: {
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
      assessmentDate: string;
      assessmentLevel?: AssessmentLevel | null;
      assessmentLocation: string;
      assessmentType?: AssessmentType | null;
      prioritizationStatus?: PrioritizationStatus | null;
      dateCreated: string;
      dateUpdated: string;
      dateDeleted?: string | null;
      assessmentDetail?: {
        __typename?: 'AssessmentDetail';
        values?: any | null;
        id: string;
        dataCollectionStage?: DataCollectionStage | null;
        role: AssessmentRole;
        status: string;
        definition: {
          __typename?: 'FormDefinition';
          id: string;
          version: number;
          role: AssessmentRole;
          status: string;
          identifier: string;
          definition: {
            __typename: 'FormDefinitionJson';
            item: Array<{
              __typename: 'FormItem';
              linkId: string;
              type: ItemType;
              component?: Component | null;
              prefix?: string | null;
              text?: string | null;
              helperText?: string | null;
              required?: boolean | null;
              hidden?: boolean | null;
              readOnly?: boolean | null;
              repeats?: boolean | null;
              fieldName?: string | null;
              recordType?: RelatedRecordType | null;
              pickListReference?: string | null;
              dataCollectedAbout?: DataCollectedAbout | null;
              disabledDisplay?: DisabledDisplay | null;
              enableBehavior?: EnableBehavior | null;
              item?: Array<{
                __typename: 'FormItem';
                linkId: string;
                type: ItemType;
                component?: Component | null;
                prefix?: string | null;
                text?: string | null;
                helperText?: string | null;
                required?: boolean | null;
                hidden?: boolean | null;
                readOnly?: boolean | null;
                repeats?: boolean | null;
                fieldName?: string | null;
                recordType?: RelatedRecordType | null;
                pickListReference?: string | null;
                dataCollectedAbout?: DataCollectedAbout | null;
                disabledDisplay?: DisabledDisplay | null;
                enableBehavior?: EnableBehavior | null;
                item?: Array<{
                  __typename: 'FormItem';
                  linkId: string;
                  type: ItemType;
                  component?: Component | null;
                  prefix?: string | null;
                  text?: string | null;
                  helperText?: string | null;
                  required?: boolean | null;
                  hidden?: boolean | null;
                  readOnly?: boolean | null;
                  repeats?: boolean | null;
                  fieldName?: string | null;
                  recordType?: RelatedRecordType | null;
                  pickListReference?: string | null;
                  dataCollectedAbout?: DataCollectedAbout | null;
                  disabledDisplay?: DisabledDisplay | null;
                  enableBehavior?: EnableBehavior | null;
                  item?: Array<{
                    __typename: 'FormItem';
                    linkId: string;
                    type: ItemType;
                    component?: Component | null;
                    prefix?: string | null;
                    text?: string | null;
                    helperText?: string | null;
                    required?: boolean | null;
                    hidden?: boolean | null;
                    readOnly?: boolean | null;
                    repeats?: boolean | null;
                    fieldName?: string | null;
                    recordType?: RelatedRecordType | null;
                    pickListReference?: string | null;
                    dataCollectedAbout?: DataCollectedAbout | null;
                    disabledDisplay?: DisabledDisplay | null;
                    enableBehavior?: EnableBehavior | null;
                    item?: Array<{
                      __typename: 'FormItem';
                      linkId: string;
                      type: ItemType;
                      component?: Component | null;
                      prefix?: string | null;
                      text?: string | null;
                      helperText?: string | null;
                      required?: boolean | null;
                      hidden?: boolean | null;
                      readOnly?: boolean | null;
                      repeats?: boolean | null;
                      fieldName?: string | null;
                      recordType?: RelatedRecordType | null;
                      pickListReference?: string | null;
                      dataCollectedAbout?: DataCollectedAbout | null;
                      disabledDisplay?: DisabledDisplay | null;
                      enableBehavior?: EnableBehavior | null;
                      bounds?: Array<{
                        __typename?: 'ValueBound';
                        type: BoundType;
                        question?: string | null;
                        valueNumber?: number | null;
                        valueDate?: string | null;
                      }> | null;
                      pickListOptions?: Array<{
                        __typename?: 'PickListOption';
                        code: string;
                        label?: string | null;
                        secondaryLabel?: string | null;
                        groupLabel?: string | null;
                        groupCode?: string | null;
                        initialSelected?: boolean | null;
                      }> | null;
                      initial?: Array<{
                        __typename?: 'InitialValue';
                        valueCode?: string | null;
                        valueBoolean?: boolean | null;
                        valueNumber?: number | null;
                        valueLocalConstant?: string | null;
                      }> | null;
                      enableWhen?: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }> | null;
                      autofillValues?: Array<{
                        __typename?: 'AutofillValue';
                        valueCode?: string | null;
                        valueBoolean?: boolean | null;
                        valueNumber?: number | null;
                        autofillBehavior: EnableBehavior;
                        autofillWhen: Array<{
                          __typename?: 'EnableWhen';
                          question: string;
                          operator: EnableOperator;
                          answerCode?: string | null;
                          answerCodes?: Array<string> | null;
                          answerNumber?: number | null;
                          answerBoolean?: boolean | null;
                          answerGroupCode?: string | null;
                          compareQuestion?: string | null;
                        }>;
                      }> | null;
                    }> | null;
                    bounds?: Array<{
                      __typename?: 'ValueBound';
                      type: BoundType;
                      question?: string | null;
                      valueNumber?: number | null;
                      valueDate?: string | null;
                    }> | null;
                    pickListOptions?: Array<{
                      __typename?: 'PickListOption';
                      code: string;
                      label?: string | null;
                      secondaryLabel?: string | null;
                      groupLabel?: string | null;
                      groupCode?: string | null;
                      initialSelected?: boolean | null;
                    }> | null;
                    initial?: Array<{
                      __typename?: 'InitialValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      valueLocalConstant?: string | null;
                    }> | null;
                    enableWhen?: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }> | null;
                    autofillValues?: Array<{
                      __typename?: 'AutofillValue';
                      valueCode?: string | null;
                      valueBoolean?: boolean | null;
                      valueNumber?: number | null;
                      autofillBehavior: EnableBehavior;
                      autofillWhen: Array<{
                        __typename?: 'EnableWhen';
                        question: string;
                        operator: EnableOperator;
                        answerCode?: string | null;
                        answerCodes?: Array<string> | null;
                        answerNumber?: number | null;
                        answerBoolean?: boolean | null;
                        answerGroupCode?: string | null;
                        compareQuestion?: string | null;
                      }>;
                    }> | null;
                  }> | null;
                  bounds?: Array<{
                    __typename?: 'ValueBound';
                    type: BoundType;
                    question?: string | null;
                    valueNumber?: number | null;
                    valueDate?: string | null;
                  }> | null;
                  pickListOptions?: Array<{
                    __typename?: 'PickListOption';
                    code: string;
                    label?: string | null;
                    secondaryLabel?: string | null;
                    groupLabel?: string | null;
                    groupCode?: string | null;
                    initialSelected?: boolean | null;
                  }> | null;
                  initial?: Array<{
                    __typename?: 'InitialValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    valueLocalConstant?: string | null;
                  }> | null;
                  enableWhen?: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }> | null;
                  autofillValues?: Array<{
                    __typename?: 'AutofillValue';
                    valueCode?: string | null;
                    valueBoolean?: boolean | null;
                    valueNumber?: number | null;
                    autofillBehavior: EnableBehavior;
                    autofillWhen: Array<{
                      __typename?: 'EnableWhen';
                      question: string;
                      operator: EnableOperator;
                      answerCode?: string | null;
                      answerCodes?: Array<string> | null;
                      answerNumber?: number | null;
                      answerBoolean?: boolean | null;
                      answerGroupCode?: string | null;
                      compareQuestion?: string | null;
                    }>;
                  }> | null;
                }> | null;
                bounds?: Array<{
                  __typename?: 'ValueBound';
                  type: BoundType;
                  question?: string | null;
                  valueNumber?: number | null;
                  valueDate?: string | null;
                }> | null;
                pickListOptions?: Array<{
                  __typename?: 'PickListOption';
                  code: string;
                  label?: string | null;
                  secondaryLabel?: string | null;
                  groupLabel?: string | null;
                  groupCode?: string | null;
                  initialSelected?: boolean | null;
                }> | null;
                initial?: Array<{
                  __typename?: 'InitialValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  valueLocalConstant?: string | null;
                }> | null;
                enableWhen?: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }> | null;
                autofillValues?: Array<{
                  __typename?: 'AutofillValue';
                  valueCode?: string | null;
                  valueBoolean?: boolean | null;
                  valueNumber?: number | null;
                  autofillBehavior: EnableBehavior;
                  autofillWhen: Array<{
                    __typename?: 'EnableWhen';
                    question: string;
                    operator: EnableOperator;
                    answerCode?: string | null;
                    answerCodes?: Array<string> | null;
                    answerNumber?: number | null;
                    answerBoolean?: boolean | null;
                    answerGroupCode?: string | null;
                    compareQuestion?: string | null;
                  }>;
                }> | null;
              }> | null;
              bounds?: Array<{
                __typename?: 'ValueBound';
                type: BoundType;
                question?: string | null;
                valueNumber?: number | null;
                valueDate?: string | null;
              }> | null;
              pickListOptions?: Array<{
                __typename?: 'PickListOption';
                code: string;
                label?: string | null;
                secondaryLabel?: string | null;
                groupLabel?: string | null;
                groupCode?: string | null;
                initialSelected?: boolean | null;
              }> | null;
              initial?: Array<{
                __typename?: 'InitialValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                valueLocalConstant?: string | null;
              }> | null;
              enableWhen?: Array<{
                __typename?: 'EnableWhen';
                question: string;
                operator: EnableOperator;
                answerCode?: string | null;
                answerCodes?: Array<string> | null;
                answerNumber?: number | null;
                answerBoolean?: boolean | null;
                answerGroupCode?: string | null;
                compareQuestion?: string | null;
              }> | null;
              autofillValues?: Array<{
                __typename?: 'AutofillValue';
                valueCode?: string | null;
                valueBoolean?: boolean | null;
                valueNumber?: number | null;
                autofillBehavior: EnableBehavior;
                autofillWhen: Array<{
                  __typename?: 'EnableWhen';
                  question: string;
                  operator: EnableOperator;
                  answerCode?: string | null;
                  answerCodes?: Array<string> | null;
                  answerNumber?: number | null;
                  answerBoolean?: boolean | null;
                  answerGroupCode?: string | null;
                  compareQuestion?: string | null;
                }>;
              }> | null;
            }>;
          };
        };
      } | null;
      user?: { __typename: 'User'; id: string; name: string } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type SubmitAssessmentMutationVariables = Exact<{
  assessmentId?: InputMaybe<Scalars['ID']>;
  enrollmentId?: InputMaybe<Scalars['ID']>;
  formDefinitionId?: InputMaybe<Scalars['ID']>;
  values: Scalars['JsonObject'];
  hudValues?: InputMaybe<Scalars['JsonObject']>;
  assessmentDate?: InputMaybe<Scalars['String']>;
}>;

export type SubmitAssessmentMutation = {
  __typename?: 'Mutation';
  submitAssessment?: {
    __typename?: 'SubmitAssessmentPayload';
    assessment?: {
      __typename?: 'Assessment';
      id: string;
      inProgress: boolean;
      assessmentDate: string;
      assessmentLevel?: AssessmentLevel | null;
      assessmentLocation: string;
      assessmentType?: AssessmentType | null;
      prioritizationStatus?: PrioritizationStatus | null;
      dateCreated: string;
      dateUpdated: string;
      dateDeleted?: string | null;
      user?: { __typename: 'User'; id: string; name: string } | null;
      assessmentDetail?: {
        __typename?: 'AssessmentDetail';
        id: string;
        dataCollectionStage?: DataCollectionStage | null;
        role: AssessmentRole;
        status: string;
        definition: {
          __typename?: 'FormDefinition';
          id: string;
          version: number;
          role: AssessmentRole;
          status: string;
          identifier: string;
        };
      } | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type ValidationErrorFieldsFragment = {
  __typename?: 'ValidationError';
  type: string;
  attribute?: string | null;
  message: string;
  fullMessage?: string | null;
  id?: string | null;
};

export type ClientNameFragment = {
  __typename?: 'Client';
  firstName?: string | null;
  middleName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
};

export type ClientFieldsFragment = {
  __typename?: 'Client';
  id: string;
  dob?: string | null;
  dobDataQuality: DobDataQuality;
  ethnicity: Ethnicity;
  gender: Array<Gender>;
  nameDataQuality: NameDataQuality;
  personalId: string;
  race: Array<Race>;
  ssn?: string | null;
  ssnDataQuality: SsnDataQuality;
  veteranStatus: NoYesReasonsForMissingData;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  firstName?: string | null;
  middleName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
};

export type HouseholdClientFieldsFragment = {
  __typename?: 'HouseholdClient';
  id: string;
  relationshipToHoH: RelationshipToHoH;
  client: {
    __typename?: 'Client';
    id: string;
    dob?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
  };
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
  };
};

export type EnrollmentFieldsFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate: string;
  exitDate?: string | null;
  inProgress: boolean;
  project: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
  };
  household: { __typename?: 'Household'; id: string };
  client: { __typename?: 'Client'; id: string };
};

export type EnrollmentFieldsFromAssessmentFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate: string;
  exitDate?: string | null;
  livingSituation?: LivingSituation | null;
  lengthOfStay?: ResidencePriorLengthOfStay | null;
  previousStreetEssh?: boolean | null;
  dateToStreetEssh?: string | null;
  timesHomelessPastThreeYears?: TimesHomelessPastThreeYears | null;
  monthsHomelessPastThreeYears?: MonthsHomelessPastThreeYears | null;
  project: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type EnrollmentWithHoHFragmentFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate: string;
  exitDate?: string | null;
  inProgress: boolean;
  household: {
    __typename?: 'Household';
    id: string;
    householdClients: Array<{
      __typename?: 'HouseholdClient';
      id: string;
      relationshipToHoH: RelationshipToHoH;
      client: {
        __typename?: 'Client';
        id: string;
        dob?: string | null;
        firstName?: string | null;
        middleName?: string | null;
        preferredName?: string | null;
        lastName?: string | null;
        nameSuffix?: string | null;
      };
      enrollment: {
        __typename?: 'Enrollment';
        id: string;
        entryDate: string;
        exitDate?: string | null;
        inProgress: boolean;
      };
    }>;
  };
  project: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
  };
  client: { __typename?: 'Client'; id: string };
};

export type EventFieldsFragment = {
  __typename?: 'Event';
  id: string;
  event: EventType;
  eventDate: string;
  locationCrisisOrPhHousing?: string | null;
  probSolDivRrResult?: boolean | null;
  referralCaseManageAfter?: boolean | null;
  referralResult?: ReferralResult | null;
  resultDate?: string | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
};

export type ServiceFieldsFragment = {
  __typename?: 'Service';
  id: string;
  dateProvided: string;
  movingOnOtherType?: string | null;
  recordType: RecordType;
  referralOutcome?: PathReferralOutcome | null;
  subTypeProvided?: ServiceSubTypeProvided | null;
  typeProvided: ServiceTypeProvided;
  otherTypeProvided?: string | null;
  dateCreated: string;
  dateUpdated: string;
  dateDeleted?: string | null;
};

export type IncomeBenefitFieldsFragment = {
  __typename: 'IncomeBenefit';
  adap?: NoYesReasonsForMissingData | null;
  alimonyAmount?: number | null;
  benefitsFromAnySource?: NoYesReasonsForMissingData | null;
  childSupportAmount?: number | null;
  cobra?: boolean | null;
  connectionWithSoar?: NoYesReasonsForMissingData | null;
  dataCollectionStage: DataCollectionStage;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  earnedAmount?: number | null;
  employerProvided?: boolean | null;
  gaAmount?: number | null;
  hivaidsAssistance?: NoYesReasonsForMissingData | null;
  id: string;
  incomeFromAnySource?: NoYesReasonsForMissingData | null;
  indianHealthServices?: boolean | null;
  informationDate: string;
  insuranceFromAnySource?: NoYesReasonsForMissingData | null;
  medicaid?: boolean | null;
  medicare?: boolean | null;
  noAdapReason?: NoAssistanceReason | null;
  noCobraReason?: ReasonNotInsured | null;
  noEmployerProvidedReason?: ReasonNotInsured | null;
  noHivaidsAssistanceReason?: NoAssistanceReason | null;
  noIndianHealthServicesReason?: ReasonNotInsured | null;
  noMedicaidReason?: ReasonNotInsured | null;
  noMedicareReason?: ReasonNotInsured | null;
  noPrivatePayReason?: ReasonNotInsured | null;
  noRyanWhiteReason?: NoAssistanceReason | null;
  noSchipReason?: ReasonNotInsured | null;
  noStateHealthInsReason?: ReasonNotInsured | null;
  noVaMedReason?: ReasonNotInsured | null;
  otherBenefitsSource?: boolean | null;
  otherBenefitsSourceIdentify?: string | null;
  otherIncomeAmount?: number | null;
  otherIncomeSourceIdentify?: string | null;
  otherInsurance?: boolean | null;
  otherInsuranceIdentify?: string | null;
  otherTanf?: boolean | null;
  pensionAmount?: number | null;
  privateDisabilityAmount?: number | null;
  privatePay?: boolean | null;
  ryanWhiteMedDent?: NoYesReasonsForMissingData | null;
  schip?: boolean | null;
  snap?: boolean | null;
  socSecRetirementAmount?: number | null;
  ssdiAmount?: number | null;
  ssiAmount?: number | null;
  stateHealthIns?: boolean | null;
  tanfAmount?: number | null;
  tanfChildCare?: boolean | null;
  tanfTransportation?: boolean | null;
  totalMonthlyIncome?: string | null;
  unemploymentAmount?: number | null;
  vaDisabilityNonServiceAmount?: number | null;
  vaDisabilityServiceAmount?: number | null;
  vaMedicalServices?: boolean | null;
  wic?: boolean | null;
  workersCompAmount?: number | null;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type DisabilityGroupFieldsFragment = {
  __typename: 'DisabilityGroup';
  id: string;
  dataCollectionStage: DataCollectionStage;
  informationDate: string;
  disablingCondition: NoYesReasonsForMissingData;
  chronicHealthCondition?: NoYesReasonsForMissingData | null;
  chronicHealthConditionIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  developmentalDisability?: NoYesReasonsForMissingData | null;
  hivAids?: NoYesReasonsForMissingData | null;
  mentalHealthDisorder?: NoYesReasonsForMissingData | null;
  mentalHealthDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  physicalDisability?: NoYesReasonsForMissingData | null;
  physicalDisabilityIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  substanceUseDisorder?: DisabilityResponse | null;
  substanceUseDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type HealthAndDvFieldsFragment = {
  __typename: 'HealthAndDv';
  bounceBack?: WellbeingAgreement | null;
  currentlyFleeing?: NoYesReasonsForMissingData | null;
  dataCollectionStage: DataCollectionStage;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  dentalHealthStatus?: HealthStatus | null;
  domesticViolenceVictim?: NoYesReasonsForMissingData | null;
  dueDate?: string | null;
  feelingFrequency?: FeelingFrequency | null;
  generalHealthStatus?: HealthStatus | null;
  id: string;
  informationDate: string;
  lifeValue?: WellbeingAgreement | null;
  mentalHealthStatus?: HealthStatus | null;
  pregnancyStatus?: NoYesReasonsForMissingData | null;
  supportFromOthers?: WellbeingAgreement | null;
  whenOccurred?: WhenDvOccurred | null;
  enrollment: {
    __typename?: 'Enrollment';
    id: string;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
  };
  user?: { __typename: 'User'; id: string; name: string } | null;
};

export type SearchClientsQueryVariables = Exact<{
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type SearchClientsQuery = {
  __typename?: 'Query';
  clientSearch: {
    __typename?: 'ClientsPaginated';
    offset: number;
    limit: number;
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Client';
      id: string;
      dob?: string | null;
      dobDataQuality: DobDataQuality;
      ethnicity: Ethnicity;
      gender: Array<Gender>;
      nameDataQuality: NameDataQuality;
      personalId: string;
      race: Array<Race>;
      ssn?: string | null;
      ssnDataQuality: SsnDataQuality;
      veteranStatus: NoYesReasonsForMissingData;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      firstName?: string | null;
      middleName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
    }>;
  };
};

export type GetClientQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetClientQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    dob?: string | null;
    dobDataQuality: DobDataQuality;
    ethnicity: Ethnicity;
    gender: Array<Gender>;
    nameDataQuality: NameDataQuality;
    personalId: string;
    race: Array<Race>;
    ssn?: string | null;
    ssnDataQuality: SsnDataQuality;
    veteranStatus: NoYesReasonsForMissingData;
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    firstName?: string | null;
    middleName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
  } | null;
};

export type GetClientEnrollmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientEnrollmentsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        id: string;
        entryDate: string;
        exitDate?: string | null;
        inProgress: boolean;
        project: {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        };
        household: { __typename?: 'Household'; id: string };
        client: { __typename?: 'Client'; id: string };
      }>;
    };
  } | null;
};

export type GetRecentEnrollmentsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetRecentEnrollmentsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        id: string;
        entryDate: string;
        exitDate?: string | null;
        livingSituation?: LivingSituation | null;
        lengthOfStay?: ResidencePriorLengthOfStay | null;
        previousStreetEssh?: boolean | null;
        dateToStreetEssh?: string | null;
        timesHomelessPastThreeYears?: TimesHomelessPastThreeYears | null;
        monthsHomelessPastThreeYears?: MonthsHomelessPastThreeYears | null;
        project: {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        };
        user?: { __typename: 'User'; id: string; name: string } | null;
      }>;
    };
  } | null;
};

export type CreateClientMutationVariables = Exact<{
  input: CreateClientInput;
}>;

export type CreateClientMutation = {
  __typename?: 'Mutation';
  createClient?: {
    __typename?: 'CreateClientPayload';
    clientMutationId?: string | null;
    client?: {
      __typename?: 'Client';
      id: string;
      dob?: string | null;
      dobDataQuality: DobDataQuality;
      ethnicity: Ethnicity;
      gender: Array<Gender>;
      nameDataQuality: NameDataQuality;
      personalId: string;
      race: Array<Race>;
      ssn?: string | null;
      ssnDataQuality: SsnDataQuality;
      veteranStatus: NoYesReasonsForMissingData;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      firstName?: string | null;
      middleName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateClientMutationVariables = Exact<{
  input: UpdateClientInput;
}>;

export type UpdateClientMutation = {
  __typename?: 'Mutation';
  updateClient?: {
    __typename?: 'UpdateClientPayload';
    clientMutationId?: string | null;
    client?: {
      __typename?: 'Client';
      id: string;
      dob?: string | null;
      dobDataQuality: DobDataQuality;
      ethnicity: Ethnicity;
      gender: Array<Gender>;
      nameDataQuality: NameDataQuality;
      personalId: string;
      race: Array<Race>;
      ssn?: string | null;
      ssnDataQuality: SsnDataQuality;
      veteranStatus: NoYesReasonsForMissingData;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      firstName?: string | null;
      middleName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type CreateEnrollmentMutationVariables = Exact<{
  input: CreateEnrollmentInput;
}>;

export type CreateEnrollmentMutation = {
  __typename?: 'Mutation';
  createEnrollment?: {
    __typename?: 'CreateEnrollmentPayload';
    clientMutationId?: string | null;
    enrollments?: Array<{
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      household: { __typename?: 'Household'; id: string };
      client: { __typename?: 'Client'; id: string };
    }> | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateEnrollmentMutationVariables = Exact<{
  input: UpdateEnrollmentInput;
}>;

export type UpdateEnrollmentMutation = {
  __typename?: 'Mutation';
  updateEnrollment?: {
    __typename?: 'UpdateEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      household: {
        __typename?: 'Household';
        id: string;
        householdClients: Array<{
          __typename?: 'HouseholdClient';
          id: string;
          relationshipToHoH: RelationshipToHoH;
          client: {
            __typename?: 'Client';
            id: string;
            dob?: string | null;
            firstName?: string | null;
            middleName?: string | null;
            preferredName?: string | null;
            lastName?: string | null;
            nameSuffix?: string | null;
          };
          enrollment: {
            __typename?: 'Enrollment';
            id: string;
            entryDate: string;
            exitDate?: string | null;
            inProgress: boolean;
          };
        }>;
      };
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type SetHoHMutationVariables = Exact<{
  input: SetHoHForEnrollmentInput;
}>;

export type SetHoHMutation = {
  __typename?: 'Mutation';
  setHoHForEnrollment?: {
    __typename?: 'SetHoHForEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      household: {
        __typename?: 'Household';
        id: string;
        householdClients: Array<{
          __typename?: 'HouseholdClient';
          id: string;
          relationshipToHoH: RelationshipToHoH;
          client: {
            __typename?: 'Client';
            id: string;
            dob?: string | null;
            firstName?: string | null;
            middleName?: string | null;
            preferredName?: string | null;
            lastName?: string | null;
            nameSuffix?: string | null;
          };
          enrollment: {
            __typename?: 'Enrollment';
            id: string;
            entryDate: string;
            exitDate?: string | null;
            inProgress: boolean;
          };
        }>;
      };
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type DeleteEnrollmentMutationVariables = Exact<{
  input: DeleteEnrollmentInput;
}>;

export type DeleteEnrollmentMutation = {
  __typename?: 'Mutation';
  deleteEnrollment?: {
    __typename?: 'DeleteEnrollmentPayload';
    clientMutationId?: string | null;
    enrollment?: {
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      household: { __typename?: 'Household'; id: string };
      client: { __typename?: 'Client'; id: string };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type AddHouseholdMembersMutationVariables = Exact<{
  input: AddHouseholdMembersToEnrollmentInput;
}>;

export type AddHouseholdMembersMutation = {
  __typename?: 'Mutation';
  addHouseholdMembersToEnrollment?: {
    __typename?: 'AddHouseholdMembersToEnrollmentPayload';
    clientMutationId?: string | null;
    enrollments?: Array<{
      __typename?: 'Enrollment';
      id: string;
      entryDate: string;
      exitDate?: string | null;
      inProgress: boolean;
      household: {
        __typename?: 'Household';
        id: string;
        householdClients: Array<{
          __typename?: 'HouseholdClient';
          id: string;
          relationshipToHoH: RelationshipToHoH;
          client: {
            __typename?: 'Client';
            id: string;
            dob?: string | null;
            firstName?: string | null;
            middleName?: string | null;
            preferredName?: string | null;
            lastName?: string | null;
            nameSuffix?: string | null;
          };
          enrollment: {
            __typename?: 'Enrollment';
            id: string;
            entryDate: string;
            exitDate?: string | null;
            inProgress: boolean;
          };
        }>;
      };
      project: {
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
      };
      client: { __typename?: 'Client'; id: string };
    }> | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type GetEnrollmentQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEnrollmentQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
    household: { __typename?: 'Household'; id: string };
    client: { __typename?: 'Client'; id: string };
  } | null;
};

export type GetEnrollmentWithHoHQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEnrollmentWithHoHQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    entryDate: string;
    exitDate?: string | null;
    inProgress: boolean;
    household: {
      __typename?: 'Household';
      id: string;
      householdClients: Array<{
        __typename?: 'HouseholdClient';
        id: string;
        relationshipToHoH: RelationshipToHoH;
        client: {
          __typename?: 'Client';
          id: string;
          dob?: string | null;
          firstName?: string | null;
          middleName?: string | null;
          preferredName?: string | null;
          lastName?: string | null;
          nameSuffix?: string | null;
        };
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          entryDate: string;
          exitDate?: string | null;
          inProgress: boolean;
        };
      }>;
    };
    project: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
    };
    client: { __typename?: 'Client'; id: string };
  } | null;
};

export type GetEnrollmentEventsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetEnrollmentEventsQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    events: {
      __typename?: 'EventsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Event';
        id: string;
        event: EventType;
        eventDate: string;
        locationCrisisOrPhHousing?: string | null;
        probSolDivRrResult?: boolean | null;
        referralCaseManageAfter?: boolean | null;
        referralResult?: ReferralResult | null;
        resultDate?: string | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
      }>;
    };
  } | null;
};

export type GetEnrollmentServicesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetEnrollmentServicesQuery = {
  __typename?: 'Query';
  enrollment?: {
    __typename?: 'Enrollment';
    id: string;
    services: {
      __typename?: 'ServicesPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Service';
        id: string;
        dateProvided: string;
        movingOnOtherType?: string | null;
        recordType: RecordType;
        referralOutcome?: PathReferralOutcome | null;
        subTypeProvided?: ServiceSubTypeProvided | null;
        typeProvided: ServiceTypeProvided;
        otherTypeProvided?: string | null;
        dateCreated: string;
        dateUpdated: string;
        dateDeleted?: string | null;
      }>;
    };
  } | null;
};

export type GetClientHouseholdMemberCandidatesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetClientHouseholdMemberCandidatesQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        household: {
          __typename?: 'Household';
          householdClients: Array<{
            __typename?: 'HouseholdClient';
            client: {
              __typename?: 'Client';
              id: string;
              dob?: string | null;
              dobDataQuality: DobDataQuality;
              ethnicity: Ethnicity;
              gender: Array<Gender>;
              nameDataQuality: NameDataQuality;
              personalId: string;
              race: Array<Race>;
              ssn?: string | null;
              ssnDataQuality: SsnDataQuality;
              veteranStatus: NoYesReasonsForMissingData;
              dateCreated: string;
              dateDeleted?: string | null;
              dateUpdated: string;
              firstName?: string | null;
              middleName?: string | null;
              preferredName?: string | null;
              lastName?: string | null;
              nameSuffix?: string | null;
            };
          }>;
        };
      }>;
    };
  } | null;
};

export type GetRecentIncomeBenefitsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetRecentIncomeBenefitsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    incomeBenefits: {
      __typename?: 'IncomeBenefitsPaginated';
      nodesCount: number;
      nodes: Array<{
        __typename: 'IncomeBenefit';
        adap?: NoYesReasonsForMissingData | null;
        alimonyAmount?: number | null;
        benefitsFromAnySource?: NoYesReasonsForMissingData | null;
        childSupportAmount?: number | null;
        cobra?: boolean | null;
        connectionWithSoar?: NoYesReasonsForMissingData | null;
        dataCollectionStage: DataCollectionStage;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        earnedAmount?: number | null;
        employerProvided?: boolean | null;
        gaAmount?: number | null;
        hivaidsAssistance?: NoYesReasonsForMissingData | null;
        id: string;
        incomeFromAnySource?: NoYesReasonsForMissingData | null;
        indianHealthServices?: boolean | null;
        informationDate: string;
        insuranceFromAnySource?: NoYesReasonsForMissingData | null;
        medicaid?: boolean | null;
        medicare?: boolean | null;
        noAdapReason?: NoAssistanceReason | null;
        noCobraReason?: ReasonNotInsured | null;
        noEmployerProvidedReason?: ReasonNotInsured | null;
        noHivaidsAssistanceReason?: NoAssistanceReason | null;
        noIndianHealthServicesReason?: ReasonNotInsured | null;
        noMedicaidReason?: ReasonNotInsured | null;
        noMedicareReason?: ReasonNotInsured | null;
        noPrivatePayReason?: ReasonNotInsured | null;
        noRyanWhiteReason?: NoAssistanceReason | null;
        noSchipReason?: ReasonNotInsured | null;
        noStateHealthInsReason?: ReasonNotInsured | null;
        noVaMedReason?: ReasonNotInsured | null;
        otherBenefitsSource?: boolean | null;
        otherBenefitsSourceIdentify?: string | null;
        otherIncomeAmount?: number | null;
        otherIncomeSourceIdentify?: string | null;
        otherInsurance?: boolean | null;
        otherInsuranceIdentify?: string | null;
        otherTanf?: boolean | null;
        pensionAmount?: number | null;
        privateDisabilityAmount?: number | null;
        privatePay?: boolean | null;
        ryanWhiteMedDent?: NoYesReasonsForMissingData | null;
        schip?: boolean | null;
        snap?: boolean | null;
        socSecRetirementAmount?: number | null;
        ssdiAmount?: number | null;
        ssiAmount?: number | null;
        stateHealthIns?: boolean | null;
        tanfAmount?: number | null;
        tanfChildCare?: boolean | null;
        tanfTransportation?: boolean | null;
        totalMonthlyIncome?: string | null;
        unemploymentAmount?: number | null;
        vaDisabilityNonServiceAmount?: number | null;
        vaDisabilityServiceAmount?: number | null;
        vaMedicalServices?: boolean | null;
        wic?: boolean | null;
        workersCompAmount?: number | null;
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          project: {
            __typename?: 'Project';
            id: string;
            projectName: string;
            projectType?: ProjectType | null;
          };
        };
        user?: { __typename: 'User'; id: string; name: string } | null;
      }>;
    };
  } | null;
};

export type GetRecentDisabilitiesQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetRecentDisabilitiesQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    disabilityGroups: Array<{
      __typename: 'DisabilityGroup';
      id: string;
      dataCollectionStage: DataCollectionStage;
      informationDate: string;
      disablingCondition: NoYesReasonsForMissingData;
      chronicHealthCondition?: NoYesReasonsForMissingData | null;
      chronicHealthConditionIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      developmentalDisability?: NoYesReasonsForMissingData | null;
      hivAids?: NoYesReasonsForMissingData | null;
      mentalHealthDisorder?: NoYesReasonsForMissingData | null;
      mentalHealthDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      physicalDisability?: NoYesReasonsForMissingData | null;
      physicalDisabilityIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      substanceUseDisorder?: DisabilityResponse | null;
      substanceUseDisorderIndefiniteAndImpairs?: NoYesReasonsForMissingData | null;
      enrollment: {
        __typename?: 'Enrollment';
        id: string;
        project: {
          __typename?: 'Project';
          id: string;
          projectName: string;
          projectType?: ProjectType | null;
        };
      };
      user?: { __typename: 'User'; id: string; name: string } | null;
    }>;
  } | null;
};

export type GetRecentHealthAndDvsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetRecentHealthAndDvsQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    healthAndDvs: {
      __typename?: 'HealthAndDvsPaginated';
      nodesCount: number;
      nodes: Array<{
        __typename: 'HealthAndDv';
        bounceBack?: WellbeingAgreement | null;
        currentlyFleeing?: NoYesReasonsForMissingData | null;
        dataCollectionStage: DataCollectionStage;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        dentalHealthStatus?: HealthStatus | null;
        domesticViolenceVictim?: NoYesReasonsForMissingData | null;
        dueDate?: string | null;
        feelingFrequency?: FeelingFrequency | null;
        generalHealthStatus?: HealthStatus | null;
        id: string;
        informationDate: string;
        lifeValue?: WellbeingAgreement | null;
        mentalHealthStatus?: HealthStatus | null;
        pregnancyStatus?: NoYesReasonsForMissingData | null;
        supportFromOthers?: WellbeingAgreement | null;
        whenOccurred?: WhenDvOccurred | null;
        enrollment: {
          __typename?: 'Enrollment';
          id: string;
          project: {
            __typename?: 'Project';
            id: string;
            projectName: string;
            projectType?: ProjectType | null;
          };
        };
        user?: { __typename: 'User'; id: string; name: string } | null;
      }>;
    };
  } | null;
};

export type ProjectFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType?: ProjectType | null;
  organization: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  };
};

export type OrganizationFieldsFragment = {
  __typename?: 'Organization';
  id: string;
  organizationName: string;
};

export type OrganizationDetailFieldsFragment = {
  __typename?: 'Organization';
  description?: string | null;
  contactInformation?: string | null;
  victimServiceProvider?: boolean | null;
};

export type OrganizationAllFieldsFragment = {
  __typename?: 'Organization';
  id: string;
  organizationName: string;
  description?: string | null;
  contactInformation?: string | null;
  victimServiceProvider?: boolean | null;
};

export type ProjectAllFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType?: ProjectType | null;
  HMISParticipatingProject?: boolean | null;
  HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
  contactInformation?: string | null;
  continuumProject?: boolean | null;
  description?: string | null;
  housingType?: HousingType | null;
  operatingEndDate?: string | null;
  operatingStartDate: string;
  residentialAffiliation?: boolean | null;
  targetPopulation?: TargetPopulation | null;
  trackingMethod?: TrackingMethod | null;
  organization: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  };
};

export type InventoryFieldsFragment = {
  __typename?: 'Inventory';
  availability?: Availability | null;
  bedInventory: number;
  chBedInventory?: number | null;
  chVetBedInventory?: number | null;
  chYouthBedInventory?: number | null;
  cocCode: string;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  esBedType?: BedType | null;
  householdType: HouseholdType;
  id: string;
  inventoryEndDate?: string | null;
  inventoryStartDate: string;
  otherBedInventory?: number | null;
  unitInventory: number;
  vetBedInventory?: number | null;
  youthBedInventory?: number | null;
  youthVetBedInventory?: number | null;
};

export type ProjectCocFieldsFragment = {
  __typename?: 'ProjectCoc';
  address1?: string | null;
  address2?: string | null;
  city?: string | null;
  cocCode: string;
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  geocode: string;
  geographyType?: GeographyType | null;
  id: string;
  state?: string | null;
  zip?: string | null;
};

export type FunderFieldsFragment = {
  __typename?: 'Funder';
  dateCreated: string;
  dateDeleted?: string | null;
  dateUpdated: string;
  endDate?: string | null;
  funder: FundingSource;
  grantId: string;
  id: string;
  otherFunder?: string | null;
  startDate: string;
};

export type GetAllOrganizationsQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllOrganizationsQuery = {
  __typename?: 'Query';
  organizations: {
    __typename?: 'OrganizationsPaginated';
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Organization';
      id: string;
      organizationName: string;
      projects: { __typename?: 'ProjectsPaginated'; nodesCount: number };
    }>;
  };
};

export type GetProjectQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetProjectQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType?: ProjectType | null;
    HMISParticipatingProject?: boolean | null;
    HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
    contactInformation?: string | null;
    continuumProject?: boolean | null;
    description?: string | null;
    housingType?: HousingType | null;
    operatingEndDate?: string | null;
    operatingStartDate: string;
    residentialAffiliation?: boolean | null;
    targetPopulation?: TargetPopulation | null;
    trackingMethod?: TrackingMethod | null;
    organization: {
      __typename?: 'Organization';
      id: string;
      organizationName: string;
    };
  } | null;
};

export type DeleteProjectMutationVariables = Exact<{
  input: DeleteProjectInput;
}>;

export type DeleteProjectMutation = {
  __typename?: 'Mutation';
  deleteProject?: {
    __typename?: 'DeleteProjectPayload';
    clientMutationId?: string | null;
    project?: { __typename?: 'Project'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type GetFunderQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetFunderQuery = {
  __typename?: 'Query';
  funder?: {
    __typename?: 'Funder';
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    endDate?: string | null;
    funder: FundingSource;
    grantId: string;
    id: string;
    otherFunder?: string | null;
    startDate: string;
  } | null;
};

export type GetInventoryQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryQuery = {
  __typename?: 'Query';
  inventory?: {
    __typename?: 'Inventory';
    availability?: Availability | null;
    bedInventory: number;
    chBedInventory?: number | null;
    chVetBedInventory?: number | null;
    chYouthBedInventory?: number | null;
    cocCode: string;
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    esBedType?: BedType | null;
    householdType: HouseholdType;
    id: string;
    inventoryEndDate?: string | null;
    inventoryStartDate: string;
    otherBedInventory?: number | null;
    unitInventory: number;
    vetBedInventory?: number | null;
    youthBedInventory?: number | null;
    youthVetBedInventory?: number | null;
  } | null;
};

export type GetProjectCocQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetProjectCocQuery = {
  __typename?: 'Query';
  projectCoc?: {
    __typename?: 'ProjectCoc';
    address1?: string | null;
    address2?: string | null;
    city?: string | null;
    cocCode: string;
    dateCreated: string;
    dateDeleted?: string | null;
    dateUpdated: string;
    geocode: string;
    geographyType?: GeographyType | null;
    id: string;
    state?: string | null;
    zip?: string | null;
  } | null;
};

export type GetOrganizationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOrganizationQuery = {
  __typename?: 'Query';
  organization?: {
    __typename?: 'Organization';
    id: string;
    organizationName: string;
    description?: string | null;
    contactInformation?: string | null;
    victimServiceProvider?: boolean | null;
  } | null;
};

export type DeleteOrganizationMutationVariables = Exact<{
  input: DeleteOrganizationInput;
}>;

export type DeleteOrganizationMutation = {
  __typename?: 'Mutation';
  deleteOrganization?: {
    __typename?: 'DeleteOrganizationPayload';
    clientMutationId?: string | null;
    organization?: { __typename?: 'Organization'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type GetOrganizationWithPaginatedProjectsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetOrganizationWithPaginatedProjectsQuery = {
  __typename?: 'Query';
  organization?: {
    __typename?: 'Organization';
    id: string;
    projects: {
      __typename?: 'ProjectsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Project';
        id: string;
        projectName: string;
        projectType?: ProjectType | null;
        HMISParticipatingProject?: boolean | null;
        HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
        contactInformation?: string | null;
        continuumProject?: boolean | null;
        description?: string | null;
        housingType?: HousingType | null;
        operatingEndDate?: string | null;
        operatingStartDate: string;
        residentialAffiliation?: boolean | null;
        targetPopulation?: TargetPopulation | null;
        trackingMethod?: TrackingMethod | null;
        organization: {
          __typename?: 'Organization';
          id: string;
          organizationName: string;
        };
      }>;
    };
  } | null;
};

export type CreateProjectMutationVariables = Exact<{
  input: CreateProjectInput;
}>;

export type CreateProjectMutation = {
  __typename?: 'Mutation';
  createProject?: {
    __typename?: 'CreateProjectPayload';
    clientMutationId?: string | null;
    project?: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
      HMISParticipatingProject?: boolean | null;
      HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
      contactInformation?: string | null;
      continuumProject?: boolean | null;
      description?: string | null;
      housingType?: HousingType | null;
      operatingEndDate?: string | null;
      operatingStartDate: string;
      residentialAffiliation?: boolean | null;
      targetPopulation?: TargetPopulation | null;
      trackingMethod?: TrackingMethod | null;
      organization: {
        __typename?: 'Organization';
        id: string;
        organizationName: string;
      };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateProjectMutationVariables = Exact<{
  input: UpdateProjectInput;
}>;

export type UpdateProjectMutation = {
  __typename?: 'Mutation';
  updateProject?: {
    __typename?: 'UpdateProjectPayload';
    clientMutationId?: string | null;
    project?: {
      __typename?: 'Project';
      id: string;
      projectName: string;
      projectType?: ProjectType | null;
      HMISParticipatingProject?: boolean | null;
      HOPWAMedAssistedLivingFac?: HopwaMedAssistedLivingFac | null;
      contactInformation?: string | null;
      continuumProject?: boolean | null;
      description?: string | null;
      housingType?: HousingType | null;
      operatingEndDate?: string | null;
      operatingStartDate: string;
      residentialAffiliation?: boolean | null;
      targetPopulation?: TargetPopulation | null;
      trackingMethod?: TrackingMethod | null;
      organization: {
        __typename?: 'Organization';
        id: string;
        organizationName: string;
      };
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type CreateOrganizationMutationVariables = Exact<{
  input: CreateOrganizationInput;
}>;

export type CreateOrganizationMutation = {
  __typename?: 'Mutation';
  createOrganization?: {
    __typename?: 'CreateOrganizationPayload';
    clientMutationId?: string | null;
    organization?: {
      __typename?: 'Organization';
      id: string;
      organizationName: string;
      description?: string | null;
      contactInformation?: string | null;
      victimServiceProvider?: boolean | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateOrganizationMutationVariables = Exact<{
  input: UpdateOrganizationInput;
}>;

export type UpdateOrganizationMutation = {
  __typename?: 'Mutation';
  updateOrganization?: {
    __typename?: 'UpdateOrganizationPayload';
    clientMutationId?: string | null;
    organization?: {
      __typename?: 'Organization';
      id: string;
      organizationName: string;
      description?: string | null;
      contactInformation?: string | null;
      victimServiceProvider?: boolean | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type GetProjectInventoriesQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetProjectInventoriesQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    inventories: {
      __typename?: 'InventoriesPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Inventory';
        availability?: Availability | null;
        bedInventory: number;
        chBedInventory?: number | null;
        chVetBedInventory?: number | null;
        chYouthBedInventory?: number | null;
        cocCode: string;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        esBedType?: BedType | null;
        householdType: HouseholdType;
        id: string;
        inventoryEndDate?: string | null;
        inventoryStartDate: string;
        otherBedInventory?: number | null;
        unitInventory: number;
        vetBedInventory?: number | null;
        youthBedInventory?: number | null;
        youthVetBedInventory?: number | null;
      }>;
    };
  } | null;
};

export type GetProjectProjectCocsQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetProjectProjectCocsQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    projectCocs: {
      __typename?: 'ProjectCocsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'ProjectCoc';
        address1?: string | null;
        address2?: string | null;
        city?: string | null;
        cocCode: string;
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        geocode: string;
        geographyType?: GeographyType | null;
        id: string;
        state?: string | null;
        zip?: string | null;
      }>;
    };
  } | null;
};

export type GetProjectFundersQueryVariables = Exact<{
  id: Scalars['ID'];
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type GetProjectFundersQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    funders: {
      __typename?: 'FundersPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Funder';
        dateCreated: string;
        dateDeleted?: string | null;
        dateUpdated: string;
        endDate?: string | null;
        funder: FundingSource;
        grantId: string;
        id: string;
        otherFunder?: string | null;
        startDate: string;
      }>;
    };
  } | null;
};

export type CreateInventoryMutationVariables = Exact<{
  input: CreateInventoryInput;
}>;

export type CreateInventoryMutation = {
  __typename?: 'Mutation';
  createInventory?: {
    __typename?: 'CreateInventoryPayload';
    clientMutationId?: string | null;
    inventory?: {
      __typename?: 'Inventory';
      availability?: Availability | null;
      bedInventory: number;
      chBedInventory?: number | null;
      chVetBedInventory?: number | null;
      chYouthBedInventory?: number | null;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      esBedType?: BedType | null;
      householdType: HouseholdType;
      id: string;
      inventoryEndDate?: string | null;
      inventoryStartDate: string;
      otherBedInventory?: number | null;
      unitInventory: number;
      vetBedInventory?: number | null;
      youthBedInventory?: number | null;
      youthVetBedInventory?: number | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateInventoryMutationVariables = Exact<{
  input: UpdateInventoryInput;
}>;

export type UpdateInventoryMutation = {
  __typename?: 'Mutation';
  updateInventory?: {
    __typename?: 'UpdateInventoryPayload';
    clientMutationId?: string | null;
    inventory?: {
      __typename?: 'Inventory';
      availability?: Availability | null;
      bedInventory: number;
      chBedInventory?: number | null;
      chVetBedInventory?: number | null;
      chYouthBedInventory?: number | null;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      esBedType?: BedType | null;
      householdType: HouseholdType;
      id: string;
      inventoryEndDate?: string | null;
      inventoryStartDate: string;
      otherBedInventory?: number | null;
      unitInventory: number;
      vetBedInventory?: number | null;
      youthBedInventory?: number | null;
      youthVetBedInventory?: number | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type DeleteInventoryMutationVariables = Exact<{
  input: DeleteInventoryInput;
}>;

export type DeleteInventoryMutation = {
  __typename?: 'Mutation';
  deleteInventory?: {
    __typename?: 'DeleteInventoryPayload';
    clientMutationId?: string | null;
    inventory?: { __typename?: 'Inventory'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type CreateFunderMutationVariables = Exact<{
  input: CreateFunderInput;
}>;

export type CreateFunderMutation = {
  __typename?: 'Mutation';
  createFunder?: {
    __typename?: 'CreateFunderPayload';
    clientMutationId?: string | null;
    funder?: {
      __typename?: 'Funder';
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      endDate?: string | null;
      funder: FundingSource;
      grantId: string;
      id: string;
      otherFunder?: string | null;
      startDate: string;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateFunderMutationVariables = Exact<{
  input: UpdateFunderInput;
}>;

export type UpdateFunderMutation = {
  __typename?: 'Mutation';
  updateFunder?: {
    __typename?: 'UpdateFunderPayload';
    clientMutationId?: string | null;
    funder?: {
      __typename?: 'Funder';
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      endDate?: string | null;
      funder: FundingSource;
      grantId: string;
      id: string;
      otherFunder?: string | null;
      startDate: string;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type DeleteFunderMutationVariables = Exact<{
  input: DeleteFunderInput;
}>;

export type DeleteFunderMutation = {
  __typename?: 'Mutation';
  deleteFunder?: {
    __typename?: 'DeleteFunderPayload';
    clientMutationId?: string | null;
    funder?: { __typename?: 'Funder'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type CreateProjectCocMutationVariables = Exact<{
  input: CreateProjectCocInput;
}>;

export type CreateProjectCocMutation = {
  __typename?: 'Mutation';
  createProjectCoc?: {
    __typename?: 'CreateProjectCocPayload';
    clientMutationId?: string | null;
    projectCoc?: {
      __typename?: 'ProjectCoc';
      address1?: string | null;
      address2?: string | null;
      city?: string | null;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      geocode: string;
      geographyType?: GeographyType | null;
      id: string;
      state?: string | null;
      zip?: string | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type UpdateProjectCocMutationVariables = Exact<{
  input: UpdateProjectCocInput;
}>;

export type UpdateProjectCocMutation = {
  __typename?: 'Mutation';
  updateProjectCoc?: {
    __typename?: 'UpdateProjectCocPayload';
    clientMutationId?: string | null;
    projectCoc?: {
      __typename?: 'ProjectCoc';
      address1?: string | null;
      address2?: string | null;
      city?: string | null;
      cocCode: string;
      dateCreated: string;
      dateDeleted?: string | null;
      dateUpdated: string;
      geocode: string;
      geographyType?: GeographyType | null;
      id: string;
      state?: string | null;
      zip?: string | null;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export type DeleteProjectCocMutationVariables = Exact<{
  input: DeleteProjectCocInput;
}>;

export type DeleteProjectCocMutation = {
  __typename?: 'Mutation';
  deleteProjectCoc?: {
    __typename?: 'DeleteProjectCocPayload';
    clientMutationId?: string | null;
    projectCoc?: { __typename?: 'ProjectCoc'; id: string } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
      id?: string | null;
    }>;
  } | null;
};

export const UserFieldsFragmentDoc = gql`
  fragment UserFields on User {
    __typename
    id
    name
  }
`;
export const AssessmentDetailFieldsFragmentDoc = gql`
  fragment AssessmentDetailFields on AssessmentDetail {
    id
    dataCollectionStage
    role
    status
  }
`;
export const FormDefinitionFieldsFragmentDoc = gql`
  fragment FormDefinitionFields on FormDefinition {
    id
    version
    role
    status
    identifier
  }
`;
export const AssessmentFieldsFragmentDoc = gql`
  fragment AssessmentFields on Assessment {
    id
    inProgress
    assessmentDate
    assessmentLevel
    assessmentLocation
    assessmentType
    prioritizationStatus
    dateCreated
    dateUpdated
    dateDeleted
    user {
      ...UserFields
    }
    assessmentDetail {
      ...AssessmentDetailFields
      definition {
        ...FormDefinitionFields
      }
    }
  }
  ${UserFieldsFragmentDoc}
  ${AssessmentDetailFieldsFragmentDoc}
  ${FormDefinitionFieldsFragmentDoc}
`;
export const PickListOptionFieldsFragmentDoc = gql`
  fragment PickListOptionFields on PickListOption {
    code
    label
    secondaryLabel
    groupLabel
    groupCode
    initialSelected
  }
`;
export const EnableWhenFieldsFragmentDoc = gql`
  fragment EnableWhenFields on EnableWhen {
    question
    operator
    answerCode
    answerCodes
    answerNumber
    answerBoolean
    answerGroupCode
    compareQuestion
  }
`;
export const ItemFieldsFragmentDoc = gql`
  fragment ItemFields on FormItem {
    __typename
    linkId
    type
    component
    prefix
    text
    helperText
    required
    hidden
    readOnly
    repeats
    fieldName
    recordType
    pickListReference
    bounds {
      type
      question
      valueNumber
      valueDate
    }
    pickListOptions {
      ...PickListOptionFields
    }
    initial {
      valueCode
      valueBoolean
      valueNumber
      valueLocalConstant
    }
    dataCollectedAbout
    disabledDisplay
    enableBehavior
    enableWhen {
      ...EnableWhenFields
    }
    autofillValues {
      valueCode
      valueBoolean
      valueNumber
      autofillBehavior
      autofillWhen {
        ...EnableWhenFields
      }
    }
  }
  ${PickListOptionFieldsFragmentDoc}
  ${EnableWhenFieldsFragmentDoc}
`;
export const FormDefinitionWithJsonFragmentDoc = gql`
  fragment FormDefinitionWithJson on FormDefinition {
    ...FormDefinitionFields
    definition {
      __typename
      item {
        ...ItemFields
        item {
          ...ItemFields
          item {
            ...ItemFields
            item {
              ...ItemFields
              item {
                ...ItemFields
              }
            }
          }
        }
      }
    }
  }
  ${FormDefinitionFieldsFragmentDoc}
  ${ItemFieldsFragmentDoc}
`;
export const AssessmentWithDefinitionAndValuesFragmentDoc = gql`
  fragment AssessmentWithDefinitionAndValues on Assessment {
    ...AssessmentFields
    assessmentDetail {
      ...AssessmentDetailFields
      values
      definition {
        ...FormDefinitionWithJson
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
  ${AssessmentDetailFieldsFragmentDoc}
  ${FormDefinitionWithJsonFragmentDoc}
`;
export const ValidationErrorFieldsFragmentDoc = gql`
  fragment ValidationErrorFields on ValidationError {
    type
    attribute
    message
    fullMessage
    id
  }
`;
export const ClientNameFragmentDoc = gql`
  fragment ClientName on Client {
    firstName
    middleName
    preferredName
    lastName
    nameSuffix
  }
`;
export const ClientFieldsFragmentDoc = gql`
  fragment ClientFields on Client {
    id
    dob
    dobDataQuality
    ethnicity
    gender
    nameDataQuality
    personalId
    race
    ssn
    ssnDataQuality
    veteranStatus
    dateCreated
    dateDeleted
    dateUpdated
    ...ClientName
  }
  ${ClientNameFragmentDoc}
`;
export const EnrollmentFieldsFromAssessmentFragmentDoc = gql`
  fragment EnrollmentFieldsFromAssessment on Enrollment {
    id
    entryDate
    exitDate
    livingSituation
    lengthOfStay
    previousStreetEssh
    dateToStreetEssh
    timesHomelessPastThreeYears
    monthsHomelessPastThreeYears
    project {
      id
      projectName
      projectType
    }
    user {
      ...UserFields
    }
  }
  ${UserFieldsFragmentDoc}
`;
export const EnrollmentFieldsFragmentDoc = gql`
  fragment EnrollmentFields on Enrollment {
    id
    entryDate
    exitDate
    project {
      id
      projectName
      projectType
    }
    inProgress
    household {
      id
    }
    client {
      id
    }
  }
`;
export const HouseholdClientFieldsFragmentDoc = gql`
  fragment HouseholdClientFields on HouseholdClient {
    id
    relationshipToHoH
    client {
      id
      ...ClientName
      dob
    }
    enrollment {
      id
      entryDate
      exitDate
      inProgress
    }
  }
  ${ClientNameFragmentDoc}
`;
export const EnrollmentWithHoHFragmentFragmentDoc = gql`
  fragment EnrollmentWithHoHFragment on Enrollment {
    ...EnrollmentFields
    household {
      id
      householdClients {
        ...HouseholdClientFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${HouseholdClientFieldsFragmentDoc}
`;
export const EventFieldsFragmentDoc = gql`
  fragment EventFields on Event {
    id
    event
    eventDate
    locationCrisisOrPhHousing
    probSolDivRrResult
    referralCaseManageAfter
    referralResult
    resultDate
    dateCreated
    dateUpdated
    dateDeleted
  }
`;
export const ServiceFieldsFragmentDoc = gql`
  fragment ServiceFields on Service {
    id
    dateProvided
    movingOnOtherType
    recordType
    referralOutcome
    subTypeProvided
    typeProvided
    otherTypeProvided
    dateCreated
    dateUpdated
    dateDeleted
  }
`;
export const IncomeBenefitFieldsFragmentDoc = gql`
  fragment IncomeBenefitFields on IncomeBenefit {
    __typename
    adap
    alimonyAmount
    benefitsFromAnySource
    childSupportAmount
    cobra
    connectionWithSoar
    dataCollectionStage
    dateCreated
    dateDeleted
    dateUpdated
    earnedAmount
    employerProvided
    enrollment {
      id
      project {
        id
        projectName
        projectType
      }
    }
    gaAmount
    hivaidsAssistance
    id
    incomeFromAnySource
    indianHealthServices
    informationDate
    insuranceFromAnySource
    medicaid
    medicare
    noAdapReason
    noCobraReason
    noEmployerProvidedReason
    noHivaidsAssistanceReason
    noIndianHealthServicesReason
    noMedicaidReason
    noMedicareReason
    noPrivatePayReason
    noRyanWhiteReason
    noSchipReason
    noStateHealthInsReason
    noVaMedReason
    otherBenefitsSource
    otherBenefitsSourceIdentify
    otherIncomeAmount
    otherIncomeSourceIdentify
    otherInsurance
    otherInsuranceIdentify
    otherTanf
    pensionAmount
    privateDisabilityAmount
    privatePay
    ryanWhiteMedDent
    schip
    snap
    socSecRetirementAmount
    ssdiAmount
    ssiAmount
    stateHealthIns
    tanfAmount
    tanfChildCare
    tanfTransportation
    totalMonthlyIncome
    unemploymentAmount
    user {
      ...UserFields
    }
    vaDisabilityNonServiceAmount
    vaDisabilityServiceAmount
    vaMedicalServices
    wic
    workersCompAmount
  }
  ${UserFieldsFragmentDoc}
`;
export const DisabilityGroupFieldsFragmentDoc = gql`
  fragment DisabilityGroupFields on DisabilityGroup {
    __typename
    id
    dataCollectionStage
    informationDate
    enrollment {
      id
      project {
        id
        projectName
        projectType
      }
    }
    user {
      ...UserFields
    }
    disablingCondition
    chronicHealthCondition
    chronicHealthConditionIndefiniteAndImpairs
    developmentalDisability
    hivAids
    mentalHealthDisorder
    mentalHealthDisorderIndefiniteAndImpairs
    physicalDisability
    physicalDisabilityIndefiniteAndImpairs
    substanceUseDisorder
    substanceUseDisorderIndefiniteAndImpairs
  }
  ${UserFieldsFragmentDoc}
`;
export const HealthAndDvFieldsFragmentDoc = gql`
  fragment HealthAndDvFields on HealthAndDv {
    __typename
    bounceBack
    currentlyFleeing
    dataCollectionStage
    dateCreated
    dateDeleted
    dateUpdated
    dentalHealthStatus
    domesticViolenceVictim
    dueDate
    enrollment {
      id
      project {
        id
        projectName
        projectType
      }
    }
    feelingFrequency
    generalHealthStatus
    id
    informationDate
    lifeValue
    mentalHealthStatus
    pregnancyStatus
    supportFromOthers
    user {
      ...UserFields
    }
    whenOccurred
  }
  ${UserFieldsFragmentDoc}
`;
export const ProjectFieldsFragmentDoc = gql`
  fragment ProjectFields on Project {
    id
    projectName
    projectType
    organization {
      id
      organizationName
    }
  }
`;
export const OrganizationFieldsFragmentDoc = gql`
  fragment OrganizationFields on Organization {
    id
    organizationName
  }
`;
export const OrganizationDetailFieldsFragmentDoc = gql`
  fragment OrganizationDetailFields on Organization {
    description
    contactInformation
    victimServiceProvider
  }
`;
export const OrganizationAllFieldsFragmentDoc = gql`
  fragment OrganizationAllFields on Organization {
    ...OrganizationFields
    ...OrganizationDetailFields
  }
  ${OrganizationFieldsFragmentDoc}
  ${OrganizationDetailFieldsFragmentDoc}
`;
export const ProjectAllFieldsFragmentDoc = gql`
  fragment ProjectAllFields on Project {
    id
    projectName
    projectType
    HMISParticipatingProject
    HOPWAMedAssistedLivingFac
    contactInformation
    continuumProject
    description
    housingType
    operatingEndDate
    operatingStartDate
    residentialAffiliation
    targetPopulation
    trackingMethod
    organization {
      id
      organizationName
    }
  }
`;
export const InventoryFieldsFragmentDoc = gql`
  fragment InventoryFields on Inventory {
    availability
    bedInventory
    chBedInventory
    chVetBedInventory
    chYouthBedInventory
    cocCode
    dateCreated
    dateDeleted
    dateUpdated
    esBedType
    householdType
    id
    inventoryEndDate
    inventoryStartDate
    otherBedInventory
    unitInventory
    vetBedInventory
    youthBedInventory
    youthVetBedInventory
  }
`;
export const ProjectCocFieldsFragmentDoc = gql`
  fragment ProjectCocFields on ProjectCoc {
    address1
    address2
    city
    cocCode
    dateCreated
    dateDeleted
    dateUpdated
    geocode
    geographyType
    id
    state
    zip
  }
`;
export const FunderFieldsFragmentDoc = gql`
  fragment FunderFields on Funder {
    dateCreated
    dateDeleted
    dateUpdated
    endDate
    funder
    grantId
    id
    otherFunder
    startDate
  }
`;
export const GetAssessmentDocument = gql`
  query GetAssessment($id: ID!) {
    assessment(id: $id) {
      ...AssessmentWithDefinitionAndValues
    }
  }
  ${AssessmentWithDefinitionAndValuesFragmentDoc}
`;

/**
 * __useGetAssessmentQuery__
 *
 * To run a query within a React component, call `useGetAssessmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAssessmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAssessmentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAssessmentQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAssessmentQuery,
    GetAssessmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetAssessmentQuery, GetAssessmentQueryVariables>(
    GetAssessmentDocument,
    options
  );
}
export function useGetAssessmentLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAssessmentQuery,
    GetAssessmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetAssessmentQuery, GetAssessmentQueryVariables>(
    GetAssessmentDocument,
    options
  );
}
export type GetAssessmentQueryHookResult = ReturnType<
  typeof useGetAssessmentQuery
>;
export type GetAssessmentLazyQueryHookResult = ReturnType<
  typeof useGetAssessmentLazyQuery
>;
export type GetAssessmentQueryResult = Apollo.QueryResult<
  GetAssessmentQuery,
  GetAssessmentQueryVariables
>;
export const GetPickListDocument = gql`
  query GetPickList($pickListType: PickListType!) {
    pickList(pickListType: $pickListType) {
      ...PickListOptionFields
    }
  }
  ${PickListOptionFieldsFragmentDoc}
`;

/**
 * __useGetPickListQuery__
 *
 * To run a query within a React component, call `useGetPickListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPickListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPickListQuery({
 *   variables: {
 *      pickListType: // value for 'pickListType'
 *   },
 * });
 */
export function useGetPickListQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetPickListQuery,
    GetPickListQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetPickListQuery, GetPickListQueryVariables>(
    GetPickListDocument,
    options
  );
}
export function useGetPickListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPickListQuery,
    GetPickListQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetPickListQuery, GetPickListQueryVariables>(
    GetPickListDocument,
    options
  );
}
export type GetPickListQueryHookResult = ReturnType<typeof useGetPickListQuery>;
export type GetPickListLazyQueryHookResult = ReturnType<
  typeof useGetPickListLazyQuery
>;
export type GetPickListQueryResult = Apollo.QueryResult<
  GetPickListQuery,
  GetPickListQueryVariables
>;
export const GetEnrollmentAssessmentsDocument = gql`
  query GetEnrollmentAssessments(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
    $role: AssessmentRole
  ) {
    enrollment(id: $id) {
      id
      assessments(
        limit: $limit
        offset: $offset
        role: $role
        sortOrder: ASSESSMENT_DATE
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...AssessmentFields
        }
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentAssessmentsQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentAssessmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentAssessmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentAssessmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      role: // value for 'role'
 *   },
 * });
 */
export function useGetEnrollmentAssessmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >(GetEnrollmentAssessmentsDocument, options);
}
export function useGetEnrollmentAssessmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentAssessmentsQuery,
    GetEnrollmentAssessmentsQueryVariables
  >(GetEnrollmentAssessmentsDocument, options);
}
export type GetEnrollmentAssessmentsQueryHookResult = ReturnType<
  typeof useGetEnrollmentAssessmentsQuery
>;
export type GetEnrollmentAssessmentsLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentAssessmentsLazyQuery
>;
export type GetEnrollmentAssessmentsQueryResult = Apollo.QueryResult<
  GetEnrollmentAssessmentsQuery,
  GetEnrollmentAssessmentsQueryVariables
>;
export const GetFormDefinitionByIdentifierDocument = gql`
  query GetFormDefinitionByIdentifier($identifier: String!) {
    formDefinition(identifier: $identifier) {
      ...FormDefinitionWithJson
    }
  }
  ${FormDefinitionWithJsonFragmentDoc}
`;

/**
 * __useGetFormDefinitionByIdentifierQuery__
 *
 * To run a query within a React component, call `useGetFormDefinitionByIdentifierQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFormDefinitionByIdentifierQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFormDefinitionByIdentifierQuery({
 *   variables: {
 *      identifier: // value for 'identifier'
 *   },
 * });
 */
export function useGetFormDefinitionByIdentifierQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFormDefinitionByIdentifierQuery,
    GetFormDefinitionByIdentifierQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFormDefinitionByIdentifierQuery,
    GetFormDefinitionByIdentifierQueryVariables
  >(GetFormDefinitionByIdentifierDocument, options);
}
export function useGetFormDefinitionByIdentifierLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFormDefinitionByIdentifierQuery,
    GetFormDefinitionByIdentifierQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFormDefinitionByIdentifierQuery,
    GetFormDefinitionByIdentifierQueryVariables
  >(GetFormDefinitionByIdentifierDocument, options);
}
export type GetFormDefinitionByIdentifierQueryHookResult = ReturnType<
  typeof useGetFormDefinitionByIdentifierQuery
>;
export type GetFormDefinitionByIdentifierLazyQueryHookResult = ReturnType<
  typeof useGetFormDefinitionByIdentifierLazyQuery
>;
export type GetFormDefinitionByIdentifierQueryResult = Apollo.QueryResult<
  GetFormDefinitionByIdentifierQuery,
  GetFormDefinitionByIdentifierQueryVariables
>;
export const GetFormDefinitionDocument = gql`
  query GetFormDefinition(
    $enrollmentId: ID!
    $assessmentRole: AssessmentRole!
  ) {
    getFormDefinition(
      enrollmentId: $enrollmentId
      assessmentRole: $assessmentRole
    ) {
      ...FormDefinitionWithJson
    }
  }
  ${FormDefinitionWithJsonFragmentDoc}
`;

/**
 * __useGetFormDefinitionQuery__
 *
 * To run a query within a React component, call `useGetFormDefinitionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFormDefinitionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFormDefinitionQuery({
 *   variables: {
 *      enrollmentId: // value for 'enrollmentId'
 *      assessmentRole: // value for 'assessmentRole'
 *   },
 * });
 */
export function useGetFormDefinitionQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >(GetFormDefinitionDocument, options);
}
export function useGetFormDefinitionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFormDefinitionQuery,
    GetFormDefinitionQueryVariables
  >(GetFormDefinitionDocument, options);
}
export type GetFormDefinitionQueryHookResult = ReturnType<
  typeof useGetFormDefinitionQuery
>;
export type GetFormDefinitionLazyQueryHookResult = ReturnType<
  typeof useGetFormDefinitionLazyQuery
>;
export type GetFormDefinitionQueryResult = Apollo.QueryResult<
  GetFormDefinitionQuery,
  GetFormDefinitionQueryVariables
>;
export const SaveAssessmentDocument = gql`
  mutation SaveAssessment(
    $assessmentId: ID
    $enrollmentId: ID
    $formDefinitionId: ID
    $values: JsonObject!
    $assessmentDate: String
  ) {
    saveAssessment(
      input: {
        assessmentId: $assessmentId
        enrollmentId: $enrollmentId
        formDefinitionId: $formDefinitionId
        assessmentDate: $assessmentDate
        values: $values
      }
    ) {
      assessment {
        ...AssessmentWithDefinitionAndValues
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${AssessmentWithDefinitionAndValuesFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SaveAssessmentMutationFn = Apollo.MutationFunction<
  SaveAssessmentMutation,
  SaveAssessmentMutationVariables
>;

/**
 * __useSaveAssessmentMutation__
 *
 * To run a mutation, you first call `useSaveAssessmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveAssessmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveAssessmentMutation, { data, loading, error }] = useSaveAssessmentMutation({
 *   variables: {
 *      assessmentId: // value for 'assessmentId'
 *      enrollmentId: // value for 'enrollmentId'
 *      formDefinitionId: // value for 'formDefinitionId'
 *      values: // value for 'values'
 *      assessmentDate: // value for 'assessmentDate'
 *   },
 * });
 */
export function useSaveAssessmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SaveAssessmentMutation,
    SaveAssessmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    SaveAssessmentMutation,
    SaveAssessmentMutationVariables
  >(SaveAssessmentDocument, options);
}
export type SaveAssessmentMutationHookResult = ReturnType<
  typeof useSaveAssessmentMutation
>;
export type SaveAssessmentMutationResult =
  Apollo.MutationResult<SaveAssessmentMutation>;
export type SaveAssessmentMutationOptions = Apollo.BaseMutationOptions<
  SaveAssessmentMutation,
  SaveAssessmentMutationVariables
>;
export const SubmitAssessmentDocument = gql`
  mutation SubmitAssessment(
    $assessmentId: ID
    $enrollmentId: ID
    $formDefinitionId: ID
    $values: JsonObject!
    $hudValues: JsonObject
    $assessmentDate: String
  ) {
    submitAssessment(
      input: {
        assessmentId: $assessmentId
        enrollmentId: $enrollmentId
        formDefinitionId: $formDefinitionId
        assessmentDate: $assessmentDate
        values: $values
        hudValues: $hudValues
      }
    ) {
      assessment {
        ...AssessmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${AssessmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SubmitAssessmentMutationFn = Apollo.MutationFunction<
  SubmitAssessmentMutation,
  SubmitAssessmentMutationVariables
>;

/**
 * __useSubmitAssessmentMutation__
 *
 * To run a mutation, you first call `useSubmitAssessmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitAssessmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitAssessmentMutation, { data, loading, error }] = useSubmitAssessmentMutation({
 *   variables: {
 *      assessmentId: // value for 'assessmentId'
 *      enrollmentId: // value for 'enrollmentId'
 *      formDefinitionId: // value for 'formDefinitionId'
 *      values: // value for 'values'
 *      hudValues: // value for 'hudValues'
 *      assessmentDate: // value for 'assessmentDate'
 *   },
 * });
 */
export function useSubmitAssessmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SubmitAssessmentMutation,
    SubmitAssessmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    SubmitAssessmentMutation,
    SubmitAssessmentMutationVariables
  >(SubmitAssessmentDocument, options);
}
export type SubmitAssessmentMutationHookResult = ReturnType<
  typeof useSubmitAssessmentMutation
>;
export type SubmitAssessmentMutationResult =
  Apollo.MutationResult<SubmitAssessmentMutation>;
export type SubmitAssessmentMutationOptions = Apollo.BaseMutationOptions<
  SubmitAssessmentMutation,
  SubmitAssessmentMutationVariables
>;
export const SearchClientsDocument = gql`
  query SearchClients($input: ClientSearchInput!, $limit: Int, $offset: Int) {
    clientSearch(input: $input, limit: $limit, offset: $offset) {
      offset
      limit
      nodesCount
      nodes {
        ...ClientFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useSearchClientsQuery__
 *
 * To run a query within a React component, call `useSearchClientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchClientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchClientsQuery({
 *   variables: {
 *      input: // value for 'input'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useSearchClientsQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export function useSearchClientsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export type SearchClientsQueryHookResult = ReturnType<
  typeof useSearchClientsQuery
>;
export type SearchClientsLazyQueryHookResult = ReturnType<
  typeof useSearchClientsLazyQuery
>;
export type SearchClientsQueryResult = Apollo.QueryResult<
  SearchClientsQuery,
  SearchClientsQueryVariables
>;
export const GetClientDocument = gql`
  query GetClient($id: ID!) {
    client(id: $id) {
      ...ClientFields
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useGetClientQuery__
 *
 * To run a query within a React component, call `useGetClientQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClientQuery(
  baseOptions: Apollo.QueryHookOptions<GetClientQuery, GetClientQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export function useGetClientLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientQuery,
    GetClientQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export type GetClientQueryHookResult = ReturnType<typeof useGetClientQuery>;
export type GetClientLazyQueryHookResult = ReturnType<
  typeof useGetClientLazyQuery
>;
export type GetClientQueryResult = Apollo.QueryResult<
  GetClientQuery,
  GetClientQueryVariables
>;
export const GetClientEnrollmentsDocument = gql`
  query GetClientEnrollments($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      enrollments(
        limit: $limit
        offset: $offset
        sortOrder: MOST_RECENT
        includeInProgress: true
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...EnrollmentFields
        }
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetClientEnrollmentsQuery__
 *
 * To run a query within a React component, call `useGetClientEnrollmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientEnrollmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientEnrollmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientEnrollmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >(GetClientEnrollmentsDocument, options);
}
export function useGetClientEnrollmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientEnrollmentsQuery,
    GetClientEnrollmentsQueryVariables
  >(GetClientEnrollmentsDocument, options);
}
export type GetClientEnrollmentsQueryHookResult = ReturnType<
  typeof useGetClientEnrollmentsQuery
>;
export type GetClientEnrollmentsLazyQueryHookResult = ReturnType<
  typeof useGetClientEnrollmentsLazyQuery
>;
export type GetClientEnrollmentsQueryResult = Apollo.QueryResult<
  GetClientEnrollmentsQuery,
  GetClientEnrollmentsQueryVariables
>;
export const GetRecentEnrollmentsDocument = gql`
  query GetRecentEnrollments($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      enrollments(
        limit: $limit
        offset: $offset
        sortOrder: MOST_RECENT
        includeInProgress: false
      ) {
        offset
        limit
        nodesCount
        nodes {
          ...EnrollmentFieldsFromAssessment
        }
      }
    }
  }
  ${EnrollmentFieldsFromAssessmentFragmentDoc}
`;

/**
 * __useGetRecentEnrollmentsQuery__
 *
 * To run a query within a React component, call `useGetRecentEnrollmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentEnrollmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentEnrollmentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetRecentEnrollmentsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >(GetRecentEnrollmentsDocument, options);
}
export function useGetRecentEnrollmentsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentEnrollmentsQuery,
    GetRecentEnrollmentsQueryVariables
  >(GetRecentEnrollmentsDocument, options);
}
export type GetRecentEnrollmentsQueryHookResult = ReturnType<
  typeof useGetRecentEnrollmentsQuery
>;
export type GetRecentEnrollmentsLazyQueryHookResult = ReturnType<
  typeof useGetRecentEnrollmentsLazyQuery
>;
export type GetRecentEnrollmentsQueryResult = Apollo.QueryResult<
  GetRecentEnrollmentsQuery,
  GetRecentEnrollmentsQueryVariables
>;
export const CreateClientDocument = gql`
  mutation CreateClient($input: CreateClientInput!) {
    createClient(input: $input) {
      clientMutationId
      client {
        ...ClientFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateClientMutationFn = Apollo.MutationFunction<
  CreateClientMutation,
  CreateClientMutationVariables
>;

/**
 * __useCreateClientMutation__
 *
 * To run a mutation, you first call `useCreateClientMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClientMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClientMutation, { data, loading, error }] = useCreateClientMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateClientMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClientMutation,
    CreateClientMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateClientMutation,
    CreateClientMutationVariables
  >(CreateClientDocument, options);
}
export type CreateClientMutationHookResult = ReturnType<
  typeof useCreateClientMutation
>;
export type CreateClientMutationResult =
  Apollo.MutationResult<CreateClientMutation>;
export type CreateClientMutationOptions = Apollo.BaseMutationOptions<
  CreateClientMutation,
  CreateClientMutationVariables
>;
export const UpdateClientDocument = gql`
  mutation UpdateClient($input: UpdateClientInput!) {
    updateClient(input: $input) {
      clientMutationId
      client {
        ...ClientFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateClientMutationFn = Apollo.MutationFunction<
  UpdateClientMutation,
  UpdateClientMutationVariables
>;

/**
 * __useUpdateClientMutation__
 *
 * To run a mutation, you first call `useUpdateClientMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClientMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClientMutation, { data, loading, error }] = useUpdateClientMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateClientMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateClientMutation,
    UpdateClientMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateClientMutation,
    UpdateClientMutationVariables
  >(UpdateClientDocument, options);
}
export type UpdateClientMutationHookResult = ReturnType<
  typeof useUpdateClientMutation
>;
export type UpdateClientMutationResult =
  Apollo.MutationResult<UpdateClientMutation>;
export type UpdateClientMutationOptions = Apollo.BaseMutationOptions<
  UpdateClientMutation,
  UpdateClientMutationVariables
>;
export const CreateEnrollmentDocument = gql`
  mutation CreateEnrollment($input: CreateEnrollmentInput!) {
    createEnrollment(input: $input) {
      clientMutationId
      enrollments {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateEnrollmentMutationFn = Apollo.MutationFunction<
  CreateEnrollmentMutation,
  CreateEnrollmentMutationVariables
>;

/**
 * __useCreateEnrollmentMutation__
 *
 * To run a mutation, you first call `useCreateEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createEnrollmentMutation, { data, loading, error }] = useCreateEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateEnrollmentMutation,
    CreateEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateEnrollmentMutation,
    CreateEnrollmentMutationVariables
  >(CreateEnrollmentDocument, options);
}
export type CreateEnrollmentMutationHookResult = ReturnType<
  typeof useCreateEnrollmentMutation
>;
export type CreateEnrollmentMutationResult =
  Apollo.MutationResult<CreateEnrollmentMutation>;
export type CreateEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  CreateEnrollmentMutation,
  CreateEnrollmentMutationVariables
>;
export const UpdateEnrollmentDocument = gql`
  mutation UpdateEnrollment($input: UpdateEnrollmentInput!) {
    updateEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentWithHoHFragment
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentWithHoHFragmentFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateEnrollmentMutationFn = Apollo.MutationFunction<
  UpdateEnrollmentMutation,
  UpdateEnrollmentMutationVariables
>;

/**
 * __useUpdateEnrollmentMutation__
 *
 * To run a mutation, you first call `useUpdateEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateEnrollmentMutation, { data, loading, error }] = useUpdateEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateEnrollmentMutation,
    UpdateEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateEnrollmentMutation,
    UpdateEnrollmentMutationVariables
  >(UpdateEnrollmentDocument, options);
}
export type UpdateEnrollmentMutationHookResult = ReturnType<
  typeof useUpdateEnrollmentMutation
>;
export type UpdateEnrollmentMutationResult =
  Apollo.MutationResult<UpdateEnrollmentMutation>;
export type UpdateEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  UpdateEnrollmentMutation,
  UpdateEnrollmentMutationVariables
>;
export const SetHoHDocument = gql`
  mutation SetHoH($input: SetHoHForEnrollmentInput!) {
    setHoHForEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentWithHoHFragment
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentWithHoHFragmentFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type SetHoHMutationFn = Apollo.MutationFunction<
  SetHoHMutation,
  SetHoHMutationVariables
>;

/**
 * __useSetHoHMutation__
 *
 * To run a mutation, you first call `useSetHoHMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetHoHMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setHoHMutation, { data, loading, error }] = useSetHoHMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSetHoHMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetHoHMutation,
    SetHoHMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SetHoHMutation, SetHoHMutationVariables>(
    SetHoHDocument,
    options
  );
}
export type SetHoHMutationHookResult = ReturnType<typeof useSetHoHMutation>;
export type SetHoHMutationResult = Apollo.MutationResult<SetHoHMutation>;
export type SetHoHMutationOptions = Apollo.BaseMutationOptions<
  SetHoHMutation,
  SetHoHMutationVariables
>;
export const DeleteEnrollmentDocument = gql`
  mutation DeleteEnrollment($input: DeleteEnrollmentInput!) {
    deleteEnrollment(input: $input) {
      clientMutationId
      enrollment {
        ...EnrollmentFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteEnrollmentMutationFn = Apollo.MutationFunction<
  DeleteEnrollmentMutation,
  DeleteEnrollmentMutationVariables
>;

/**
 * __useDeleteEnrollmentMutation__
 *
 * To run a mutation, you first call `useDeleteEnrollmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteEnrollmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteEnrollmentMutation, { data, loading, error }] = useDeleteEnrollmentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteEnrollmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteEnrollmentMutation,
    DeleteEnrollmentMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteEnrollmentMutation,
    DeleteEnrollmentMutationVariables
  >(DeleteEnrollmentDocument, options);
}
export type DeleteEnrollmentMutationHookResult = ReturnType<
  typeof useDeleteEnrollmentMutation
>;
export type DeleteEnrollmentMutationResult =
  Apollo.MutationResult<DeleteEnrollmentMutation>;
export type DeleteEnrollmentMutationOptions = Apollo.BaseMutationOptions<
  DeleteEnrollmentMutation,
  DeleteEnrollmentMutationVariables
>;
export const AddHouseholdMembersDocument = gql`
  mutation AddHouseholdMembers($input: AddHouseholdMembersToEnrollmentInput!) {
    addHouseholdMembersToEnrollment(input: $input) {
      clientMutationId
      enrollments {
        ...EnrollmentWithHoHFragment
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${EnrollmentWithHoHFragmentFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type AddHouseholdMembersMutationFn = Apollo.MutationFunction<
  AddHouseholdMembersMutation,
  AddHouseholdMembersMutationVariables
>;

/**
 * __useAddHouseholdMembersMutation__
 *
 * To run a mutation, you first call `useAddHouseholdMembersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddHouseholdMembersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addHouseholdMembersMutation, { data, loading, error }] = useAddHouseholdMembersMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddHouseholdMembersMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddHouseholdMembersMutation,
    AddHouseholdMembersMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    AddHouseholdMembersMutation,
    AddHouseholdMembersMutationVariables
  >(AddHouseholdMembersDocument, options);
}
export type AddHouseholdMembersMutationHookResult = ReturnType<
  typeof useAddHouseholdMembersMutation
>;
export type AddHouseholdMembersMutationResult =
  Apollo.MutationResult<AddHouseholdMembersMutation>;
export type AddHouseholdMembersMutationOptions = Apollo.BaseMutationOptions<
  AddHouseholdMembersMutation,
  AddHouseholdMembersMutationVariables
>;
export const GetEnrollmentDocument = gql`
  query GetEnrollment($id: ID!) {
    enrollment(id: $id) {
      ...EnrollmentFields
    }
  }
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEnrollmentQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentQuery,
    GetEnrollmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetEnrollmentQuery, GetEnrollmentQueryVariables>(
    GetEnrollmentDocument,
    options
  );
}
export function useGetEnrollmentLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentQuery,
    GetEnrollmentQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetEnrollmentQuery, GetEnrollmentQueryVariables>(
    GetEnrollmentDocument,
    options
  );
}
export type GetEnrollmentQueryHookResult = ReturnType<
  typeof useGetEnrollmentQuery
>;
export type GetEnrollmentLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentLazyQuery
>;
export type GetEnrollmentQueryResult = Apollo.QueryResult<
  GetEnrollmentQuery,
  GetEnrollmentQueryVariables
>;
export const GetEnrollmentWithHoHDocument = gql`
  query GetEnrollmentWithHoH($id: ID!) {
    enrollment(id: $id) {
      ...EnrollmentWithHoHFragment
    }
  }
  ${EnrollmentWithHoHFragmentFragmentDoc}
`;

/**
 * __useGetEnrollmentWithHoHQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentWithHoHQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentWithHoHQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentWithHoHQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEnrollmentWithHoHQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >(GetEnrollmentWithHoHDocument, options);
}
export function useGetEnrollmentWithHoHLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentWithHoHQuery,
    GetEnrollmentWithHoHQueryVariables
  >(GetEnrollmentWithHoHDocument, options);
}
export type GetEnrollmentWithHoHQueryHookResult = ReturnType<
  typeof useGetEnrollmentWithHoHQuery
>;
export type GetEnrollmentWithHoHLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentWithHoHLazyQuery
>;
export type GetEnrollmentWithHoHQueryResult = Apollo.QueryResult<
  GetEnrollmentWithHoHQuery,
  GetEnrollmentWithHoHQueryVariables
>;
export const GetEnrollmentEventsDocument = gql`
  query GetEnrollmentEvents($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    enrollment(id: $id) {
      id
      events(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...EventFields
        }
      }
    }
  }
  ${EventFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentEventsQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentEventsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetEnrollmentEventsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >(GetEnrollmentEventsDocument, options);
}
export function useGetEnrollmentEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentEventsQuery,
    GetEnrollmentEventsQueryVariables
  >(GetEnrollmentEventsDocument, options);
}
export type GetEnrollmentEventsQueryHookResult = ReturnType<
  typeof useGetEnrollmentEventsQuery
>;
export type GetEnrollmentEventsLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentEventsLazyQuery
>;
export type GetEnrollmentEventsQueryResult = Apollo.QueryResult<
  GetEnrollmentEventsQuery,
  GetEnrollmentEventsQueryVariables
>;
export const GetEnrollmentServicesDocument = gql`
  query GetEnrollmentServices($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    enrollment(id: $id) {
      id
      services(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ServiceFields
        }
      }
    }
  }
  ${ServiceFieldsFragmentDoc}
`;

/**
 * __useGetEnrollmentServicesQuery__
 *
 * To run a query within a React component, call `useGetEnrollmentServicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrollmentServicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrollmentServicesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetEnrollmentServicesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >(GetEnrollmentServicesDocument, options);
}
export function useGetEnrollmentServicesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrollmentServicesQuery,
    GetEnrollmentServicesQueryVariables
  >(GetEnrollmentServicesDocument, options);
}
export type GetEnrollmentServicesQueryHookResult = ReturnType<
  typeof useGetEnrollmentServicesQuery
>;
export type GetEnrollmentServicesLazyQueryHookResult = ReturnType<
  typeof useGetEnrollmentServicesLazyQuery
>;
export type GetEnrollmentServicesQueryResult = Apollo.QueryResult<
  GetEnrollmentServicesQuery,
  GetEnrollmentServicesQueryVariables
>;
export const GetClientHouseholdMemberCandidatesDocument = gql`
  query GetClientHouseholdMemberCandidates(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
  ) {
    client(id: $id) {
      id
      enrollments(limit: $limit, offset: $offset, sortOrder: MOST_RECENT) {
        offset
        limit
        nodesCount
        nodes {
          household {
            householdClients {
              client {
                ...ClientFields
              }
            }
          }
        }
      }
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useGetClientHouseholdMemberCandidatesQuery__
 *
 * To run a query within a React component, call `useGetClientHouseholdMemberCandidatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientHouseholdMemberCandidatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientHouseholdMemberCandidatesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetClientHouseholdMemberCandidatesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >(GetClientHouseholdMemberCandidatesDocument, options);
}
export function useGetClientHouseholdMemberCandidatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetClientHouseholdMemberCandidatesQuery,
    GetClientHouseholdMemberCandidatesQueryVariables
  >(GetClientHouseholdMemberCandidatesDocument, options);
}
export type GetClientHouseholdMemberCandidatesQueryHookResult = ReturnType<
  typeof useGetClientHouseholdMemberCandidatesQuery
>;
export type GetClientHouseholdMemberCandidatesLazyQueryHookResult = ReturnType<
  typeof useGetClientHouseholdMemberCandidatesLazyQuery
>;
export type GetClientHouseholdMemberCandidatesQueryResult = Apollo.QueryResult<
  GetClientHouseholdMemberCandidatesQuery,
  GetClientHouseholdMemberCandidatesQueryVariables
>;
export const GetRecentIncomeBenefitsDocument = gql`
  query GetRecentIncomeBenefits($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      incomeBenefits(offset: $offset, limit: $limit) {
        nodesCount
        nodes {
          ...IncomeBenefitFields
        }
      }
    }
  }
  ${IncomeBenefitFieldsFragmentDoc}
`;

/**
 * __useGetRecentIncomeBenefitsQuery__
 *
 * To run a query within a React component, call `useGetRecentIncomeBenefitsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentIncomeBenefitsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentIncomeBenefitsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetRecentIncomeBenefitsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >(GetRecentIncomeBenefitsDocument, options);
}
export function useGetRecentIncomeBenefitsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentIncomeBenefitsQuery,
    GetRecentIncomeBenefitsQueryVariables
  >(GetRecentIncomeBenefitsDocument, options);
}
export type GetRecentIncomeBenefitsQueryHookResult = ReturnType<
  typeof useGetRecentIncomeBenefitsQuery
>;
export type GetRecentIncomeBenefitsLazyQueryHookResult = ReturnType<
  typeof useGetRecentIncomeBenefitsLazyQuery
>;
export type GetRecentIncomeBenefitsQueryResult = Apollo.QueryResult<
  GetRecentIncomeBenefitsQuery,
  GetRecentIncomeBenefitsQueryVariables
>;
export const GetRecentDisabilitiesDocument = gql`
  query GetRecentDisabilities($id: ID!) {
    client(id: $id) {
      id
      disabilityGroups {
        ...DisabilityGroupFields
      }
    }
  }
  ${DisabilityGroupFieldsFragmentDoc}
`;

/**
 * __useGetRecentDisabilitiesQuery__
 *
 * To run a query within a React component, call `useGetRecentDisabilitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentDisabilitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentDisabilitiesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetRecentDisabilitiesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >(GetRecentDisabilitiesDocument, options);
}
export function useGetRecentDisabilitiesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentDisabilitiesQuery,
    GetRecentDisabilitiesQueryVariables
  >(GetRecentDisabilitiesDocument, options);
}
export type GetRecentDisabilitiesQueryHookResult = ReturnType<
  typeof useGetRecentDisabilitiesQuery
>;
export type GetRecentDisabilitiesLazyQueryHookResult = ReturnType<
  typeof useGetRecentDisabilitiesLazyQuery
>;
export type GetRecentDisabilitiesQueryResult = Apollo.QueryResult<
  GetRecentDisabilitiesQuery,
  GetRecentDisabilitiesQueryVariables
>;
export const GetRecentHealthAndDvsDocument = gql`
  query GetRecentHealthAndDvs($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    client(id: $id) {
      id
      healthAndDvs(offset: $offset, limit: $limit) {
        nodesCount
        nodes {
          ...HealthAndDvFields
        }
      }
    }
  }
  ${HealthAndDvFieldsFragmentDoc}
`;

/**
 * __useGetRecentHealthAndDvsQuery__
 *
 * To run a query within a React component, call `useGetRecentHealthAndDvsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecentHealthAndDvsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecentHealthAndDvsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetRecentHealthAndDvsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >(GetRecentHealthAndDvsDocument, options);
}
export function useGetRecentHealthAndDvsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecentHealthAndDvsQuery,
    GetRecentHealthAndDvsQueryVariables
  >(GetRecentHealthAndDvsDocument, options);
}
export type GetRecentHealthAndDvsQueryHookResult = ReturnType<
  typeof useGetRecentHealthAndDvsQuery
>;
export type GetRecentHealthAndDvsLazyQueryHookResult = ReturnType<
  typeof useGetRecentHealthAndDvsLazyQuery
>;
export type GetRecentHealthAndDvsQueryResult = Apollo.QueryResult<
  GetRecentHealthAndDvsQuery,
  GetRecentHealthAndDvsQueryVariables
>;
export const GetAllOrganizationsDocument = gql`
  query GetAllOrganizations {
    organizations(limit: 500, sortOrder: NAME) {
      nodesCount
      nodes {
        ...OrganizationFields
        projects(limit: 1) {
          nodesCount
        }
      }
    }
  }
  ${OrganizationFieldsFragmentDoc}
`;

/**
 * __useGetAllOrganizationsQuery__
 *
 * To run a query within a React component, call `useGetAllOrganizationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllOrganizationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllOrganizationsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >(GetAllOrganizationsDocument, options);
}
export function useGetAllOrganizationsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllOrganizationsQuery,
    GetAllOrganizationsQueryVariables
  >(GetAllOrganizationsDocument, options);
}
export type GetAllOrganizationsQueryHookResult = ReturnType<
  typeof useGetAllOrganizationsQuery
>;
export type GetAllOrganizationsLazyQueryHookResult = ReturnType<
  typeof useGetAllOrganizationsLazyQuery
>;
export type GetAllOrganizationsQueryResult = Apollo.QueryResult<
  GetAllOrganizationsQuery,
  GetAllOrganizationsQueryVariables
>;
export const GetProjectDocument = gql`
  query GetProject($id: ID!) {
    project(id: $id) {
      ...ProjectAllFields
    }
  }
  ${ProjectAllFieldsFragmentDoc}
`;

/**
 * __useGetProjectQuery__
 *
 * To run a query within a React component, call `useGetProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProjectQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectQuery,
    GetProjectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProjectQuery, GetProjectQueryVariables>(
    GetProjectDocument,
    options
  );
}
export function useGetProjectLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectQuery,
    GetProjectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetProjectQuery, GetProjectQueryVariables>(
    GetProjectDocument,
    options
  );
}
export type GetProjectQueryHookResult = ReturnType<typeof useGetProjectQuery>;
export type GetProjectLazyQueryHookResult = ReturnType<
  typeof useGetProjectLazyQuery
>;
export type GetProjectQueryResult = Apollo.QueryResult<
  GetProjectQuery,
  GetProjectQueryVariables
>;
export const DeleteProjectDocument = gql`
  mutation DeleteProject($input: DeleteProjectInput!) {
    deleteProject(input: $input) {
      clientMutationId
      project {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteProjectMutationFn = Apollo.MutationFunction<
  DeleteProjectMutation,
  DeleteProjectMutationVariables
>;

/**
 * __useDeleteProjectMutation__
 *
 * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteProjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteProjectMutation,
    DeleteProjectMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteProjectMutation,
    DeleteProjectMutationVariables
  >(DeleteProjectDocument, options);
}
export type DeleteProjectMutationHookResult = ReturnType<
  typeof useDeleteProjectMutation
>;
export type DeleteProjectMutationResult =
  Apollo.MutationResult<DeleteProjectMutation>;
export type DeleteProjectMutationOptions = Apollo.BaseMutationOptions<
  DeleteProjectMutation,
  DeleteProjectMutationVariables
>;
export const GetFunderDocument = gql`
  query GetFunder($id: ID!) {
    funder(id: $id) {
      ...FunderFields
    }
  }
  ${FunderFieldsFragmentDoc}
`;

/**
 * __useGetFunderQuery__
 *
 * To run a query within a React component, call `useGetFunderQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFunderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFunderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFunderQuery(
  baseOptions: Apollo.QueryHookOptions<GetFunderQuery, GetFunderQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetFunderQuery, GetFunderQueryVariables>(
    GetFunderDocument,
    options
  );
}
export function useGetFunderLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFunderQuery,
    GetFunderQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetFunderQuery, GetFunderQueryVariables>(
    GetFunderDocument,
    options
  );
}
export type GetFunderQueryHookResult = ReturnType<typeof useGetFunderQuery>;
export type GetFunderLazyQueryHookResult = ReturnType<
  typeof useGetFunderLazyQuery
>;
export type GetFunderQueryResult = Apollo.QueryResult<
  GetFunderQuery,
  GetFunderQueryVariables
>;
export const GetInventoryDocument = gql`
  query GetInventory($id: ID!) {
    inventory(id: $id) {
      ...InventoryFields
    }
  }
  ${InventoryFieldsFragmentDoc}
`;

/**
 * __useGetInventoryQuery__
 *
 * To run a query within a React component, call `useGetInventoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInventoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInventoryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetInventoryQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetInventoryQuery,
    GetInventoryQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetInventoryQuery, GetInventoryQueryVariables>(
    GetInventoryDocument,
    options
  );
}
export function useGetInventoryLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetInventoryQuery,
    GetInventoryQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetInventoryQuery, GetInventoryQueryVariables>(
    GetInventoryDocument,
    options
  );
}
export type GetInventoryQueryHookResult = ReturnType<
  typeof useGetInventoryQuery
>;
export type GetInventoryLazyQueryHookResult = ReturnType<
  typeof useGetInventoryLazyQuery
>;
export type GetInventoryQueryResult = Apollo.QueryResult<
  GetInventoryQuery,
  GetInventoryQueryVariables
>;
export const GetProjectCocDocument = gql`
  query GetProjectCoc($id: ID!) {
    projectCoc(id: $id) {
      ...ProjectCocFields
    }
  }
  ${ProjectCocFieldsFragmentDoc}
`;

/**
 * __useGetProjectCocQuery__
 *
 * To run a query within a React component, call `useGetProjectCocQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectCocQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectCocQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProjectCocQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectCocQuery,
    GetProjectCocQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProjectCocQuery, GetProjectCocQueryVariables>(
    GetProjectCocDocument,
    options
  );
}
export function useGetProjectCocLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectCocQuery,
    GetProjectCocQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetProjectCocQuery, GetProjectCocQueryVariables>(
    GetProjectCocDocument,
    options
  );
}
export type GetProjectCocQueryHookResult = ReturnType<
  typeof useGetProjectCocQuery
>;
export type GetProjectCocLazyQueryHookResult = ReturnType<
  typeof useGetProjectCocLazyQuery
>;
export type GetProjectCocQueryResult = Apollo.QueryResult<
  GetProjectCocQuery,
  GetProjectCocQueryVariables
>;
export const GetOrganizationDocument = gql`
  query GetOrganization($id: ID!) {
    organization(id: $id) {
      ...OrganizationAllFields
    }
  }
  ${OrganizationAllFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationQuery__
 *
 * To run a query within a React component, call `useGetOrganizationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOrganizationQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetOrganizationQuery, GetOrganizationQueryVariables>(
    GetOrganizationDocument,
    options
  );
}
export function useGetOrganizationLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationQuery,
    GetOrganizationQueryVariables
  >(GetOrganizationDocument, options);
}
export type GetOrganizationQueryHookResult = ReturnType<
  typeof useGetOrganizationQuery
>;
export type GetOrganizationLazyQueryHookResult = ReturnType<
  typeof useGetOrganizationLazyQuery
>;
export type GetOrganizationQueryResult = Apollo.QueryResult<
  GetOrganizationQuery,
  GetOrganizationQueryVariables
>;
export const DeleteOrganizationDocument = gql`
  mutation DeleteOrganization($input: DeleteOrganizationInput!) {
    deleteOrganization(input: $input) {
      clientMutationId
      organization {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteOrganizationMutationFn = Apollo.MutationFunction<
  DeleteOrganizationMutation,
  DeleteOrganizationMutationVariables
>;

/**
 * __useDeleteOrganizationMutation__
 *
 * To run a mutation, you first call `useDeleteOrganizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteOrganizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteOrganizationMutation, { data, loading, error }] = useDeleteOrganizationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteOrganizationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteOrganizationMutation,
    DeleteOrganizationMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteOrganizationMutation,
    DeleteOrganizationMutationVariables
  >(DeleteOrganizationDocument, options);
}
export type DeleteOrganizationMutationHookResult = ReturnType<
  typeof useDeleteOrganizationMutation
>;
export type DeleteOrganizationMutationResult =
  Apollo.MutationResult<DeleteOrganizationMutation>;
export type DeleteOrganizationMutationOptions = Apollo.BaseMutationOptions<
  DeleteOrganizationMutation,
  DeleteOrganizationMutationVariables
>;
export const GetOrganizationWithPaginatedProjectsDocument = gql`
  query GetOrganizationWithPaginatedProjects(
    $id: ID!
    $limit: Int = 10
    $offset: Int = 0
  ) {
    organization(id: $id) {
      id
      projects(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ProjectAllFields
        }
      }
    }
  }
  ${ProjectAllFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationWithPaginatedProjectsQuery__
 *
 * To run a query within a React component, call `useGetOrganizationWithPaginatedProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationWithPaginatedProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationWithPaginatedProjectsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetOrganizationWithPaginatedProjectsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >(GetOrganizationWithPaginatedProjectsDocument, options);
}
export function useGetOrganizationWithPaginatedProjectsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >(GetOrganizationWithPaginatedProjectsDocument, options);
}
export type GetOrganizationWithPaginatedProjectsQueryHookResult = ReturnType<
  typeof useGetOrganizationWithPaginatedProjectsQuery
>;
export type GetOrganizationWithPaginatedProjectsLazyQueryHookResult =
  ReturnType<typeof useGetOrganizationWithPaginatedProjectsLazyQuery>;
export type GetOrganizationWithPaginatedProjectsQueryResult =
  Apollo.QueryResult<
    GetOrganizationWithPaginatedProjectsQuery,
    GetOrganizationWithPaginatedProjectsQueryVariables
  >;
export const CreateProjectDocument = gql`
  mutation CreateProject($input: CreateProjectInput!) {
    createProject(input: $input) {
      clientMutationId
      project {
        ...ProjectAllFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ProjectAllFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateProjectMutationFn = Apollo.MutationFunction<
  CreateProjectMutation,
  CreateProjectMutationVariables
>;

/**
 * __useCreateProjectMutation__
 *
 * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateProjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateProjectMutation,
    CreateProjectMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateProjectMutation,
    CreateProjectMutationVariables
  >(CreateProjectDocument, options);
}
export type CreateProjectMutationHookResult = ReturnType<
  typeof useCreateProjectMutation
>;
export type CreateProjectMutationResult =
  Apollo.MutationResult<CreateProjectMutation>;
export type CreateProjectMutationOptions = Apollo.BaseMutationOptions<
  CreateProjectMutation,
  CreateProjectMutationVariables
>;
export const UpdateProjectDocument = gql`
  mutation UpdateProject($input: UpdateProjectInput!) {
    updateProject(input: $input) {
      clientMutationId
      project {
        ...ProjectAllFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ProjectAllFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateProjectMutationFn = Apollo.MutationFunction<
  UpdateProjectMutation,
  UpdateProjectMutationVariables
>;

/**
 * __useUpdateProjectMutation__
 *
 * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateProjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateProjectMutation,
    UpdateProjectMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateProjectMutation,
    UpdateProjectMutationVariables
  >(UpdateProjectDocument, options);
}
export type UpdateProjectMutationHookResult = ReturnType<
  typeof useUpdateProjectMutation
>;
export type UpdateProjectMutationResult =
  Apollo.MutationResult<UpdateProjectMutation>;
export type UpdateProjectMutationOptions = Apollo.BaseMutationOptions<
  UpdateProjectMutation,
  UpdateProjectMutationVariables
>;
export const CreateOrganizationDocument = gql`
  mutation CreateOrganization($input: CreateOrganizationInput!) {
    createOrganization(input: $input) {
      clientMutationId
      organization {
        ...OrganizationAllFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${OrganizationAllFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateOrganizationMutationFn = Apollo.MutationFunction<
  CreateOrganizationMutation,
  CreateOrganizationMutationVariables
>;

/**
 * __useCreateOrganizationMutation__
 *
 * To run a mutation, you first call `useCreateOrganizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrganizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrganizationMutation, { data, loading, error }] = useCreateOrganizationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrganizationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateOrganizationMutation,
    CreateOrganizationMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateOrganizationMutation,
    CreateOrganizationMutationVariables
  >(CreateOrganizationDocument, options);
}
export type CreateOrganizationMutationHookResult = ReturnType<
  typeof useCreateOrganizationMutation
>;
export type CreateOrganizationMutationResult =
  Apollo.MutationResult<CreateOrganizationMutation>;
export type CreateOrganizationMutationOptions = Apollo.BaseMutationOptions<
  CreateOrganizationMutation,
  CreateOrganizationMutationVariables
>;
export const UpdateOrganizationDocument = gql`
  mutation UpdateOrganization($input: UpdateOrganizationInput!) {
    updateOrganization(input: $input) {
      clientMutationId
      organization {
        ...OrganizationAllFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${OrganizationAllFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateOrganizationMutationFn = Apollo.MutationFunction<
  UpdateOrganizationMutation,
  UpdateOrganizationMutationVariables
>;

/**
 * __useUpdateOrganizationMutation__
 *
 * To run a mutation, you first call `useUpdateOrganizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOrganizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOrganizationMutation, { data, loading, error }] = useUpdateOrganizationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateOrganizationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateOrganizationMutation,
    UpdateOrganizationMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateOrganizationMutation,
    UpdateOrganizationMutationVariables
  >(UpdateOrganizationDocument, options);
}
export type UpdateOrganizationMutationHookResult = ReturnType<
  typeof useUpdateOrganizationMutation
>;
export type UpdateOrganizationMutationResult =
  Apollo.MutationResult<UpdateOrganizationMutation>;
export type UpdateOrganizationMutationOptions = Apollo.BaseMutationOptions<
  UpdateOrganizationMutation,
  UpdateOrganizationMutationVariables
>;
export const GetProjectInventoriesDocument = gql`
  query GetProjectInventories($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    project(id: $id) {
      id
      inventories(limit: $limit, offset: $offset, sortOrder: START_DATE) {
        offset
        limit
        nodesCount
        nodes {
          ...InventoryFields
        }
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
`;

/**
 * __useGetProjectInventoriesQuery__
 *
 * To run a query within a React component, call `useGetProjectInventoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectInventoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectInventoriesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectInventoriesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >(GetProjectInventoriesDocument, options);
}
export function useGetProjectInventoriesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectInventoriesQuery,
    GetProjectInventoriesQueryVariables
  >(GetProjectInventoriesDocument, options);
}
export type GetProjectInventoriesQueryHookResult = ReturnType<
  typeof useGetProjectInventoriesQuery
>;
export type GetProjectInventoriesLazyQueryHookResult = ReturnType<
  typeof useGetProjectInventoriesLazyQuery
>;
export type GetProjectInventoriesQueryResult = Apollo.QueryResult<
  GetProjectInventoriesQuery,
  GetProjectInventoriesQueryVariables
>;
export const GetProjectProjectCocsDocument = gql`
  query GetProjectProjectCocs($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    project(id: $id) {
      id
      projectCocs(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...ProjectCocFields
        }
      }
    }
  }
  ${ProjectCocFieldsFragmentDoc}
`;

/**
 * __useGetProjectProjectCocsQuery__
 *
 * To run a query within a React component, call `useGetProjectProjectCocsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectProjectCocsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectProjectCocsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectProjectCocsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >(GetProjectProjectCocsDocument, options);
}
export function useGetProjectProjectCocsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectProjectCocsQuery,
    GetProjectProjectCocsQueryVariables
  >(GetProjectProjectCocsDocument, options);
}
export type GetProjectProjectCocsQueryHookResult = ReturnType<
  typeof useGetProjectProjectCocsQuery
>;
export type GetProjectProjectCocsLazyQueryHookResult = ReturnType<
  typeof useGetProjectProjectCocsLazyQuery
>;
export type GetProjectProjectCocsQueryResult = Apollo.QueryResult<
  GetProjectProjectCocsQuery,
  GetProjectProjectCocsQueryVariables
>;
export const GetProjectFundersDocument = gql`
  query GetProjectFunders($id: ID!, $limit: Int = 10, $offset: Int = 0) {
    project(id: $id) {
      id
      funders(limit: $limit, offset: $offset) {
        offset
        limit
        nodesCount
        nodes {
          ...FunderFields
        }
      }
    }
  }
  ${FunderFieldsFragmentDoc}
`;

/**
 * __useGetProjectFundersQuery__
 *
 * To run a query within a React component, call `useGetProjectFundersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectFundersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectFundersQuery({
 *   variables: {
 *      id: // value for 'id'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetProjectFundersQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >(GetProjectFundersDocument, options);
}
export function useGetProjectFundersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectFundersQuery,
    GetProjectFundersQueryVariables
  >(GetProjectFundersDocument, options);
}
export type GetProjectFundersQueryHookResult = ReturnType<
  typeof useGetProjectFundersQuery
>;
export type GetProjectFundersLazyQueryHookResult = ReturnType<
  typeof useGetProjectFundersLazyQuery
>;
export type GetProjectFundersQueryResult = Apollo.QueryResult<
  GetProjectFundersQuery,
  GetProjectFundersQueryVariables
>;
export const CreateInventoryDocument = gql`
  mutation CreateInventory($input: CreateInventoryInput!) {
    createInventory(input: $input) {
      clientMutationId
      inventory {
        ...InventoryFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateInventoryMutationFn = Apollo.MutationFunction<
  CreateInventoryMutation,
  CreateInventoryMutationVariables
>;

/**
 * __useCreateInventoryMutation__
 *
 * To run a mutation, you first call `useCreateInventoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInventoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInventoryMutation, { data, loading, error }] = useCreateInventoryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateInventoryMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateInventoryMutation,
    CreateInventoryMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateInventoryMutation,
    CreateInventoryMutationVariables
  >(CreateInventoryDocument, options);
}
export type CreateInventoryMutationHookResult = ReturnType<
  typeof useCreateInventoryMutation
>;
export type CreateInventoryMutationResult =
  Apollo.MutationResult<CreateInventoryMutation>;
export type CreateInventoryMutationOptions = Apollo.BaseMutationOptions<
  CreateInventoryMutation,
  CreateInventoryMutationVariables
>;
export const UpdateInventoryDocument = gql`
  mutation UpdateInventory($input: UpdateInventoryInput!) {
    updateInventory(input: $input) {
      clientMutationId
      inventory {
        ...InventoryFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${InventoryFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateInventoryMutationFn = Apollo.MutationFunction<
  UpdateInventoryMutation,
  UpdateInventoryMutationVariables
>;

/**
 * __useUpdateInventoryMutation__
 *
 * To run a mutation, you first call `useUpdateInventoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateInventoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateInventoryMutation, { data, loading, error }] = useUpdateInventoryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateInventoryMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateInventoryMutation,
    UpdateInventoryMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateInventoryMutation,
    UpdateInventoryMutationVariables
  >(UpdateInventoryDocument, options);
}
export type UpdateInventoryMutationHookResult = ReturnType<
  typeof useUpdateInventoryMutation
>;
export type UpdateInventoryMutationResult =
  Apollo.MutationResult<UpdateInventoryMutation>;
export type UpdateInventoryMutationOptions = Apollo.BaseMutationOptions<
  UpdateInventoryMutation,
  UpdateInventoryMutationVariables
>;
export const DeleteInventoryDocument = gql`
  mutation DeleteInventory($input: DeleteInventoryInput!) {
    deleteInventory(input: $input) {
      clientMutationId
      inventory {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteInventoryMutationFn = Apollo.MutationFunction<
  DeleteInventoryMutation,
  DeleteInventoryMutationVariables
>;

/**
 * __useDeleteInventoryMutation__
 *
 * To run a mutation, you first call `useDeleteInventoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteInventoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteInventoryMutation, { data, loading, error }] = useDeleteInventoryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteInventoryMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteInventoryMutation,
    DeleteInventoryMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteInventoryMutation,
    DeleteInventoryMutationVariables
  >(DeleteInventoryDocument, options);
}
export type DeleteInventoryMutationHookResult = ReturnType<
  typeof useDeleteInventoryMutation
>;
export type DeleteInventoryMutationResult =
  Apollo.MutationResult<DeleteInventoryMutation>;
export type DeleteInventoryMutationOptions = Apollo.BaseMutationOptions<
  DeleteInventoryMutation,
  DeleteInventoryMutationVariables
>;
export const CreateFunderDocument = gql`
  mutation CreateFunder($input: CreateFunderInput!) {
    createFunder(input: $input) {
      clientMutationId
      funder {
        ...FunderFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${FunderFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateFunderMutationFn = Apollo.MutationFunction<
  CreateFunderMutation,
  CreateFunderMutationVariables
>;

/**
 * __useCreateFunderMutation__
 *
 * To run a mutation, you first call `useCreateFunderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFunderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFunderMutation, { data, loading, error }] = useCreateFunderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateFunderMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateFunderMutation,
    CreateFunderMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateFunderMutation,
    CreateFunderMutationVariables
  >(CreateFunderDocument, options);
}
export type CreateFunderMutationHookResult = ReturnType<
  typeof useCreateFunderMutation
>;
export type CreateFunderMutationResult =
  Apollo.MutationResult<CreateFunderMutation>;
export type CreateFunderMutationOptions = Apollo.BaseMutationOptions<
  CreateFunderMutation,
  CreateFunderMutationVariables
>;
export const UpdateFunderDocument = gql`
  mutation UpdateFunder($input: UpdateFunderInput!) {
    updateFunder(input: $input) {
      clientMutationId
      funder {
        ...FunderFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${FunderFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateFunderMutationFn = Apollo.MutationFunction<
  UpdateFunderMutation,
  UpdateFunderMutationVariables
>;

/**
 * __useUpdateFunderMutation__
 *
 * To run a mutation, you first call `useUpdateFunderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFunderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFunderMutation, { data, loading, error }] = useUpdateFunderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateFunderMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFunderMutation,
    UpdateFunderMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateFunderMutation,
    UpdateFunderMutationVariables
  >(UpdateFunderDocument, options);
}
export type UpdateFunderMutationHookResult = ReturnType<
  typeof useUpdateFunderMutation
>;
export type UpdateFunderMutationResult =
  Apollo.MutationResult<UpdateFunderMutation>;
export type UpdateFunderMutationOptions = Apollo.BaseMutationOptions<
  UpdateFunderMutation,
  UpdateFunderMutationVariables
>;
export const DeleteFunderDocument = gql`
  mutation DeleteFunder($input: DeleteFunderInput!) {
    deleteFunder(input: $input) {
      clientMutationId
      funder {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteFunderMutationFn = Apollo.MutationFunction<
  DeleteFunderMutation,
  DeleteFunderMutationVariables
>;

/**
 * __useDeleteFunderMutation__
 *
 * To run a mutation, you first call `useDeleteFunderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFunderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFunderMutation, { data, loading, error }] = useDeleteFunderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteFunderMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteFunderMutation,
    DeleteFunderMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteFunderMutation,
    DeleteFunderMutationVariables
  >(DeleteFunderDocument, options);
}
export type DeleteFunderMutationHookResult = ReturnType<
  typeof useDeleteFunderMutation
>;
export type DeleteFunderMutationResult =
  Apollo.MutationResult<DeleteFunderMutation>;
export type DeleteFunderMutationOptions = Apollo.BaseMutationOptions<
  DeleteFunderMutation,
  DeleteFunderMutationVariables
>;
export const CreateProjectCocDocument = gql`
  mutation CreateProjectCoc($input: CreateProjectCocInput!) {
    createProjectCoc(input: $input) {
      clientMutationId
      projectCoc {
        ...ProjectCocFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ProjectCocFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type CreateProjectCocMutationFn = Apollo.MutationFunction<
  CreateProjectCocMutation,
  CreateProjectCocMutationVariables
>;

/**
 * __useCreateProjectCocMutation__
 *
 * To run a mutation, you first call `useCreateProjectCocMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProjectCocMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProjectCocMutation, { data, loading, error }] = useCreateProjectCocMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateProjectCocMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateProjectCocMutation,
    CreateProjectCocMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateProjectCocMutation,
    CreateProjectCocMutationVariables
  >(CreateProjectCocDocument, options);
}
export type CreateProjectCocMutationHookResult = ReturnType<
  typeof useCreateProjectCocMutation
>;
export type CreateProjectCocMutationResult =
  Apollo.MutationResult<CreateProjectCocMutation>;
export type CreateProjectCocMutationOptions = Apollo.BaseMutationOptions<
  CreateProjectCocMutation,
  CreateProjectCocMutationVariables
>;
export const UpdateProjectCocDocument = gql`
  mutation UpdateProjectCoc($input: UpdateProjectCocInput!) {
    updateProjectCoc(input: $input) {
      clientMutationId
      projectCoc {
        ...ProjectCocFields
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ProjectCocFieldsFragmentDoc}
  ${ValidationErrorFieldsFragmentDoc}
`;
export type UpdateProjectCocMutationFn = Apollo.MutationFunction<
  UpdateProjectCocMutation,
  UpdateProjectCocMutationVariables
>;

/**
 * __useUpdateProjectCocMutation__
 *
 * To run a mutation, you first call `useUpdateProjectCocMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectCocMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectCocMutation, { data, loading, error }] = useUpdateProjectCocMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateProjectCocMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateProjectCocMutation,
    UpdateProjectCocMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateProjectCocMutation,
    UpdateProjectCocMutationVariables
  >(UpdateProjectCocDocument, options);
}
export type UpdateProjectCocMutationHookResult = ReturnType<
  typeof useUpdateProjectCocMutation
>;
export type UpdateProjectCocMutationResult =
  Apollo.MutationResult<UpdateProjectCocMutation>;
export type UpdateProjectCocMutationOptions = Apollo.BaseMutationOptions<
  UpdateProjectCocMutation,
  UpdateProjectCocMutationVariables
>;
export const DeleteProjectCocDocument = gql`
  mutation DeleteProjectCoc($input: DeleteProjectCocInput!) {
    deleteProjectCoc(input: $input) {
      clientMutationId
      projectCoc {
        id
      }
      errors {
        ...ValidationErrorFields
      }
    }
  }
  ${ValidationErrorFieldsFragmentDoc}
`;
export type DeleteProjectCocMutationFn = Apollo.MutationFunction<
  DeleteProjectCocMutation,
  DeleteProjectCocMutationVariables
>;

/**
 * __useDeleteProjectCocMutation__
 *
 * To run a mutation, you first call `useDeleteProjectCocMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteProjectCocMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteProjectCocMutation, { data, loading, error }] = useDeleteProjectCocMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteProjectCocMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteProjectCocMutation,
    DeleteProjectCocMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteProjectCocMutation,
    DeleteProjectCocMutationVariables
  >(DeleteProjectCocDocument, options);
}
export type DeleteProjectCocMutationHookResult = ReturnType<
  typeof useDeleteProjectCocMutation
>;
export type DeleteProjectCocMutationResult =
  Apollo.MutationResult<DeleteProjectCocMutation>;
export type DeleteProjectCocMutationOptions = Apollo.BaseMutationOptions<
  DeleteProjectCocMutation,
  DeleteProjectCocMutationVariables
>;
