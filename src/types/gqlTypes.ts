import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: string;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
  /** Arbitrary JSON Type */
  JsonObject: any;
};

/** HUD Client */
export type Client = {
  __typename?: 'Client';
  dateUpdated: Scalars['ISO8601DateTime'];
  /** Date of birth as format yyyy-mm-dd */
  dob?: Maybe<Scalars['ISO8601Date']>;
  enrollments: EnrollmentsPaginated;
  firstName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName?: Maybe<Scalars['String']>;
  nameSuffix?: Maybe<Scalars['String']>;
  personalId: Scalars['String'];
  preferredName?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  ssnSerial?: Maybe<Scalars['String']>;
};

/** HUD Client */
export type ClientEnrollmentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<EnrollmentSortOption>;
};

/** HMIS Client input */
export type ClientInput = {
  dob?: InputMaybe<Scalars['String']>;
  dobQuality?: InputMaybe<DobDataQuality>;
  ethnicity?: InputMaybe<Ethnicity>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Array<Gender>>;
  lastName?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  nameQuality?: InputMaybe<NameDataQuality>;
  nameSuffix?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  race?: InputMaybe<Array<Race>>;
  ssn?: InputMaybe<Scalars['String']>;
  ssnQuality?: InputMaybe<SsnDataQuality>;
  veteranStatus?: InputMaybe<VeteranStatus>;
};

/** HMIS Client search input */
export type ClientSearchInput = {
  /** Date of birth as format yyyy-mm-dd */
  dob?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  /** Client primary key */
  id?: InputMaybe<Scalars['ID']>;
  lastName?: InputMaybe<Scalars['String']>;
  organizations?: InputMaybe<Array<Scalars['ID']>>;
  personalId?: InputMaybe<Scalars['String']>;
  preferredName?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<Array<Scalars['ID']>>;
  /** Last 4 digits of SSN */
  ssnSerial?: InputMaybe<Scalars['String']>;
  /** Omnisearch string */
  textSearch?: InputMaybe<Scalars['String']>;
  warehouseId?: InputMaybe<Scalars['String']>;
};

/** HUD Client Sorting Options */
export enum ClientSortOption {
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
}

export type ClientsPaginated = {
  __typename?: 'ClientsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Client>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated input type of CreateClient */
export type CreateClientInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  input: ClientInput;
};

/** Autogenerated return type of CreateClient */
export type CreateClientPayload = {
  __typename?: 'CreateClientPayload';
  client?: Maybe<Client>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<ValidationError>;
};

/** HUD DOB Data Quality */
export enum DobDataQuality {
  /** Full DOB reported */
  DobFull = 'DOB_FULL',
  /** Data not collected */
  DobNotCollected = 'DOB_NOT_COLLECTED',
  /** Full DOB reported */
  DobPartial = 'DOB_PARTIAL',
  /** Client refused */
  DobRefused = 'DOB_REFUSED',
  /** Client doesn't know */
  DobUnknown = 'DOB_UNKNOWN',
}

/** HUD Enrollment */
export type Enrollment = {
  __typename?: 'Enrollment';
  entryDate?: Maybe<Scalars['ISO8601DateTime']>;
  exitDate?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  project: Project;
};

/** HUD Enrollment Sorting Options */
export enum EnrollmentSortOption {
  MostRecent = 'MOST_RECENT',
}

export type EnrollmentsPaginated = {
  __typename?: 'EnrollmentsPaginated';
  hasMoreAfter: Scalars['Boolean'];
  hasMoreBefore: Scalars['Boolean'];
  limit: Scalars['Int'];
  nodes: Array<Enrollment>;
  nodesCount: Scalars['Int'];
  offset: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** HUD Ethnicity */
export enum Ethnicity {
  /** Hispanic/Latin(a)(o)(x) */
  EthnicityHispanic = 'ETHNICITY_HISPANIC',
  /** Non-Hispanic/Non-Latin(a)(o)(x) */
  EthnicityNonHispanic = 'ETHNICITY_NON_HISPANIC',
  /** Data not collected */
  EthnicityNotCollected = 'ETHNICITY_NOT_COLLECTED',
  /** Client refused */
  EthnicityRefused = 'ETHNICITY_REFUSED',
  /** Client doesn't know */
  EthnicityUnknown = 'ETHNICITY_UNKNOWN',
}

/** HUD Gender */
export enum Gender {
  /** Female */
  GenderFemale = 'GENDER_FEMALE',
  /** Male */
  GenderMale = 'GENDER_MALE',
  /** Data not collected */
  GenderNotCollected = 'GENDER_NOT_COLLECTED',
  /** A gender other than singularly female or male (e.g., non-binary, genderfluid, agender, culturally specific gender) */
  GenderNoSingleGender = 'GENDER_NO_SINGLE_GENDER',
  /** Questioning */
  GenderQuestioning = 'GENDER_QUESTIONING',
  /** Client refused */
  GenderRefused = 'GENDER_REFUSED',
  /** Transgender */
  GenderTransgender = 'GENDER_TRANSGENDER',
  /** Client doesn't know */
  GenderUnknown = 'GENDER_UNKNOWN',
}

export type Mutation = {
  __typename?: 'Mutation';
  createClient?: Maybe<CreateClientPayload>;
};

export type MutationCreateClientArgs = {
  input: CreateClientInput;
};

/** HUD Name Data Quality */
export enum NameDataQuality {
  /** Full name reported */
  NameFull = 'NAME_FULL',
  /** Data not collected */
  NameNotCollected = 'NAME_NOT_COLLECTED',
  /** Partial, street name, or code name reported */
  NamePartial = 'NAME_PARTIAL',
  /** Client refused */
  NameRefused = 'NAME_REFUSED',
  /** Client doesn't know */
  NameUnknown = 'NAME_UNKNOWN',
}

/** HUD Organization */
export type Organization = {
  __typename?: 'Organization';
  id: Scalars['ID'];
  organizationName: Scalars['String'];
  /** Get a list of projects for this organization */
  projects: Array<Project>;
};

/** HUD Organization */
export type OrganizationProjectsArgs = {
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HUD Organization Sorting Options */
export enum OrganizationSortOption {
  Name = 'NAME',
}

/** HUD Project */
export type Project = {
  __typename?: 'Project';
  id: Scalars['ID'];
  organization: Organization;
  projectName: Scalars['String'];
  projectType: ProjectType;
};

/** HUD Project Sorting Options */
export enum ProjectSortOption {
  Name = 'NAME',
  OrganizationAndName = 'ORGANIZATION_AND_NAME',
}

/** HUD Project Types */
export enum ProjectType {
  /** Coordinated Entry */
  Ce = 'CE',
  /** Day Shelter */
  DayShelter = 'DAY_SHELTER',
  /** Emergency Shelter */
  Es = 'ES',
  /** Permanent Housing Only */
  Oph = 'OPH',
  /** Other */
  Other = 'OTHER',
  /** Permanent Housing */
  Ph = 'PH',
  /** Homelessness Prevention */
  Prevention = 'PREVENTION',
  /** Permanent Supportive Housing */
  Psh = 'PSH',
  /** Rapid Re-Housing */
  Rrh = 'RRH',
  /** Services Only */
  ServicesOnly = 'SERVICES_ONLY',
  /** Safe Haven */
  Sh = 'SH',
  /** Street Outreach */
  So = 'SO',
  /** Transitional Housing */
  Th = 'TH',
}

export type Query = {
  __typename?: 'Query';
  /** Client lookup */
  client?: Maybe<Client>;
  /** Search for clients */
  clientSearch: ClientsPaginated;
  /** Get a list of organizations */
  organizations: Array<Organization>;
  /** Get a list of projects */
  projects: Array<Project>;
};

export type QueryClientArgs = {
  id: Scalars['ID'];
};

export type QueryClientSearchArgs = {
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  sortOrder?: InputMaybe<ClientSortOption>;
};

export type QueryOrganizationsArgs = {
  sortOrder?: InputMaybe<OrganizationSortOption>;
};

export type QueryProjectsArgs = {
  projectTypes?: InputMaybe<Array<ProjectType>>;
  sortOrder?: InputMaybe<ProjectSortOption>;
};

/** HUD Race */
export enum Race {
  /** American Indian, Alaska Native, or Indigenous */
  RaceAmIndAkNative = 'RACE_AM_IND_AK_NATIVE',
  /** Asian or Asian American */
  RaceAsian = 'RACE_ASIAN',
  /** Black, African American, or African */
  RaceBlackAfAmerican = 'RACE_BLACK_AF_AMERICAN',
  /** Native Hawaiian or Pacific Islander */
  RaceNativeHiPacific = 'RACE_NATIVE_HI_PACIFIC',
  /** Data not collected */
  RaceNotCollected = 'RACE_NOT_COLLECTED',
  /** Client refused */
  RaceRefused = 'RACE_REFUSED',
  /** Client doesn't know */
  RaceUnknown = 'RACE_UNKNOWN',
  /** White */
  RaceWhite = 'RACE_WHITE',
}

/** HUD SSN Data Quality */
export enum SsnDataQuality {
  /** Full SSN reported */
  SsnFull = 'SSN_FULL',
  /** Data not collected */
  SsnNotCollected = 'SSN_NOT_COLLECTED',
  /** Approximate or partial SSN reported */
  SsnPartial = 'SSN_PARTIAL',
  /** Client refused */
  SsnRefused = 'SSN_REFUSED',
  /** Client doesn't know */
  SsnUnknown = 'SSN_UNKNOWN',
}

export type ValidationError = {
  __typename?: 'ValidationError';
  attribute?: Maybe<Scalars['String']>;
  fullMessage?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  options?: Maybe<Scalars['JsonObject']>;
  type: Scalars['String'];
};

/** HUD Veteran Status */
export enum VeteranStatus {
  /** No */
  VeteranStatusNo = 'VETERAN_STATUS_NO',
  /** Data not collected */
  VeteranStatusNotCollected = 'VETERAN_STATUS_NOT_COLLECTED',
  /** Client refused */
  VeteranStatusRefused = 'VETERAN_STATUS_REFUSED',
  /** Client doesn't know */
  VeteranStatusUnknown = 'VETERAN_STATUS_UNKNOWN',
  /** Yes */
  VeteranStatusYes = 'VETERAN_STATUS_YES',
}

export type EnrollmentFieldsFragment = {
  __typename?: 'Enrollment';
  id: string;
  entryDate?: string | null;
  exitDate?: string | null;
  project: { __typename?: 'Project'; projectName: string };
};

export type ClientFieldsFragment = {
  __typename?: 'Client';
  id: string;
  personalId: string;
  ssnSerial?: string | null;
  firstName?: string | null;
  preferredName?: string | null;
  lastName?: string | null;
  nameSuffix?: string | null;
  dob?: string | null;
  dateUpdated: string;
};

export type SearchClientsQueryVariables = Exact<{
  input: ClientSearchInput;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
}>;

export type SearchClientsQuery = {
  __typename?: 'Query';
  clientSearch: {
    __typename?: 'ClientsPaginated';
    offset: number;
    limit: number;
    nodesCount: number;
    nodes: Array<{
      __typename?: 'Client';
      id: string;
      personalId: string;
      ssnSerial?: string | null;
      firstName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
      dob?: string | null;
      dateUpdated: string;
    }>;
  };
};

export type GetClientQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetClientQuery = {
  __typename?: 'Query';
  client?: {
    __typename?: 'Client';
    id: string;
    personalId: string;
    ssnSerial?: string | null;
    firstName?: string | null;
    preferredName?: string | null;
    lastName?: string | null;
    nameSuffix?: string | null;
    dob?: string | null;
    dateUpdated: string;
    enrollments: {
      __typename?: 'EnrollmentsPaginated';
      offset: number;
      limit: number;
      nodesCount: number;
      nodes: Array<{
        __typename?: 'Enrollment';
        id: string;
        entryDate?: string | null;
        exitDate?: string | null;
        project: { __typename?: 'Project'; projectName: string };
      }>;
    };
  } | null;
};

export type CreateClientMutationVariables = Exact<{
  input: CreateClientInput;
}>;

export type CreateClientMutation = {
  __typename?: 'Mutation';
  createClient?: {
    __typename?: 'CreateClientPayload';
    clientMutationId?: string | null;
    client?: {
      __typename?: 'Client';
      id: string;
      personalId: string;
      ssnSerial?: string | null;
      firstName?: string | null;
      preferredName?: string | null;
      lastName?: string | null;
      nameSuffix?: string | null;
      dob?: string | null;
      dateUpdated: string;
    } | null;
    errors: Array<{
      __typename?: 'ValidationError';
      type: string;
      attribute?: string | null;
      message: string;
      fullMessage?: string | null;
    }>;
  } | null;
};

export type ProjectFieldsFragment = {
  __typename?: 'Project';
  id: string;
  projectName: string;
  projectType: ProjectType;
};

export type OrganizationFieldsFragment = {
  __typename?: 'Organization';
  id: string;
  organizationName: string;
};

export type GetProjectsForSelectQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetProjectsForSelectQuery = {
  __typename?: 'Query';
  projects: Array<{
    __typename?: 'Project';
    id: string;
    projectName: string;
    projectType: ProjectType;
    organization: { __typename?: 'Organization'; organizationName: string };
  }>;
};

export type GetOrganizationsForSelectQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetOrganizationsForSelectQuery = {
  __typename?: 'Query';
  organizations: Array<{
    __typename?: 'Organization';
    id: string;
    organizationName: string;
  }>;
};

export const EnrollmentFieldsFragmentDoc = gql`
  fragment EnrollmentFields on Enrollment {
    id
    entryDate
    exitDate
    project {
      projectName
    }
  }
`;
export const ClientFieldsFragmentDoc = gql`
  fragment ClientFields on Client {
    id
    personalId
    ssnSerial
    firstName
    preferredName
    lastName
    nameSuffix
    dob
    dateUpdated
  }
`;
export const ProjectFieldsFragmentDoc = gql`
  fragment ProjectFields on Project {
    id
    projectName
    projectType
  }
`;
export const OrganizationFieldsFragmentDoc = gql`
  fragment OrganizationFields on Organization {
    id
    organizationName
  }
`;
export const SearchClientsDocument = gql`
  query SearchClients($input: ClientSearchInput!, $limit: Int, $offset: Int) {
    clientSearch(input: $input, limit: $limit, offset: $offset) {
      offset
      limit
      nodesCount
      nodes {
        ...ClientFields
      }
    }
  }
  ${ClientFieldsFragmentDoc}
`;

/**
 * __useSearchClientsQuery__
 *
 * To run a query within a React component, call `useSearchClientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchClientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchClientsQuery({
 *   variables: {
 *      input: // value for 'input'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useSearchClientsQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export function useSearchClientsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchClientsQuery,
    SearchClientsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<SearchClientsQuery, SearchClientsQueryVariables>(
    SearchClientsDocument,
    options
  );
}
export type SearchClientsQueryHookResult = ReturnType<
  typeof useSearchClientsQuery
>;
export type SearchClientsLazyQueryHookResult = ReturnType<
  typeof useSearchClientsLazyQuery
>;
export type SearchClientsQueryResult = Apollo.QueryResult<
  SearchClientsQuery,
  SearchClientsQueryVariables
>;
export const GetClientDocument = gql`
  query GetClient($id: ID!) {
    client(id: $id) {
      ...ClientFields
      enrollments(limit: 10, offset: 0) {
        offset
        limit
        nodesCount
        nodes {
          ...EnrollmentFields
        }
      }
    }
  }
  ${ClientFieldsFragmentDoc}
  ${EnrollmentFieldsFragmentDoc}
`;

/**
 * __useGetClientQuery__
 *
 * To run a query within a React component, call `useGetClientQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClientQuery(
  baseOptions: Apollo.QueryHookOptions<GetClientQuery, GetClientQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export function useGetClientLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClientQuery,
    GetClientQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetClientQuery, GetClientQueryVariables>(
    GetClientDocument,
    options
  );
}
export type GetClientQueryHookResult = ReturnType<typeof useGetClientQuery>;
export type GetClientLazyQueryHookResult = ReturnType<
  typeof useGetClientLazyQuery
>;
export type GetClientQueryResult = Apollo.QueryResult<
  GetClientQuery,
  GetClientQueryVariables
>;
export const CreateClientDocument = gql`
  mutation CreateClient($input: CreateClientInput!) {
    createClient(input: $input) {
      clientMutationId
      client {
        ...ClientFields
      }
      errors {
        type
        attribute
        message
        fullMessage
      }
    }
  }
  ${ClientFieldsFragmentDoc}
`;
export type CreateClientMutationFn = Apollo.MutationFunction<
  CreateClientMutation,
  CreateClientMutationVariables
>;

/**
 * __useCreateClientMutation__
 *
 * To run a mutation, you first call `useCreateClientMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClientMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClientMutation, { data, loading, error }] = useCreateClientMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateClientMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClientMutation,
    CreateClientMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateClientMutation,
    CreateClientMutationVariables
  >(CreateClientDocument, options);
}
export type CreateClientMutationHookResult = ReturnType<
  typeof useCreateClientMutation
>;
export type CreateClientMutationResult =
  Apollo.MutationResult<CreateClientMutation>;
export type CreateClientMutationOptions = Apollo.BaseMutationOptions<
  CreateClientMutation,
  CreateClientMutationVariables
>;
export const GetProjectsForSelectDocument = gql`
  query GetProjectsForSelect {
    projects(sortOrder: ORGANIZATION_AND_NAME) {
      ...ProjectFields
      organization {
        organizationName
      }
    }
  }
  ${ProjectFieldsFragmentDoc}
`;

/**
 * __useGetProjectsForSelectQuery__
 *
 * To run a query within a React component, call `useGetProjectsForSelectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectsForSelectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectsForSelectQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetProjectsForSelectQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >(GetProjectsForSelectDocument, options);
}
export function useGetProjectsForSelectLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProjectsForSelectQuery,
    GetProjectsForSelectQueryVariables
  >(GetProjectsForSelectDocument, options);
}
export type GetProjectsForSelectQueryHookResult = ReturnType<
  typeof useGetProjectsForSelectQuery
>;
export type GetProjectsForSelectLazyQueryHookResult = ReturnType<
  typeof useGetProjectsForSelectLazyQuery
>;
export type GetProjectsForSelectQueryResult = Apollo.QueryResult<
  GetProjectsForSelectQuery,
  GetProjectsForSelectQueryVariables
>;
export const GetOrganizationsForSelectDocument = gql`
  query GetOrganizationsForSelect {
    organizations(sortOrder: NAME) {
      ...OrganizationFields
    }
  }
  ${OrganizationFieldsFragmentDoc}
`;

/**
 * __useGetOrganizationsForSelectQuery__
 *
 * To run a query within a React component, call `useGetOrganizationsForSelectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationsForSelectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationsForSelectQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOrganizationsForSelectQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >(GetOrganizationsForSelectDocument, options);
}
export function useGetOrganizationsForSelectLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetOrganizationsForSelectQuery,
    GetOrganizationsForSelectQueryVariables
  >(GetOrganizationsForSelectDocument, options);
}
export type GetOrganizationsForSelectQueryHookResult = ReturnType<
  typeof useGetOrganizationsForSelectQuery
>;
export type GetOrganizationsForSelectLazyQueryHookResult = ReturnType<
  typeof useGetOrganizationsForSelectLazyQuery
>;
export type GetOrganizationsForSelectQueryResult = Apollo.QueryResult<
  GetOrganizationsForSelectQuery,
  GetOrganizationsForSelectQueryVariables
>;
