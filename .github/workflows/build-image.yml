name: 'Build and Scan Container'

on:
  workflow_dispatch:
  pull_request:
    branches:
      - stable
  push:
    branches:
      - "*"
      - "**/*"

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    outputs:
      digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.0.2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        if: github.event_name != 'pull_request'
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: github-action

      - name: Export node version
        id: node
        run: |
          export NODE_VERSION=`cat .nvmrc`

          echo "::set-output name=node_version::$NODE_VERSION"

      # Build and scan on PRs
      - name: Build container image
        if: github.event_name == 'pull_request'
        id: vuln_build
        uses: docker/build-push-action@v3
        with:
          push: false
          file: docker/Dockerfile
          tags: ${{ secrets.IMAGE_NAME }}:${{ secrets.GITHUB_TOKEN }}
          outputs: type=docker
          build-args: |
            NODE_VERSION=${{ steps.node.outputs.node_version }}

      - name: Run vulnerability scan
        if: github.event_name == 'pull_request'
        id: vuln_scan
        uses: aquasecurity/trivy-action@0.2.5
        continue-on-error: true
        with:
          image-ref: ${{ secrets.IMAGE_NAME }}:${{ secrets.GITHUB_TOKEN }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      # Build scan and push to ECR
      - name: Login to Amazon ECR
        if: github.event_name != 'pull_request'
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build container image
        if: github.event_name != 'pull_request'
        id: build
        uses: docker/build-push-action@v3
        with:
          push: false
          file: docker/Dockerfile
          tags: ${{ secrets.IMAGE_NAME }}:${{ secrets.GITHUB_TOKEN }}
          outputs: type=docker

      # log medium vulnerabilities
      - name: Run scan for medium vulnerabilities
        if: github.event_name != 'pull_request'
        id: scan_medium
        uses: aquasecurity/trivy-action@0.2.5
        continue-on-error: true
        with:
          image-ref: ${{ secrets.IMAGE_NAME }}:${{ secrets.GITHUB_TOKEN }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'MEDIUM'

      # fail on critical and high vulnerabilities
      - name: Run scan for critical and high vulnerabilities
        if: github.event_name == 'pull_request'
        id: scan_crit
        uses: aquasecurity/trivy-action@0.2.5
        continue-on-error: true
        with:
          image-ref: ${{ secrets.IMAGE_NAME }}:${{ secrets.GITHUB_TOKEN }}
          format: 'table'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Set Docker remote
        if: ${{ github.event_name != 'pull_request' }}
        id: metadata
        uses: docker/metadata-action@v3.6.0
        with:
          images: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.IMAGE_NAME }}

      - name: Build and push container image
        if: ${{ github.event_name != 'pull_request' }}
        id: push
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' }}
          file: docker/Dockerfile
          labels: ${{ steps.metadata.outputs.labels }}
          tags: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.IMAGE_NAME }}:${{ secrets.GITHUB_TOKEN }}
